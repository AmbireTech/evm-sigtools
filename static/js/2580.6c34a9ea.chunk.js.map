{"version":3,"file":"static/js/2580.6c34a9ea.chunk.js","mappings":"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","sources":["../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/_version.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/formatter.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/base-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/json-rpc-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/browser-ws.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/websocket-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/url-json-rpc-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/alchemy-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/cloudflare-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/etherscan-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/fallback-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/browser-ipc-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/infura-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/json-rpc-batch-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/nodesmith-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/pocket-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/web3-provider.ts","../node_modules/@web3-onboard/ledger/node_modules/@ethersproject/providers/src.ts/index.ts"],"sourcesContent":["export const version = \"providers/5.5.0\";\n","\"use strict\";\n\nimport { Block, TransactionReceipt, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { getAddress, getContractAddress } from \"@ethersproject/address\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { hexDataLength, hexDataSlice, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { AddressZero } from \"@ethersproject/constants\";\nimport { shallowCopy } from \"@ethersproject/properties\";\nimport { AccessList, accessListify, parse as parseTransaction } from \"@ethersproject/transactions\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport type FormatFunc = (value: any) => any;\n\nexport type FormatFuncs = { [ key: string ]: FormatFunc };\n\nexport type Formats = {\n    transaction: FormatFuncs,\n    transactionRequest: FormatFuncs,\n    receipt: FormatFuncs,\n    receiptLog: FormatFuncs,\n    block: FormatFuncs,\n    blockWithTransactions: FormatFuncs,\n    filter: FormatFuncs,\n    filterLog: FormatFuncs,\n};\n\nexport class Formatter {\n    readonly formats: Formats;\n\n    constructor() {\n        logger.checkNew(new.target, Formatter);\n        this.formats = this.getDefaultFormats();\n    }\n\n    getDefaultFormats(): Formats {\n        const formats: Formats = <Formats>({ });\n\n        const address = this.address.bind(this);\n        const bigNumber = this.bigNumber.bind(this);\n        const blockTag = this.blockTag.bind(this);\n        const data = this.data.bind(this);\n        const hash = this.hash.bind(this);\n        const hex = this.hex.bind(this);\n        const number = this.number.bind(this);\n        const type = this.type.bind(this);\n\n        const strictData = (v: any) => { return this.data(v, true); };\n\n        formats.transaction = {\n            hash: hash,\n\n            type: type,\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n\n            blockHash: Formatter.allowNull(hash, null),\n            blockNumber: Formatter.allowNull(number, null),\n            transactionIndex: Formatter.allowNull(number, null),\n\n            confirmations: Formatter.allowNull(number, null),\n\n            from: address,\n\n            // either (gasPrice) or (maxPriorityFeePerGas + maxFeePerGas)\n            // must be set\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n\n            gasLimit: bigNumber,\n            to: Formatter.allowNull(address, null),\n            value: bigNumber,\n            nonce: number,\n            data: data,\n\n            r: Formatter.allowNull(this.uint256),\n            s: Formatter.allowNull(this.uint256),\n            v: Formatter.allowNull(number),\n\n            creates: Formatter.allowNull(address, null),\n\n            raw: Formatter.allowNull(data),\n        };\n\n        formats.transactionRequest = {\n            from: Formatter.allowNull(address),\n            nonce: Formatter.allowNull(number),\n            gasLimit: Formatter.allowNull(bigNumber),\n            gasPrice: Formatter.allowNull(bigNumber),\n            maxPriorityFeePerGas: Formatter.allowNull(bigNumber),\n            maxFeePerGas: Formatter.allowNull(bigNumber),\n            to: Formatter.allowNull(address),\n            value: Formatter.allowNull(bigNumber),\n            data: Formatter.allowNull(strictData),\n            type: Formatter.allowNull(number),\n            accessList: Formatter.allowNull(this.accessList.bind(this), null),\n        };\n\n        formats.receiptLog = {\n            transactionIndex: number,\n            blockNumber: number,\n            transactionHash: hash,\n            address: address,\n            topics: Formatter.arrayOf(hash),\n            data: data,\n            logIndex: number,\n            blockHash: hash,\n        };\n\n        formats.receipt = {\n            to: Formatter.allowNull(this.address, null),\n            from: Formatter.allowNull(this.address, null),\n            contractAddress: Formatter.allowNull(address, null),\n            transactionIndex: number,\n            // should be allowNull(hash), but broken-EIP-658 support is handled in receipt\n            root: Formatter.allowNull(hex),\n            gasUsed: bigNumber,\n            logsBloom: Formatter.allowNull(data),// @TODO: should this be data?\n            blockHash: hash,\n            transactionHash: hash,\n            logs: Formatter.arrayOf(this.receiptLog.bind(this)),\n            blockNumber: number,\n            confirmations: Formatter.allowNull(number, null),\n            cumulativeGasUsed: bigNumber,\n            effectiveGasPrice: Formatter.allowNull(bigNumber),\n            status: Formatter.allowNull(number),\n            type: type\n        };\n\n        formats.block = {\n            hash: hash,\n            parentHash: hash,\n            number: number,\n\n            timestamp: number,\n            nonce: Formatter.allowNull(hex),\n            difficulty: this.difficulty.bind(this),\n\n            gasLimit: bigNumber,\n            gasUsed: bigNumber,\n\n            miner: address,\n            extraData: data,\n\n            transactions: Formatter.allowNull(Formatter.arrayOf(hash)),\n\n            baseFeePerGas: Formatter.allowNull(bigNumber)\n        };\n\n        formats.blockWithTransactions = shallowCopy(formats.block);\n        formats.blockWithTransactions.transactions = Formatter.allowNull(Formatter.arrayOf(this.transactionResponse.bind(this)));\n\n        formats.filter = {\n            fromBlock: Formatter.allowNull(blockTag, undefined),\n            toBlock: Formatter.allowNull(blockTag, undefined),\n            blockHash: Formatter.allowNull(hash, undefined),\n            address: Formatter.allowNull(address, undefined),\n            topics: Formatter.allowNull(this.topics.bind(this), undefined),\n        };\n\n        formats.filterLog = {\n            blockNumber: Formatter.allowNull(number),\n            blockHash: Formatter.allowNull(hash),\n            transactionIndex: number,\n\n            removed: Formatter.allowNull(this.boolean.bind(this)),\n\n            address: address,\n            data: Formatter.allowFalsish(data, \"0x\"),\n\n            topics: Formatter.arrayOf(hash),\n\n            transactionHash: hash,\n            logIndex: number,\n        };\n\n        return formats;\n    }\n\n    accessList(accessList: Array<any>): AccessList {\n        return accessListify(accessList || []);\n    }\n\n    // Requires a BigNumberish that is within the IEEE754 safe integer range; returns a number\n    // Strict! Used on input.\n    number(number: any): number {\n        if (number === \"0x\") { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    type(number: any): number {\n        if (number === \"0x\" || number == null) { return 0; }\n        return BigNumber.from(number).toNumber();\n    }\n\n    // Strict! Used on input.\n    bigNumber(value: any): BigNumber {\n        return BigNumber.from(value);\n    }\n\n    // Requires a boolean, \"true\" or  \"false\"; returns a boolean\n    boolean(value: any): boolean {\n        if (typeof(value) === \"boolean\") { return value; }\n        if (typeof(value) === \"string\") {\n            value = value.toLowerCase();\n            if (value === \"true\") { return true; }\n            if (value === \"false\") { return false; }\n        }\n        throw new Error(\"invalid boolean - \" + value);\n    }\n\n    hex(value: any, strict?: boolean): string {\n        if (typeof(value) === \"string\") {\n            if (!strict && value.substring(0, 2) !== \"0x\") { value = \"0x\" + value; }\n            if (isHexString(value)) {\n               return value.toLowerCase();\n            }\n        }\n        return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n    }\n\n    data(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if ((result.length % 2) !== 0) {\n            throw new Error(\"invalid data; odd-length - \" + value);\n        }\n        return result;\n    }\n\n    // Requires an address\n    // Strict! Used on input.\n    address(value: any): string {\n        return getAddress(value);\n    }\n\n    callAddress(value: any): string {\n        if (!isHexString(value, 32)) { return null; }\n        const address = getAddress(hexDataSlice(value, 12));\n        return (address === AddressZero) ? null: address;\n    }\n\n    contractAddress(value: any): string {\n        return getContractAddress(value);\n    }\n\n    // Strict! Used on input.\n    blockTag(blockTag: any): string {\n        if (blockTag == null) { return \"latest\"; }\n\n        if (blockTag === \"earliest\") { return \"0x0\"; }\n\n        if (blockTag === \"latest\" || blockTag === \"pending\") {\n            return blockTag;\n        }\n\n        if (typeof(blockTag) === \"number\" || isHexString(blockTag)) {\n            return hexValue(<number | string>blockTag);\n        }\n\n        throw new Error(\"invalid blockTag\");\n    }\n\n    // Requires a hash, optionally requires 0x prefix; returns prefixed lowercase hash.\n    hash(value: any, strict?: boolean): string {\n        const result = this.hex(value, strict);\n        if (hexDataLength(result) !== 32) {\n            return logger.throwArgumentError(\"invalid hash\", \"value\", value);\n        }\n        return result;\n    }\n\n    // Returns the difficulty as a number, or if too large (i.e. PoA network) null\n    difficulty(value: any): number {\n        if (value == null) { return null; }\n\n        const v = BigNumber.from(value);\n\n        try {\n            return v.toNumber();\n        } catch (error) { }\n\n       return null;\n    }\n\n    uint256(value: any): string {\n        if (!isHexString(value)) {\n            throw new Error(\"invalid uint256\");\n        }\n        return hexZeroPad(value, 32);\n    }\n\n    _block(value: any, format: any): Block {\n        if (value.author != null && value.miner == null) {\n            value.miner = value.author;\n        }\n        // The difficulty may need to come from _difficulty in recursed blocks\n        const difficulty = (value._difficulty != null) ? value._difficulty: value.difficulty;\n        const result = Formatter.check(format, value);\n        result._difficulty = ((difficulty == null) ? null: BigNumber.from(difficulty));\n        return result;\n    }\n\n    block(value: any): Block {\n        return this._block(value, this.formats.block);\n    }\n\n    blockWithTransactions(value: any): Block {\n        return this._block(value, this.formats.blockWithTransactions);\n    }\n\n    // Strict! Used on input.\n    transactionRequest(value: any): any {\n        return Formatter.check(this.formats.transactionRequest, value);\n    }\n\n    transactionResponse(transaction: any): TransactionResponse {\n\n        // Rename gas to gasLimit\n        if (transaction.gas != null && transaction.gasLimit == null) {\n            transaction.gasLimit = transaction.gas;\n        }\n\n        // Some clients (TestRPC) do strange things like return 0x0 for the\n        // 0 address; correct this to be a real address\n        if (transaction.to && BigNumber.from(transaction.to).isZero()) {\n            transaction.to = \"0x0000000000000000000000000000000000000000\";\n        }\n\n        // Rename input to data\n        if (transaction.input != null && transaction.data == null) {\n            transaction.data = transaction.input;\n        }\n\n        // If to and creates are empty, populate the creates from the transaction\n        if (transaction.to == null && transaction.creates == null) {\n            transaction.creates = this.contractAddress(transaction);\n        }\n\n        if ((transaction.type === 1 || transaction.type === 2)&& transaction.accessList == null) {\n            transaction.accessList = [ ];\n        }\n\n        const result: TransactionResponse = Formatter.check(this.formats.transaction, transaction);\n\n        if (transaction.chainId != null) {\n            let chainId = transaction.chainId;\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            result.chainId = chainId;\n\n        } else {\n            let chainId = transaction.networkId;\n\n            // geth-etc returns chainId\n            if (chainId == null && result.v == null) {\n                chainId = transaction.chainId;\n            }\n\n            if (isHexString(chainId)) {\n                chainId = BigNumber.from(chainId).toNumber();\n            }\n\n            if (typeof(chainId) !== \"number\" && result.v != null) {\n                chainId = (result.v - 35) / 2;\n                if (chainId < 0) { chainId = 0; }\n                chainId = parseInt(chainId);\n            }\n\n            if (typeof(chainId) !== \"number\") { chainId = 0; }\n\n            result.chainId = chainId;\n        }\n\n        // 0x0000... should actually be null\n        if (result.blockHash && result.blockHash.replace(/0/g, \"\") === \"x\") {\n            result.blockHash = null;\n        }\n\n        return result;\n    }\n\n    transaction(value: any): any {\n        return parseTransaction(value);\n    }\n\n    receiptLog(value: any): any {\n        return Formatter.check(this.formats.receiptLog, value);\n    }\n\n    receipt(value: any): TransactionReceipt {\n        const result: TransactionReceipt = Formatter.check(this.formats.receipt, value);\n\n        // RSK incorrectly implemented EIP-658, so we munge things a bit here for it\n        if (result.root != null) {\n            if (result.root.length <= 4) {\n                // Could be 0x00, 0x0, 0x01 or 0x1\n                const value = BigNumber.from(result.root).toNumber();\n                if (value === 0 || value === 1) {\n                    // Make sure if both are specified, they match\n                    if (result.status != null && (result.status !== value)) {\n                        logger.throwArgumentError(\"alt-root-status/status mismatch\", \"value\", { root: result.root, status: result.status });\n                    }\n                    result.status = value;\n                    delete result.root;\n                } else {\n                    logger.throwArgumentError(\"invalid alt-root-status\", \"value.root\", result.root);\n                }\n            } else if (result.root.length !== 66) {\n                // Must be a valid bytes32\n                logger.throwArgumentError(\"invalid root hash\", \"value.root\", result.root);\n            }\n        }\n\n        if (result.status != null) {\n            result.byzantium = true;\n        }\n\n        return result;\n    }\n\n    topics(value: any): any {\n        if (Array.isArray(value)) {\n            return value.map((v) => this.topics(v));\n\n        } else if (value != null) {\n            return this.hash(value, true);\n        }\n\n        return null;\n    }\n\n    filter(value: any): any {\n        return Formatter.check(this.formats.filter, value);\n    }\n\n    filterLog(value: any): any {\n        return Formatter.check(this.formats.filterLog, value);\n    }\n\n    static check(format: { [ name: string ]: FormatFunc }, object: any): any {\n        const result: any = {};\n        for (const key in format) {\n            try {\n                const value = format[key](object[key]);\n                if (value !== undefined) { result[key] = value; }\n            } catch (error) {\n                error.checkKey = key;\n                error.checkValue = object[key];\n                throw error;\n            }\n        }\n        return result;\n    }\n\n    // if value is null-ish, nullValue is returned\n    static allowNull(format: FormatFunc, nullValue?: any): FormatFunc {\n        return (function(value: any) {\n            if (value == null) { return nullValue; }\n            return format(value);\n        });\n    }\n\n    // If value is false-ish, replaceValue is returned\n    static allowFalsish(format: FormatFunc, replaceValue: any): FormatFunc {\n        return (function(value: any) {\n            if (!value) { return replaceValue; }\n            return format(value);\n        });\n    }\n\n    // Requires an Array satisfying check\n    static arrayOf(format: FormatFunc): FormatFunc {\n        return (function(array: any): Array<any> {\n            if (!Array.isArray(array)) { throw new Error(\"not an array\"); }\n\n            const result: any = [];\n\n            array.forEach(function(value) {\n                result.push(format(value));\n            });\n\n            return result;\n        });\n    }\n}\n\nexport interface CommunityResourcable {\n    isCommunityResource(): boolean;\n}\n\nexport function isCommunityResourcable(value: any): value is CommunityResourcable {\n    return (value && typeof(value.isCommunityResource) === \"function\");\n}\n\nexport function isCommunityResource(value: any): boolean {\n    return (isCommunityResourcable(value) && value.isCommunityResource());\n}\n\n// Show the throttle message only once\nlet throttleMessage = false;\nexport function showThrottleMessage() {\n    if (throttleMessage) { return; }\n    throttleMessage = true;\n\n    console.log(\"========= NOTICE =========\")\n    console.log(\"Request-Rate Exceeded  (this message will not be repeated)\");\n    console.log(\"\");\n    console.log(\"The default API keys for each service are provided as a highly-throttled,\");\n    console.log(\"community resource for low-traffic projects and early prototyping.\");\n    console.log(\"\");\n    console.log(\"While your application will continue to function, we highly recommended\");\n    console.log(\"signing up for your own API keys to improve performance, increase your\");\n    console.log(\"request rate/limit and enable other perks, such as metrics and advanced APIs.\");\n    console.log(\"\");\n    console.log(\"For more details: https:/\\/docs.ethers.io/api-keys/\");\n    console.log(\"==========================\");\n}\n\n","\"use strict\";\n\nimport {\n    Block, BlockTag, BlockWithTransactions, EventType, Filter, FilterByBlockHash, ForkEvent,\n    Listener, Log, Provider, TransactionReceipt, TransactionRequest, TransactionResponse\n} from \"@ethersproject/abstract-provider\";\nimport { Base58 } from \"@ethersproject/basex\";\nimport { BigNumber, BigNumberish } from \"@ethersproject/bignumber\";\nimport { arrayify, concat, hexConcat, hexDataLength, hexDataSlice, hexlify, hexValue, hexZeroPad, isHexString } from \"@ethersproject/bytes\";\nimport { HashZero } from \"@ethersproject/constants\";\nimport { namehash } from \"@ethersproject/hash\";\nimport { getNetwork, Network, Networkish } from \"@ethersproject/networks\";\nimport { Deferrable, defineReadOnly, getStatic, resolveProperties } from \"@ethersproject/properties\";\nimport { Transaction } from \"@ethersproject/transactions\";\nimport { sha256 } from \"@ethersproject/sha2\";\nimport { toUtf8Bytes, toUtf8String } from \"@ethersproject/strings\";\nimport { fetchJson, poll } from \"@ethersproject/web\";\n\nimport bech32 from \"bech32\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { Formatter } from \"./formatter\";\n\n//////////////////////////////\n// Event Serializeing\n\nfunction checkTopic(topic: string): string {\n     if (topic == null) { return \"null\"; }\n     if (hexDataLength(topic) !== 32) {\n         logger.throwArgumentError(\"invalid topic\", \"topic\", topic);\n     }\n     return topic.toLowerCase();\n}\n\nfunction serializeTopics(topics: Array<string | Array<string>>): string {\n    // Remove trailing null AND-topics; they are redundant\n    topics = topics.slice();\n    while (topics.length > 0 && topics[topics.length - 1] == null) { topics.pop(); }\n\n    return topics.map((topic) => {\n        if (Array.isArray(topic)) {\n\n            // Only track unique OR-topics\n            const unique: { [ topic: string ]: boolean } = { }\n            topic.forEach((topic) => {\n                unique[checkTopic(topic)] = true;\n            });\n\n            // The order of OR-topics does not matter\n            const sorted = Object.keys(unique);\n            sorted.sort();\n\n            return sorted.join(\"|\");\n\n        } else {\n            return checkTopic(topic);\n        }\n    }).join(\"&\");\n}\n\nfunction deserializeTopics(data: string): Array<string | Array<string>> {\n    if (data === \"\") { return [ ]; }\n\n    return data.split(/&/g).map((topic) => {\n        if (topic === \"\") { return [ ]; }\n\n        const comps = topic.split(\"|\").map((topic) => {\n            return ((topic === \"null\") ? null: topic);\n        });\n\n        return ((comps.length === 1) ? comps[0]: comps);\n    });\n}\n\nfunction getEventTag(eventName: EventType): string {\n    if (typeof(eventName) === \"string\") {\n        eventName = eventName.toLowerCase();\n\n        if (hexDataLength(eventName) === 32) {\n            return \"tx:\" + eventName;\n        }\n\n        if (eventName.indexOf(\":\") === -1) {\n            return eventName;\n        }\n\n    } else if (Array.isArray(eventName)) {\n        return \"filter:*:\" + serializeTopics(eventName);\n\n    } else if (ForkEvent.isForkEvent(eventName)) {\n        logger.warn(\"not implemented\");\n        throw new Error(\"not implemented\");\n\n    } else if (eventName && typeof(eventName) === \"object\") {\n        return \"filter:\" + (eventName.address || \"*\") + \":\" + serializeTopics(eventName.topics || []);\n    }\n\n    throw new Error(\"invalid event - \" + eventName);\n}\n\n//////////////////////////////\n// Helper Object\n\nfunction getTime() {\n    return (new Date()).getTime();\n}\n\nfunction stall(duration: number): Promise<void> {\n    return new Promise((resolve) => {\n        setTimeout(resolve, duration);\n    });\n}\n\n//////////////////////////////\n// Provider Object\n\n\n/**\n *  EventType\n *   - \"block\"\n *   - \"poll\"\n *   - \"didPoll\"\n *   - \"pending\"\n *   - \"error\"\n *   - \"network\"\n *   - filter\n *   - topics array\n *   - transaction hash\n */\n\nconst PollableEvents = [ \"block\", \"network\", \"pending\", \"poll\" ];\n\nexport class Event {\n    readonly listener: Listener;\n    readonly once: boolean;\n    readonly tag: string;\n\n    constructor(tag: string, listener: Listener, once: boolean) {\n        defineReadOnly(this, \"tag\", tag);\n        defineReadOnly(this, \"listener\", listener);\n        defineReadOnly(this, \"once\", once);\n    }\n\n    get event(): EventType {\n        switch (this.type) {\n            case \"tx\":\n               return this.hash;\n            case \"filter\":\n               return this.filter;\n        }\n        return this.tag;\n    }\n\n    get type(): string {\n        return this.tag.split(\":\")[0]\n    }\n\n    get hash(): string {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"tx\") { return null; }\n        return comps[1];\n    }\n\n    get filter(): Filter {\n        const comps = this.tag.split(\":\");\n        if (comps[0] !== \"filter\") { return null; }\n        const address = comps[1];\n\n        const topics = deserializeTopics(comps[2]);\n        const filter: Filter = { };\n\n        if (topics.length > 0) { filter.topics = topics; }\n        if (address && address !== \"*\") { filter.address = address; }\n\n        return filter;\n    }\n\n    pollable(): boolean {\n        return (this.tag.indexOf(\":\") >= 0 || PollableEvents.indexOf(this.tag) >= 0);\n    }\n}\n\nexport interface EnsResolver {\n\n    // Name this Resolver is associated with\n    readonly name: string;\n\n    // The address of the resolver\n    readonly address: string;\n\n    // Multichain address resolution (also normal address resolution)\n    // See: https://eips.ethereum.org/EIPS/eip-2304\n    getAddress(coinType?: 60): Promise<null | string>\n\n    // Contenthash field\n    // See: https://eips.ethereum.org/EIPS/eip-1577\n    getContentHash(): Promise<null | string>;\n\n    // Storage of text records\n    // See: https://eips.ethereum.org/EIPS/eip-634\n    getText(key: string): Promise<null | string>;\n};\n\nexport interface EnsProvider {\n    resolveName(name: string): Promise<null | string>;\n    lookupAddress(address: string): Promise<null | string>;\n    getResolver(name: string): Promise<null | EnsResolver>;\n}\n\ntype CoinInfo = {\n    symbol: string,\n    ilk?: string,     // General family\n    prefix?: string,  // Bech32 prefix\n    p2pkh?: number,   // Pay-to-Public-Key-Hash Version\n    p2sh?: number,    // Pay-to-Script-Hash Version\n};\n\n// https://github.com/satoshilabs/slips/blob/master/slip-0044.md\nconst coinInfos: { [ coinType: string ]: CoinInfo } = {\n    \"0\":   { symbol: \"btc\",  p2pkh: 0x00, p2sh: 0x05, prefix: \"bc\" },\n    \"2\":   { symbol: \"ltc\",  p2pkh: 0x30, p2sh: 0x32, prefix: \"ltc\" },\n    \"3\":   { symbol: \"doge\", p2pkh: 0x1e, p2sh: 0x16 },\n    \"60\":  { symbol: \"eth\",  ilk: \"eth\" },\n    \"61\":  { symbol: \"etc\",  ilk: \"eth\" },\n    \"700\": { symbol: \"xdai\", ilk: \"eth\" },\n};\n\nfunction bytes32ify(value: number): string {\n    return hexZeroPad(BigNumber.from(value).toHexString(), 32);\n}\n\n// Compute the Base58Check encoded data (checksum is first 4 bytes of sha256d)\nfunction base58Encode(data: Uint8Array): string {\n    return Base58.encode(concat([ data, hexDataSlice(sha256(sha256(data)), 0, 4) ]));\n}\n\nexport interface Avatar {\n    url: string;\n    linkage: Array<{ type: string, content: string }>;\n}\n\nconst matchers = [\n    new RegExp(\"^(https):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^(data):(.*)$\", \"i\"),\n    new RegExp(\"^(ipfs):/\\/(.*)$\", \"i\"),\n    new RegExp(\"^eip155:[0-9]+/(erc[0-9]+):(.*)$\", \"i\"),\n];\n\nfunction _parseString(result: string): null | string {\n    try {\n        return toUtf8String(_parseBytes(result));\n    } catch(error) { }\n    return null;\n}\n\nfunction _parseBytes(result: string): null | string {\n    if (result === \"0x\") { return null; }\n\n    const offset = BigNumber.from(hexDataSlice(result, 0, 32)).toNumber();\n    const length = BigNumber.from(hexDataSlice(result, offset, offset + 32)).toNumber();\n    return hexDataSlice(result, offset + 32, offset + 32 + length);\n}\n\n\nexport class Resolver implements EnsResolver {\n    readonly provider: BaseProvider;\n\n    readonly name: string;\n    readonly address: string;\n\n    readonly _resolvedAddress: null | string;\n\n    // The resolvedAddress is only for creating a ReverseLookup resolver\n    constructor(provider: BaseProvider, address: string, name: string, resolvedAddress?: string) {\n        defineReadOnly(this, \"provider\", provider);\n        defineReadOnly(this, \"name\", name);\n        defineReadOnly(this, \"address\", provider.formatter.address(address));\n        defineReadOnly(this, \"_resolvedAddress\", resolvedAddress);\n    }\n\n    async _fetchBytes(selector: string, parameters?: string): Promise<null | string> {\n        // e.g. keccak256(\"addr(bytes32,uint256)\")\n        const tx = {\n            to: this.address,\n            data: hexConcat([ selector, namehash(this.name), (parameters || \"0x\") ])\n        };\n\n        try {\n            return _parseBytes(await this.provider.call(tx));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    _getAddress(coinType: number, hexBytes: string): string {\n        const coinInfo = coinInfos[String(coinType)];\n\n        if (coinInfo == null) {\n            logger.throwError(`unsupported coin type: ${ coinType }`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`\n            });\n        }\n\n        if (coinInfo.ilk === \"eth\") {\n            return this.provider.formatter.address(hexBytes);\n        }\n\n        const bytes = arrayify(hexBytes);\n\n        // P2PKH: OP_DUP OP_HASH160 <pubKeyHash> OP_EQUALVERIFY OP_CHECKSIG\n        if (coinInfo.p2pkh != null) {\n            const p2pkh = hexBytes.match(/^0x76a9([0-9a-f][0-9a-f])([0-9a-f]*)88ac$/);\n            if (p2pkh) {\n                const length = parseInt(p2pkh[1], 16);\n                if (p2pkh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2pkh ], (\"0x\" + p2pkh[2]) ]));\n                }\n            }\n        }\n\n        // P2SH: OP_HASH160 <scriptHash> OP_EQUAL\n        if (coinInfo.p2sh != null) {\n            const p2sh = hexBytes.match(/^0xa9([0-9a-f][0-9a-f])([0-9a-f]*)87$/);\n            if (p2sh) {\n                const length = parseInt(p2sh[1], 16);\n                if (p2sh[2].length === length * 2 && length >= 1 && length <= 75) {\n                    return base58Encode(concat([ [ coinInfo.p2sh ], (\"0x\" + p2sh[2]) ]));\n                }\n            }\n        }\n\n        // Bech32\n        if (coinInfo.prefix != null) {\n            const length = bytes[1];\n\n            // https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki#witness-program\n            let version = bytes[0];\n            if (version === 0x00) {\n                if (length !== 20 && length !== 32) {\n                    version = -1;\n                }\n            } else {\n                version = -1;\n            }\n\n            if (version >= 0 && bytes.length === 2 + length && length >= 1 && length <= 75) {\n                const words = bech32.toWords(bytes.slice(2));\n                words.unshift(version);\n                return bech32.encode(coinInfo.prefix, words);\n            }\n        }\n\n        return null;\n    }\n\n\n    async getAddress(coinType?: number): Promise<string> {\n        if (coinType == null) { coinType = 60; }\n\n        // If Ethereum, use the standard `addr(bytes32)`\n        if (coinType === 60) {\n            try {\n                // keccak256(\"addr(bytes32)\")\n                const transaction = {\n                    to: this.address,\n                    data: (\"0x3b3b57de\" + namehash(this.name).substring(2))\n                };\n                const hexBytes = await this.provider.call(transaction);\n\n                // No address\n                if (hexBytes === \"0x\" || hexBytes === HashZero) { return null; }\n\n                return this.provider.formatter.callAddress(hexBytes);\n            } catch (error) {\n                if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n                throw error;\n            }\n        }\n\n        // keccak256(\"addr(bytes32,uint256\")\n        const hexBytes = await this._fetchBytes(\"0xf1cb7e06\", bytes32ify(coinType));\n\n        // No address\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // Compute the address\n        const address = this._getAddress(coinType, hexBytes);\n\n        if (address == null) {\n            logger.throwError(`invalid or unsupported coin data`, Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `getAddress(${ coinType })`,\n                coinType: coinType,\n                data: hexBytes\n            });\n        }\n\n        return address;\n    }\n\n    async getAvatar(): Promise<null | Avatar> {\n        const linkage: Array<{ type: string, content: string }> = [ ];\n        try {\n            const avatar = await this.getText(\"avatar\");\n            if (avatar == null) { return null; }\n\n            for (let i = 0; i < matchers.length; i++) {\n                const match = avatar.match(matchers[i]);\n\n                if (match == null) { continue; }\n                switch (match[1]) {\n                    case \"https\":\n                        linkage.push({ type: \"url\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"data\":\n                        linkage.push({ type: \"data\", content: avatar });\n                        return { linkage, url: avatar };\n\n                    case \"ipfs\":\n                        linkage.push({ type: \"ipfs\", content: avatar });\n                        return { linkage, url: `https:/\\/gateway.ipfs.io/ipfs/${ avatar.substring(7) }` }\n\n                    case \"erc721\":\n                    case \"erc1155\": {\n                        // Depending on the ERC type, use tokenURI(uint256) or url(uint256)\n                        const selector = (match[1] === \"erc721\") ? \"0xc87b56dd\": \"0x0e89341c\";\n                        linkage.push({ type: match[1], content: avatar });\n\n                        // The owner of this name\n                        const owner = (this._resolvedAddress || await this.getAddress());\n\n                        const comps = (match[2] || \"\").split(\"/\");\n                        if (comps.length !== 2) { return null; }\n\n                        const addr = await this.provider.formatter.address(comps[0]);\n                        const tokenId = hexZeroPad(BigNumber.from(comps[1]).toHexString(), 32);\n\n                        // Check that this account owns the token\n                        if (match[1] === \"erc721\") {\n                            // ownerOf(uint256 tokenId)\n                            const tokenOwner = this.provider.formatter.callAddress(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x6352211e\", tokenId ])\n                            }));\n                            if (owner !== tokenOwner) { return null; }\n                            linkage.push({ type: \"owner\", content: tokenOwner });\n\n                        } else if (match[1] === \"erc1155\") {\n                            // balanceOf(address owner, uint256 tokenId)\n                            const balance = BigNumber.from(await this.provider.call({\n                                to: addr, data: hexConcat([ \"0x00fdd58e\", hexZeroPad(owner, 32), tokenId ])\n                            }));\n                            if (balance.isZero()) { return null; }\n                            linkage.push({ type: \"balance\", content: balance.toString() });\n                        }\n\n                        // Call the token contract for the metadata URL\n                        const tx = {\n                            to: this.provider.formatter.address(comps[0]),\n                            data: hexConcat([ selector, tokenId ])\n                        };\n                        let metadataUrl = _parseString(await this.provider.call(tx))\n                        if (metadataUrl == null) { return null; }\n                        linkage.push({ type: \"metadata-url\", content: metadataUrl });\n\n                        // ERC-1155 allows a generic {id} in the URL\n                        if (match[1] === \"erc1155\") {\n                            metadataUrl = metadataUrl.replace(\"{id}\", tokenId.substring(2));\n                        }\n\n                        // Get the token metadata\n                        const metadata = await fetchJson(metadataUrl);\n\n                        // Pull the image URL out\n                        if (!metadata || typeof(metadata.image) !== \"string\" || !metadata.image.match(/^https:\\/\\//i)) {\n                            return null;\n                        }\n                        linkage.push({ type: \"metadata\", content: JSON.stringify(metadata) });\n                        linkage.push({ type: \"url\", content: metadata.image });\n\n                        return { linkage, url: metadata.image };\n                    }\n                }\n            }\n        } catch (error) { }\n\n        return null;\n    }\n\n    async getContentHash(): Promise<string> {\n\n        // keccak256(\"contenthash()\")\n        const hexBytes = await this._fetchBytes(\"0xbc1c58d1\");\n\n        // No contenthash\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        // IPFS (CID: 1, Type: DAG-PB)\n        const ipfs = hexBytes.match(/^0xe3010170(([0-9a-f][0-9a-f])([0-9a-f][0-9a-f])([0-9a-f]*))$/);\n        if (ipfs) {\n            const length = parseInt(ipfs[3], 16);\n            if (ipfs[4].length === length * 2) {\n                return \"ipfs:/\\/\" + Base58.encode(\"0x\" + ipfs[1]);\n            }\n        }\n\n        // Swarm (CID: 1, Type: swarm-manifest; hash/length hard-coded to keccak256/32)\n        const swarm = hexBytes.match(/^0xe40101fa011b20([0-9a-f]*)$/)\n        if (swarm) {\n            if (swarm[1].length === (32 * 2)) {\n                return \"bzz:/\\/\" + swarm[1]\n            }\n        }\n\n        return logger.throwError(`invalid or unsupported content hash data`, Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"getContentHash()\",\n            data: hexBytes\n        });\n    }\n\n    async getText(key: string): Promise<string> {\n\n        // The key encoded as parameter to fetchBytes\n        let keyBytes = toUtf8Bytes(key);\n\n        // The nodehash consumes the first slot, so the string pointer targets\n        // offset 64, with the length at offset 64 and data starting at offset 96\n        keyBytes = concat([ bytes32ify(64), bytes32ify(keyBytes.length), keyBytes ]);\n\n        // Pad to word-size (32 bytes)\n        if ((keyBytes.length % 32) !== 0) {\n            keyBytes = concat([ keyBytes, hexZeroPad(\"0x\", 32 - (key.length % 32)) ])\n        }\n\n        const hexBytes = await this._fetchBytes(\"0x59d1d43c\", hexlify(keyBytes));\n        if (hexBytes == null || hexBytes === \"0x\") { return null; }\n\n        return toUtf8String(hexBytes);\n    }\n}\n\nlet defaultFormatter: Formatter = null;\n\nlet nextPollId = 1;\n\nexport class BaseProvider extends Provider implements EnsProvider {\n    _networkPromise: Promise<Network>;\n    _network: Network;\n\n    _events: Array<Event>;\n\n    formatter: Formatter;\n\n    // To help mitigate the eventually consistent nature of the blockchain\n    // we keep a mapping of events we emit. If we emit an event X, we expect\n    // that a user should be able to query for that event in the callback,\n    // if the node returns null, we stall the response until we get back a\n    // meaningful value, since we may be hitting a re-org, or a node that\n    // has not indexed the event yet.\n    // Events:\n    //   - t:{hash}    - Transaction hash\n    //   - b:{hash}    - BlockHash\n    //   - block       - The most recent emitted block\n    _emitted: { [ eventName: string ]: number | \"pending\" };\n\n    _pollingInterval: number;\n    _poller: NodeJS.Timer;\n    _bootstrapPoll: NodeJS.Timer;\n\n    _lastBlockNumber: number;\n\n    _fastBlockNumber: number;\n    _fastBlockNumberPromise: Promise<number>;\n    _fastQueryDate: number;\n\n    _maxInternalBlockNumber: number;\n    _internalBlockNumber: Promise<{ blockNumber: number, reqTime: number, respTime: number }>;\n\n    readonly anyNetwork: boolean;\n\n\n    /**\n     *  ready\n     *\n     *  A Promise<Network> that resolves only once the provider is ready.\n     *\n     *  Sub-classes that call the super with a network without a chainId\n     *  MUST set this. Standard named networks have a known chainId.\n     *\n     */\n\n    constructor(network: Networkish | Promise<Network>) {\n        logger.checkNew(new.target, Provider);\n\n        super();\n\n        // Events being listened to\n        this._events = [];\n\n        this._emitted = { block: -2 };\n\n        this.formatter = new.target.getFormatter();\n\n        // If network is any, this Provider allows the underlying\n        // network to change dynamically, and we auto-detect the\n        // current network\n        defineReadOnly(this, \"anyNetwork\", (network === \"any\"));\n        if (this.anyNetwork) { network = this.detectNetwork(); }\n\n        if (network instanceof Promise) {\n            this._networkPromise = network;\n\n            // Squash any \"unhandled promise\" errors; that do not need to be handled\n            network.catch((error) => { });\n\n            // Trigger initial network setting (async)\n            this._ready().catch((error) => { });\n\n        } else {\n            const knownNetwork = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (knownNetwork) {\n                defineReadOnly(this, \"_network\", knownNetwork);\n                this.emit(\"network\", knownNetwork, null);\n\n            } else {\n                logger.throwArgumentError(\"invalid network\", \"network\", network);\n            }\n        }\n\n        this._maxInternalBlockNumber = -1024;\n\n        this._lastBlockNumber = -2;\n\n        this._pollingInterval = 4000;\n\n        this._fastQueryDate = 0;\n    }\n\n    async _ready(): Promise<Network> {\n        if (this._network == null) {\n            let network: Network = null;\n            if (this._networkPromise) {\n                try {\n                    network = await this._networkPromise;\n                } catch (error) { }\n            }\n\n            // Try the Provider's network detection (this MUST throw if it cannot)\n            if (network == null) {\n                network = await this.detectNetwork();\n            }\n\n            // This should never happen; every Provider sub-class should have\n            // suggested a network by here (or have thrown).\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // Possible this call stacked so do not call defineReadOnly again\n            if (this._network == null) {\n                if (this.anyNetwork) {\n                    this._network = network;\n                } else {\n                    defineReadOnly(this, \"_network\", network);\n                }\n                this.emit(\"network\", network, null);\n            }\n        }\n\n        return this._network;\n    }\n\n    // This will always return the most recently established network.\n    // For \"any\", this can change (a \"network\" event is emitted before\n    // any change is reflected); otherwise this cannot change\n    get ready(): Promise<Network> {\n        return poll(() => {\n            return this._ready().then((network) => {\n                return network;\n            }, (error) => {\n                // If the network isn't running yet, we will wait\n                if (error.code === Logger.errors.NETWORK_ERROR && error.event === \"noNetwork\") {\n                    return undefined;\n                }\n                throw error;\n            });\n        });\n    }\n\n    // @TODO: Remove this and just create a singleton formatter\n    static getFormatter(): Formatter {\n        if (defaultFormatter == null) {\n            defaultFormatter = new Formatter();\n        }\n        return defaultFormatter;\n    }\n\n    // @TODO: Remove this and just use getNetwork\n    static getNetwork(network: Networkish): Network {\n        return getNetwork((network == null) ? \"homestead\": network);\n    }\n\n    // Fetches the blockNumber, but will reuse any result that is less\n    // than maxAge old or has been requested since the last request\n    async _getInternalBlockNumber(maxAge: number): Promise<number> {\n        await this._ready();\n\n        // Allowing stale data up to maxAge old\n        if (maxAge > 0) {\n\n            // While there are pending internal block requests...\n            while (this._internalBlockNumber) {\n\n                // ...\"remember\" which fetch we started with\n                const internalBlockNumber = this._internalBlockNumber;\n\n                try {\n                    // Check the result is not too stale\n                    const result = await internalBlockNumber;\n                    if ((getTime() - result.respTime) <= maxAge) {\n                        return result.blockNumber;\n                    }\n\n                    // Too old; fetch a new value\n                    break;\n\n                } catch(error) {\n\n                    // The fetch rejected; if we are the first to get the\n                    // rejection, drop through so we replace it with a new\n                    // fetch; all others blocked will then get that fetch\n                    // which won't match the one they \"remembered\" and loop\n                    if (this._internalBlockNumber === internalBlockNumber) {\n                        break;\n                    }\n                }\n            }\n        }\n\n        const reqTime = getTime();\n\n        const checkInternalBlockNumber = resolveProperties({\n            blockNumber: this.perform(\"getBlockNumber\", { }),\n            networkError: this.getNetwork().then((network) => (null), (error) => (error))\n        }).then(({ blockNumber, networkError }) => {\n            if (networkError) {\n                // Unremember this bad internal block number\n                if (this._internalBlockNumber === checkInternalBlockNumber) {\n                    this._internalBlockNumber = null;\n                }\n                throw networkError;\n            }\n\n            const respTime = getTime();\n\n            blockNumber = BigNumber.from(blockNumber).toNumber();\n            if (blockNumber < this._maxInternalBlockNumber) { blockNumber = this._maxInternalBlockNumber; }\n\n            this._maxInternalBlockNumber = blockNumber;\n            this._setFastBlockNumber(blockNumber); // @TODO: Still need this?\n            return { blockNumber, reqTime, respTime };\n        });\n\n        this._internalBlockNumber = checkInternalBlockNumber;\n\n        // Swallow unhandled exceptions; if needed they are handled else where\n        checkInternalBlockNumber.catch((error) => {\n            // Don't null the dead (rejected) fetch, if it has already been updated\n            if (this._internalBlockNumber === checkInternalBlockNumber) {\n                this._internalBlockNumber = null;\n            }\n        });\n\n        return (await checkInternalBlockNumber).blockNumber;\n    }\n\n    async poll(): Promise<void> {\n        const pollId = nextPollId++;\n\n        // Track all running promises, so we can trigger a post-poll once they are complete\n        const runners: Array<Promise<void>> = [];\n\n        let blockNumber: number = null;\n        try {\n            blockNumber = await this._getInternalBlockNumber(100 + this.pollingInterval / 2);\n        } catch (error) {\n            this.emit(\"error\", error);\n            return;\n        }\n        this._setFastBlockNumber(blockNumber);\n\n        // Emit a poll event after we have the latest (fast) block number\n        this.emit(\"poll\", pollId, blockNumber);\n\n        // If the block has not changed, meh.\n        if (blockNumber === this._lastBlockNumber) {\n            this.emit(\"didPoll\", pollId);\n            return;\n        }\n\n        // First polling cycle, trigger a \"block\" events\n        if (this._emitted.block === -2) {\n            this._emitted.block = blockNumber - 1;\n        }\n\n        if (Math.abs((<number>(this._emitted.block)) - blockNumber) > 1000) {\n            logger.warn(`network block skew detected; skipping block events (emitted=${ this._emitted.block } blockNumber${ blockNumber })`);\n            this.emit(\"error\", logger.makeError(\"network block skew detected\", Logger.errors.NETWORK_ERROR, {\n                blockNumber: blockNumber,\n                event: \"blockSkew\",\n                previousBlockNumber: this._emitted.block\n            }));\n            this.emit(\"block\", blockNumber);\n\n        } else {\n            // Notify all listener for each block that has passed\n            for (let i = (<number>this._emitted.block) + 1; i <= blockNumber; i++) {\n                this.emit(\"block\", i);\n            }\n        }\n\n        // The emitted block was updated, check for obsolete events\n        if ((<number>this._emitted.block) !== blockNumber) {\n            this._emitted.block = blockNumber;\n\n            Object.keys(this._emitted).forEach((key) => {\n                // The block event does not expire\n                if (key === \"block\") { return; }\n\n                // The block we were at when we emitted this event\n                const eventBlockNumber = this._emitted[key];\n\n                // We cannot garbage collect pending transactions or blocks here\n                // They should be garbage collected by the Provider when setting\n                // \"pending\" events\n                if (eventBlockNumber === \"pending\") { return; }\n\n                // Evict any transaction hashes or block hashes over 12 blocks\n                // old, since they should not return null anyways\n                if (blockNumber - eventBlockNumber > 12) {\n                    delete this._emitted[key];\n                }\n            });\n        }\n\n        // First polling cycle\n        if (this._lastBlockNumber === -2) {\n            this._lastBlockNumber = blockNumber - 1;\n        }\n\n        // Find all transaction hashes we are waiting on\n        this._events.forEach((event) => {\n            switch (event.type) {\n                case \"tx\": {\n                    const hash = event.hash;\n                    let runner = this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt || receipt.blockNumber == null) { return null; }\n                        this._emitted[\"t:\" + hash] = receipt.blockNumber;\n                        this.emit(hash, receipt);\n                        return null;\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n\n                    runners.push(runner);\n\n                    break;\n                }\n\n                case \"filter\": {\n                    const filter = event.filter;\n                    filter.fromBlock = this._lastBlockNumber + 1;\n                    filter.toBlock = blockNumber;\n\n                    const runner = this.getLogs(filter).then((logs) => {\n                        if (logs.length === 0) { return; }\n                        logs.forEach((log: Log) => {\n                            this._emitted[\"b:\" + log.blockHash] = log.blockNumber;\n                            this._emitted[\"t:\" + log.transactionHash] = log.blockNumber;\n                            this.emit(filter, log);\n                        });\n                    }).catch((error: Error) => { this.emit(\"error\", error); });\n                    runners.push(runner);\n\n                    break;\n                }\n            }\n        });\n\n        this._lastBlockNumber = blockNumber;\n\n        // Once all events for this loop have been processed, emit \"didPoll\"\n        Promise.all(runners).then(() => {\n            this.emit(\"didPoll\", pollId);\n        }).catch((error) => { this.emit(\"error\", error); });\n\n        return;\n    }\n\n    // Deprecated; do not use this\n    resetEventsBlock(blockNumber: number): void {\n        this._lastBlockNumber = blockNumber - 1;\n        if (this.polling) { this.poll(); }\n    }\n\n    get network(): Network {\n        return this._network;\n    }\n\n    // This method should query the network if the underlying network\n    // can change, such as when connected to a JSON-RPC backend\n    async detectNetwork(): Promise<Network> {\n        return logger.throwError(\"provider does not support network detection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"provider.detectNetwork\"\n        });\n    }\n\n    async getNetwork(): Promise<Network> {\n        const network = await this._ready();\n\n        // Make sure we are still connected to the same network; this is\n        // only an external call for backends which can have the underlying\n        // network change spontaneously\n        const currentNetwork = await this.detectNetwork();\n        if (network.chainId !== currentNetwork.chainId) {\n\n            // We are allowing network changes, things can get complex fast;\n            // make sure you know what you are doing if you use \"any\"\n            if (this.anyNetwork) {\n                this._network = currentNetwork;\n\n                // Reset all internal block number guards and caches\n                this._lastBlockNumber = -2;\n                this._fastBlockNumber = null;\n                this._fastBlockNumberPromise = null;\n                this._fastQueryDate = 0;\n                this._emitted.block = -2;\n                this._maxInternalBlockNumber = -1024;\n                this._internalBlockNumber = null;\n\n                // The \"network\" event MUST happen before this method resolves\n                // so any events have a chance to unregister, so we stall an\n                // additional event loop before returning from /this/ call\n                this.emit(\"network\", currentNetwork, network);\n                await stall(0);\n\n                return this._network;\n            }\n\n            const error = logger.makeError(\"underlying network changed\", Logger.errors.NETWORK_ERROR, {\n                event: \"changed\",\n                network: network,\n                detectedNetwork: currentNetwork\n            });\n\n            this.emit(\"error\", error);\n            throw error;\n        }\n\n        return network;\n    }\n\n    get blockNumber(): number {\n        this._getInternalBlockNumber(100 + this.pollingInterval / 2).then((blockNumber) => {\n            this._setFastBlockNumber(blockNumber);\n        }, (error) => { });\n\n        return (this._fastBlockNumber != null) ? this._fastBlockNumber: -1;\n    }\n\n    get polling(): boolean {\n        return (this._poller != null);\n    }\n\n    set polling(value: boolean) {\n        if (value && !this._poller) {\n            this._poller = setInterval(() => { this.poll(); }, this.pollingInterval);\n\n            if (!this._bootstrapPoll) {\n                this._bootstrapPoll = setTimeout(() => {\n                    this.poll();\n\n                    // We block additional polls until the polling interval\n                    // is done, to prevent overwhelming the poll function\n                    this._bootstrapPoll = setTimeout(() => {\n                        // If polling was disabled, something may require a poke\n                        // since starting the bootstrap poll and it was disabled\n                        if (!this._poller) { this.poll(); }\n\n                        // Clear out the bootstrap so we can do another\n                        this._bootstrapPoll = null;\n                    }, this.pollingInterval);\n                }, 0);\n            }\n\n        } else if (!value && this._poller) {\n            clearInterval(this._poller);\n            this._poller = null;\n        }\n    }\n\n    get pollingInterval(): number {\n        return this._pollingInterval;\n    }\n\n    set pollingInterval(value: number) {\n        if (typeof(value) !== \"number\" || value <= 0 || parseInt(String(value)) != value) {\n            throw new Error(\"invalid polling interval\");\n        }\n\n        this._pollingInterval = value;\n\n        if (this._poller) {\n            clearInterval(this._poller);\n            this._poller = setInterval(() => { this.poll(); }, this._pollingInterval);\n        }\n    }\n\n    _getFastBlockNumber(): Promise<number> {\n        const now = getTime();\n\n        // Stale block number, request a newer value\n        if ((now - this._fastQueryDate) > 2 * this._pollingInterval) {\n            this._fastQueryDate = now;\n            this._fastBlockNumberPromise = this.getBlockNumber().then((blockNumber) => {\n                if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n                    this._fastBlockNumber = blockNumber;\n                }\n                return this._fastBlockNumber;\n            });\n        }\n\n        return this._fastBlockNumberPromise;\n    }\n\n    _setFastBlockNumber(blockNumber: number): void {\n        // Older block, maybe a stale request\n        if (this._fastBlockNumber != null && blockNumber < this._fastBlockNumber) { return; }\n\n        // Update the time we updated the blocknumber\n        this._fastQueryDate = getTime();\n\n        // Newer block number, use  it\n        if (this._fastBlockNumber == null || blockNumber > this._fastBlockNumber) {\n            this._fastBlockNumber = blockNumber;\n            this._fastBlockNumberPromise = Promise.resolve(blockNumber);\n        }\n    }\n\n    async waitForTransaction(transactionHash: string, confirmations?: number, timeout?: number): Promise<TransactionReceipt> {\n        return this._waitForTransaction(transactionHash, (confirmations == null) ? 1: confirmations, timeout || 0, null);\n    }\n\n    async _waitForTransaction(transactionHash: string, confirmations: number, timeout: number, replaceable: { data: string, from: string, nonce: number, to: string, value: BigNumber, startBlock: number }): Promise<TransactionReceipt> {\n        const receipt = await this.getTransactionReceipt(transactionHash);\n\n        // Receipt is already good\n        if ((receipt ? receipt.confirmations: 0) >= confirmations) { return receipt; }\n\n        // Poll until the receipt is good...\n        return new Promise((resolve, reject) => {\n            const cancelFuncs: Array<() => void> = [];\n\n            let done = false;\n            const alreadyDone = function() {\n                if (done) { return true; }\n                done = true;\n                cancelFuncs.forEach((func) => { func(); });\n                return false;\n            };\n\n            const minedHandler = (receipt: TransactionReceipt) => {\n                if (receipt.confirmations < confirmations) { return; }\n                if (alreadyDone()) { return; }\n                resolve(receipt);\n            }\n            this.on(transactionHash, minedHandler);\n            cancelFuncs.push(() => { this.removeListener(transactionHash, minedHandler); });\n\n            if (replaceable) {\n                let lastBlockNumber = replaceable.startBlock;\n                let scannedBlock: number = null;\n                const replaceHandler = async (blockNumber: number) => {\n                    if (done) { return; }\n\n                    // Wait 1 second; this is only used in the case of a fault, so\n                    // we will trade off a little bit of latency for more consistent\n                    // results and fewer JSON-RPC calls\n                    await stall(1000);\n\n                    this.getTransactionCount(replaceable.from).then(async (nonce) => {\n                        if (done) { return; }\n\n                        if (nonce <= replaceable.nonce) {\n                            lastBlockNumber = blockNumber;\n\n                        } else {\n                            // First check if the transaction was mined\n                            {\n                                const mined = await this.getTransaction(transactionHash);\n                                if (mined && mined.blockNumber != null) { return; }\n                            }\n\n                            // First time scanning. We start a little earlier for some\n                            // wiggle room here to handle the eventually consistent nature\n                            // of blockchain (e.g. the getTransactionCount was for a\n                            // different block)\n                            if (scannedBlock == null) {\n                                scannedBlock = lastBlockNumber - 3;\n                                if (scannedBlock < replaceable.startBlock) {\n                                    scannedBlock = replaceable.startBlock;\n                                }\n                            }\n\n                            while (scannedBlock <= blockNumber) {\n                                if (done) { return; }\n\n                                const block = await this.getBlockWithTransactions(scannedBlock);\n                                for (let ti = 0; ti < block.transactions.length; ti++) {\n                                    const tx = block.transactions[ti];\n\n                                    // Successfully mined!\n                                    if (tx.hash === transactionHash) { return; }\n\n                                    // Matches our transaction from and nonce; its a replacement\n                                    if (tx.from === replaceable.from && tx.nonce === replaceable.nonce) {\n                                        if (done) { return; }\n\n                                        // Get the receipt of the replacement\n                                        const receipt = await this.waitForTransaction(tx.hash, confirmations);\n\n                                        // Already resolved or rejected (prolly a timeout)\n                                        if (alreadyDone()) { return; }\n\n                                        // The reason we were replaced\n                                        let reason = \"replaced\";\n                                        if (tx.data === replaceable.data && tx.to === replaceable.to && tx.value.eq(replaceable.value)) {\n                                            reason = \"repriced\";\n                                        } else  if (tx.data === \"0x\" && tx.from === tx.to && tx.value.isZero()) {\n                                            reason = \"cancelled\"\n                                        }\n\n                                        // Explain why we were replaced\n                                        reject(logger.makeError(\"transaction was replaced\", Logger.errors.TRANSACTION_REPLACED, {\n                                            cancelled: (reason === \"replaced\" || reason === \"cancelled\"),\n                                            reason,\n                                            replacement: this._wrapTransaction(tx),\n                                            hash: transactionHash,\n                                            receipt\n                                        }));\n\n                                        return;\n                                    }\n                                }\n                                scannedBlock++;\n                            }\n                        }\n\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n\n                    }, (error) => {\n                        if (done) { return; }\n                        this.once(\"block\", replaceHandler);\n                    });\n                };\n\n                if (done) { return; }\n                this.once(\"block\", replaceHandler);\n\n                cancelFuncs.push(() => {\n                    this.removeListener(\"block\", replaceHandler);\n                });\n            }\n\n            if (typeof(timeout) === \"number\" && timeout > 0) {\n                const timer = setTimeout(() => {\n                    if (alreadyDone()) { return; }\n                    reject(logger.makeError(\"timeout exceeded\", Logger.errors.TIMEOUT, { timeout: timeout }));\n                }, timeout);\n                if (timer.unref) { timer.unref(); }\n\n                cancelFuncs.push(() => { clearTimeout(timer); });\n            }\n        });\n    }\n\n    async getBlockNumber(): Promise<number> {\n        return this._getInternalBlockNumber(0);\n    }\n\n    async getGasPrice(): Promise<BigNumber> {\n        await this.getNetwork();\n\n        const result = await this.perform(\"getGasPrice\", { });\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getGasPrice\",\n                result, error\n            });\n        }\n    }\n\n    async getBalance(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getBalance\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getBalance\",\n                params, result, error\n            });\n        }\n    }\n\n    async getTransactionCount(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<number> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getTransactionCount\", params);\n        try {\n            return BigNumber.from(result).toNumber();\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getTransactionCount\",\n                params, result, error\n            });\n        }\n    }\n\n    async getCode(addressOrName: string | Promise<string>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"getCode\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getCode\",\n                params, result, error\n            });\n        }\n    }\n\n    async getStorageAt(addressOrName: string | Promise<string>, position: BigNumberish | Promise<BigNumberish>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            address: this._getAddress(addressOrName),\n            blockTag: this._getBlockTag(blockTag),\n            position: Promise.resolve(position).then((p) => hexValue(p))\n        });\n        const result = await this.perform(\"getStorageAt\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"getStorageAt\",\n                params, result, error\n            });\n        }\n    }\n\n    // This should be called by any subclass wrapping a TransactionResponse\n    _wrapTransaction(tx: Transaction, hash?: string, startBlock?: number): TransactionResponse {\n        if (hash != null && hexDataLength(hash) !== 32) { throw new Error(\"invalid response - sendTransaction\"); }\n\n        const result = <TransactionResponse>tx;\n\n        // Check the hash we expect is the same as the hash the server reported\n        if (hash != null && tx.hash !== hash) {\n            logger.throwError(\"Transaction hash mismatch from Provider.sendTransaction.\", Logger.errors.UNKNOWN_ERROR, { expectedHash: tx.hash, returnedHash: hash });\n        }\n\n        result.wait = async (confirms?: number, timeout?: number) => {\n            if (confirms == null) { confirms = 1; }\n            if (timeout == null) { timeout = 0; }\n\n            // Get the details to detect replacement\n            let replacement = undefined;\n            if (confirms !== 0 && startBlock != null) {\n                replacement = {\n                    data: tx.data,\n                    from: tx.from,\n                    nonce: tx.nonce,\n                    to: tx.to,\n                    value: tx.value,\n                    startBlock\n                };\n            }\n\n            const receipt = await this._waitForTransaction(tx.hash, confirms, timeout, replacement);\n            if (receipt == null && confirms === 0) { return null; }\n\n            // No longer pending, allow the polling loop to garbage collect this\n            this._emitted[\"t:\" + tx.hash] = receipt.blockNumber;\n\n            if (receipt.status === 0) {\n                logger.throwError(\"transaction failed\", Logger.errors.CALL_EXCEPTION, {\n                    transactionHash: tx.hash,\n                    transaction: tx,\n                    receipt: receipt\n                });\n            }\n            return receipt;\n        };\n\n        return result;\n    }\n\n    async sendTransaction(signedTransaction: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        const hexTx = await Promise.resolve(signedTransaction).then(t => hexlify(t));\n        const tx = this.formatter.transaction(signedTransaction);\n        if (tx.confirmations == null) { tx.confirmations = 0; }\n        const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n        try {\n            const hash = await this.perform(\"sendTransaction\", { signedTransaction: hexTx });\n            return this._wrapTransaction(tx, hash, blockNumber);\n        } catch (error) {\n            (<any>error).transaction = tx;\n            (<any>error).transactionHash = tx.hash;\n            throw error;\n        }\n    }\n\n    async _getTransactionRequest(transaction: Deferrable<TransactionRequest>): Promise<Transaction> {\n        const values: any = await transaction;\n\n        const tx: any = { };\n\n        [\"from\", \"to\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? this._getAddress(v): null))\n        });\n\n        [\"gasLimit\", \"gasPrice\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"value\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? BigNumber.from(v): null));\n        });\n\n        [\"type\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => ((v != null) ? v: null));\n        });\n\n        if (values.accessList) {\n            tx.accessList = this.formatter.accessList(values.accessList);\n        }\n\n        [\"data\"].forEach((key) => {\n            if (values[key] == null) { return; }\n            tx[key] = Promise.resolve(values[key]).then((v) => (v ? hexlify(v): null));\n        });\n\n        return this.formatter.transactionRequest(await resolveProperties(tx));\n    }\n\n    async _getFilter(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Filter | FilterByBlockHash> {\n        filter = await filter;\n\n        const result: any = { };\n\n        if (filter.address != null) {\n            result.address = this._getAddress(filter.address);\n        }\n\n        [\"blockHash\", \"topics\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = (<any>filter)[key];\n        });\n\n        [\"fromBlock\", \"toBlock\"].forEach((key) => {\n            if ((<any>filter)[key] == null) { return; }\n            result[key] = this._getBlockTag((<any>filter)[key]);\n        });\n\n        return this.formatter.filter(await resolveProperties(result));\n    }\n\n    async call(transaction: Deferrable<TransactionRequest>, blockTag?: BlockTag | Promise<BlockTag>): Promise<string> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction),\n            blockTag: this._getBlockTag(blockTag)\n        });\n\n        const result = await this.perform(\"call\", params);\n        try {\n            return hexlify(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"call\",\n                params, result, error\n            });\n        }\n    }\n\n    async estimateGas(transaction: Deferrable<TransactionRequest>): Promise<BigNumber> {\n        await this.getNetwork();\n        const params = await resolveProperties({\n            transaction: this._getTransactionRequest(transaction)\n        });\n\n        const result = await this.perform(\"estimateGas\", params);\n        try {\n            return BigNumber.from(result);\n        } catch (error) {\n            return logger.throwError(\"bad result from backend\", Logger.errors.SERVER_ERROR, {\n                method: \"estimateGas\",\n                params, result, error\n            });\n        }\n    }\n\n    async _getAddress(addressOrName: string | Promise<string>): Promise<string> {\n        addressOrName = await addressOrName;\n        if (typeof(addressOrName) !== \"string\") {\n            logger.throwArgumentError(\"invalid address or ENS name\", \"name\", addressOrName);\n        }\n\n        const address = await this.resolveName(addressOrName);\n        if (address == null) {\n            logger.throwError(\"ENS name not configured\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: `resolveName(${ JSON.stringify(addressOrName) })`\n            });\n        }\n        return address;\n    }\n\n    async _getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>, includeTransactions?: boolean): Promise<Block | BlockWithTransactions> {\n        await this.getNetwork();\n\n        blockHashOrBlockTag = await blockHashOrBlockTag;\n\n        // If blockTag is a number (not \"latest\", etc), this is the block number\n        let blockNumber = -128;\n\n        const params: { [key: string]: any } = {\n            includeTransactions: !!includeTransactions\n        };\n\n        if (isHexString(blockHashOrBlockTag, 32)) {\n            params.blockHash = blockHashOrBlockTag;\n        } else {\n            try {\n                params.blockTag = await this._getBlockTag(blockHashOrBlockTag);\n                if (isHexString(params.blockTag)) {\n                    blockNumber = parseInt(params.blockTag.substring(2), 16);\n                }\n            } catch (error) {\n                logger.throwArgumentError(\"invalid block hash or block tag\", \"blockHashOrBlockTag\", blockHashOrBlockTag);\n            }\n        }\n\n        return poll(async () => {\n            const block = await this.perform(\"getBlock\", params);\n\n            // Block was not found\n            if (block == null) {\n\n                // For blockhashes, if we didn't say it existed, that blockhash may\n                // not exist. If we did see it though, perhaps from a log, we know\n                // it exists, and this node is just not caught up yet.\n                if (params.blockHash != null) {\n                    if (this._emitted[\"b:\" + params.blockHash] == null) { return null; }\n                }\n\n                // For block tags, if we are asking for a future block, we return null\n                if (params.blockTag != null) {\n                    if (blockNumber > this._emitted.block) { return null; }\n                }\n\n                // Retry on the next block\n                return undefined;\n            }\n\n            // Add transactions\n            if (includeTransactions) {\n                let blockNumber: number = null;\n                for (let i = 0; i < block.transactions.length; i++) {\n                    const tx = block.transactions[i];\n                    if (tx.blockNumber == null) {\n                        tx.confirmations = 0;\n\n                    } else if (tx.confirmations == null) {\n                        if (blockNumber == null) {\n                            blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n                        }\n\n                        // Add the confirmations using the fast block number (pessimistic)\n                        let confirmations = (blockNumber - tx.blockNumber) + 1;\n                        if (confirmations <= 0) { confirmations = 1; }\n                        tx.confirmations = confirmations;\n                    }\n                }\n\n                const blockWithTxs: any = this.formatter.blockWithTransactions(block);\n                blockWithTxs.transactions = blockWithTxs.transactions.map((tx: TransactionResponse) => this._wrapTransaction(tx));\n                return blockWithTxs;\n            }\n\n            return this.formatter.block(block);\n\n        }, { oncePoll: this });\n    }\n\n    getBlock(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<Block> {\n        return <Promise<Block>>(this._getBlock(blockHashOrBlockTag, false));\n    }\n\n    getBlockWithTransactions(blockHashOrBlockTag: BlockTag | string | Promise<BlockTag | string>): Promise<BlockWithTransactions> {\n        return <Promise<BlockWithTransactions>>(this._getBlock(blockHashOrBlockTag, true));\n    }\n\n    async getTransaction(transactionHash: string | Promise<string>): Promise<TransactionResponse> {\n        await this.getNetwork();\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransaction\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            const tx = this.formatter.transactionResponse(result);\n\n            if (tx.blockNumber == null) {\n                tx.confirmations = 0;\n\n            } else if (tx.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - tx.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                tx.confirmations = confirmations;\n            }\n\n            return this._wrapTransaction(tx);\n        }, { oncePoll: this });\n    }\n\n    async getTransactionReceipt(transactionHash: string | Promise<string>): Promise<TransactionReceipt> {\n        await this.getNetwork();\n\n        transactionHash = await transactionHash;\n\n        const params = { transactionHash: this.formatter.hash(transactionHash, true) };\n\n        return poll(async () => {\n            const result = await this.perform(\"getTransactionReceipt\", params);\n\n            if (result == null) {\n                if (this._emitted[\"t:\" + transactionHash] == null) {\n                    return null;\n                }\n                return undefined;\n            }\n\n            // \"geth-etc\" returns receipts before they are ready\n            if (result.blockHash == null) { return undefined; }\n\n            const receipt = this.formatter.receipt(result);\n\n            if (receipt.blockNumber == null) {\n                receipt.confirmations = 0;\n\n            } else if (receipt.confirmations == null) {\n                const blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n\n                // Add the confirmations using the fast block number (pessimistic)\n                let confirmations = (blockNumber - receipt.blockNumber) + 1;\n                if (confirmations <= 0) { confirmations = 1; }\n                receipt.confirmations = confirmations;\n            }\n\n            return receipt;\n        }, { oncePoll: this });\n    }\n\n    async getLogs(filter: Filter | FilterByBlockHash | Promise<Filter | FilterByBlockHash>): Promise<Array<Log>> {\n        await this.getNetwork();\n        const params = await resolveProperties({ filter: this._getFilter(filter) });\n        const logs: Array<Log> = await this.perform(\"getLogs\", params);\n        logs.forEach((log) => {\n            if (log.removed == null) { log.removed = false; }\n        });\n        return Formatter.arrayOf(this.formatter.filterLog.bind(this.formatter))(logs);\n    }\n\n    async getEtherPrice(): Promise<number> {\n        await this.getNetwork();\n        return this.perform(\"getEtherPrice\", { });\n    }\n\n    async _getBlockTag(blockTag: BlockTag | Promise<BlockTag>): Promise<BlockTag> {\n        blockTag = await blockTag;\n\n        if (typeof(blockTag) === \"number\" && blockTag < 0) {\n            if (blockTag % 1) {\n                logger.throwArgumentError(\"invalid BlockTag\", \"blockTag\", blockTag);\n            }\n\n            let blockNumber = await this._getInternalBlockNumber(100 + 2 * this.pollingInterval);\n            blockNumber += blockTag;\n            if (blockNumber < 0) { blockNumber = 0; }\n            return this.formatter.blockTag(blockNumber)\n        }\n\n        return this.formatter.blockTag(blockTag);\n    }\n\n\n    async getResolver(name: string): Promise<null | Resolver> {\n        try {\n            const address = await this._getResolver(name);\n            if (address == null) { return null; }\n            return new Resolver(this, address, name);\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            return null;\n        }\n    }\n\n    async _getResolver(name: string): Promise<string> {\n        // Get the resolver from the blockchain\n        const network = await this.getNetwork();\n\n        // No ENS...\n        if (!network.ensAddress) {\n            logger.throwError(\n                \"network does not support ENS\",\n                Logger.errors.UNSUPPORTED_OPERATION,\n                { operation: \"ENS\", network: network.name }\n            );\n        }\n\n        // keccak256(\"resolver(bytes32)\")\n        const transaction = {\n            to: network.ensAddress,\n            data: (\"0x0178b8bf\" + namehash(name).substring(2))\n        };\n\n        try {\n            return this.formatter.callAddress(await this.call(transaction));\n        } catch (error) {\n            if (error.code === Logger.errors.CALL_EXCEPTION) { return null; }\n            throw error;\n        }\n    }\n\n    async resolveName(name: string | Promise<string>): Promise<null | string> {\n        name = await name;\n\n        // If it is already an address, nothing to resolve\n        try {\n            return Promise.resolve(this.formatter.address(name));\n        } catch (error) {\n            // If is is a hexstring, the address is bad (See #694)\n            if (isHexString(name)) { throw error; }\n        }\n\n        if (typeof(name) !== \"string\") {\n            logger.throwArgumentError(\"invalid ENS name\", \"name\", name);\n        }\n\n        // Get the addr from the resovler\n        const resolver = await this.getResolver(name);\n        if (!resolver) { return null; }\n\n        return await resolver.getAddress();\n    }\n\n    async lookupAddress(address: string | Promise<string>): Promise<null | string> {\n        address = await address;\n        address = this.formatter.address(address);\n\n        const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n        const resolverAddress = await this._getResolver(reverseName);\n        if (!resolverAddress) { return null; }\n\n        // keccak(\"name(bytes32)\")\n        let bytes = arrayify(await this.call({\n            to: resolverAddress,\n            data: (\"0x691f3431\" + namehash(reverseName).substring(2))\n        }));\n\n        // Strip off the dynamic string pointer (0x20)\n        if (bytes.length < 32 || !BigNumber.from(bytes.slice(0, 32)).eq(32)) { return null; }\n        bytes = bytes.slice(32);\n\n        // Not a length-prefixed string\n        if (bytes.length < 32) { return null; }\n\n        // Get the length of the string (from the length-prefix)\n        const length = BigNumber.from(bytes.slice(0, 32)).toNumber();\n        bytes = bytes.slice(32);\n\n        // Length longer than available data\n        if (length > bytes.length) { return null; }\n\n        const name = toUtf8String(bytes.slice(0, length));\n\n        // Make sure the reverse record matches the foward record\n        const addr = await this.resolveName(name);\n        if (addr != address) { return null; }\n\n        return name;\n    }\n\n    async getAvatar(nameOrAddress: string): Promise<null | string> {\n        let resolver: Resolver = null;\n        if (isHexString(nameOrAddress)) {\n            // Address; reverse lookup\n            const address = this.formatter.address(nameOrAddress);\n\n            const reverseName = address.substring(2).toLowerCase() + \".addr.reverse\";\n\n            const resolverAddress = await this._getResolver(reverseName);\n            if (!resolverAddress) { return null; }\n\n            resolver = new Resolver(this, resolverAddress, \"_\", address);\n\n        } else {\n            // ENS name; forward lookup\n            resolver = await this.getResolver(nameOrAddress);\n        }\n\n        const avatar = await resolver.getAvatar();\n        if (avatar == null) { return null; }\n\n        return avatar.url;\n    }\n\n    perform(method: string, params: any): Promise<any> {\n        return logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n    }\n\n    _startEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _stopEvent(event: Event): void {\n        this.polling = (this._events.filter((e) => e.pollable()).length > 0);\n    }\n\n    _addEventListener(eventName: EventType, listener: Listener, once: boolean): this {\n        const event = new Event(getEventTag(eventName), listener, once)\n        this._events.push(event);\n        this._startEvent(event);\n\n        return this;\n    }\n\n    on(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, false);\n    }\n\n    once(eventName: EventType, listener: Listener): this {\n        return this._addEventListener(eventName, listener, true);\n    }\n\n\n    emit(eventName: EventType, ...args: Array<any>): boolean {\n        let result = false;\n\n        let stopped: Array<Event> = [ ];\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag) { return true; }\n\n            setTimeout(() => {\n                event.listener.apply(this, args);\n            }, 0);\n\n            result = true;\n\n            if (event.once) {\n                stopped.push(event);\n                return false;\n            }\n\n            return true;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return result;\n    }\n\n    listenerCount(eventName?: EventType): number {\n        if (!eventName) { return this._events.length; }\n\n        let eventTag = getEventTag(eventName);\n        return this._events.filter((event) => {\n            return (event.tag === eventTag);\n        }).length;\n    }\n\n    listeners(eventName?: EventType): Array<Listener> {\n        if (eventName == null) {\n            return this._events.map((event) => event.listener);\n        }\n\n        let eventTag = getEventTag(eventName);\n        return this._events\n            .filter((event) => (event.tag === eventTag))\n            .map((event) => event.listener);\n    }\n\n    off(eventName: EventType, listener?: Listener): this {\n        if (listener == null) {\n            return this.removeAllListeners(eventName);\n        }\n\n        const stopped: Array<Event> = [ ];\n\n        let found = false;\n\n        let eventTag = getEventTag(eventName);\n        this._events = this._events.filter((event) => {\n            if (event.tag !== eventTag || event.listener != listener) { return true; }\n            if (found) { return true; }\n            found = true;\n            stopped.push(event);\n            return false;\n        });\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n\n    removeAllListeners(eventName?: EventType): this {\n        let stopped: Array<Event> = [ ];\n        if (eventName == null) {\n            stopped = this._events;\n\n            this._events = [ ];\n        } else {\n            const eventTag = getEventTag(eventName);\n            this._events = this._events.filter((event) => {\n                if (event.tag !== eventTag) { return true; }\n                stopped.push(event);\n                return false;\n            });\n        }\n\n        stopped.forEach((event) => { this._stopEvent(event); });\n\n        return this;\n    }\n}\n","\"use strict\";\n\n// See: https://github.com/ethereum/wiki/wiki/JSON-RPC\n\nimport { Provider, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { Signer, TypedDataDomain, TypedDataField, TypedDataSigner } from \"@ethersproject/abstract-signer\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Bytes, hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { _TypedDataEncoder } from \"@ethersproject/hash\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { checkProperties, deepCopy, Deferrable, defineReadOnly, getStatic, resolveProperties, shallowCopy } from \"@ethersproject/properties\";\nimport { toUtf8Bytes } from \"@ethersproject/strings\";\nimport { AccessList, accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson, poll } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider, Event } from \"./base-provider\";\n\n\nconst errorGas = [ \"call\", \"estimateGas\" ];\n\nfunction checkError(method: string, error: any, params: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n        if (e && e.message.match(\"reverted\") && isHexString(e.data)) {\n            return e.data;\n        }\n\n        logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n            error, data: \"0x\"\n        });\n    }\n\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR && error.error && typeof(error.error.message) === \"string\") {\n        message = error.error.message;\n    } else if (typeof(error.body) === \"string\") {\n        message = error.body;\n    } else if (typeof(error.responseText) === \"string\") {\n        message = error.responseText;\n    }\n    message = (message || \"\").toLowerCase();\n\n    const transaction = params.transaction || params.signedTransaction;\n\n    // \"insufficient funds for gas * price + value + cost(data)\"\n    if (message.match(/insufficient funds|base fee exceeds gas limit/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n            error, method, transaction\n        });\n    }\n\n    // \"nonce too low\"\n    if (message.match(/nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/replacement transaction underpriced/)) {\n        logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n        });\n    }\n\n    // \"replacement transaction underpriced\"\n    if (message.match(/only replay-protected/)) {\n        logger.throwError(\"legacy pre-eip-155 transactions not supported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            error, method, transaction\n        });\n    }\n\n    if (errorGas.indexOf(method) >= 0 && message.match(/gas required exceeds allowance|always failing transaction|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nfunction timer(timeout: number): Promise<any> {\n    return new Promise(function(resolve) {\n        setTimeout(resolve, timeout);\n    });\n}\n\nfunction getResult(payload: { error?: { code?: number, data?: any, message?: string }, result?: any }): any {\n    if (payload.error) {\n        // @TODO: not any\n        const error: any = new Error(payload.error.message);\n        error.code = payload.error.code;\n        error.data = payload.error.data;\n        throw error;\n    }\n\n    return payload.result;\n}\n\nfunction getLowerCase(value: string): string {\n    if (value) { return value.toLowerCase(); }\n    return value;\n}\n\nconst _constructorGuard = {};\n\nexport class JsonRpcSigner extends Signer implements TypedDataSigner {\n    readonly provider: JsonRpcProvider;\n    _index: number;\n    _address: string;\n\n    constructor(constructorGuard: any, provider: JsonRpcProvider, addressOrIndex?: string | number) {\n        logger.checkNew(new.target, JsonRpcSigner);\n\n        super();\n\n        if (constructorGuard !== _constructorGuard) {\n            throw new Error(\"do not call the JsonRpcSigner constructor directly; use provider.getSigner\");\n        }\n\n        defineReadOnly(this, \"provider\", provider);\n\n        if (addressOrIndex == null) { addressOrIndex = 0; }\n\n        if (typeof(addressOrIndex) === \"string\") {\n            defineReadOnly(this, \"_address\", this.provider.formatter.address(addressOrIndex));\n            defineReadOnly(this, \"_index\", null);\n\n        } else if (typeof(addressOrIndex) === \"number\") {\n            defineReadOnly(this, \"_index\", addressOrIndex);\n            defineReadOnly(this, \"_address\", null);\n\n        } else {\n            logger.throwArgumentError(\"invalid address or index\", \"addressOrIndex\", addressOrIndex);\n        }\n    }\n\n    connect(provider: Provider): JsonRpcSigner {\n        return logger.throwError(\"cannot alter JSON-RPC Signer connection\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"connect\"\n        });\n    }\n\n    connectUnchecked(): JsonRpcSigner {\n        return new UncheckedJsonRpcSigner(_constructorGuard, this.provider, this._address || this._index);\n    }\n\n    getAddress(): Promise<string> {\n        if (this._address) {\n            return Promise.resolve(this._address);\n        }\n\n        return this.provider.send(\"eth_accounts\", []).then((accounts) => {\n            if (accounts.length <= this._index) {\n                logger.throwError(\"unknown account #\" + this._index, Logger.errors.UNSUPPORTED_OPERATION, {\n                    operation: \"getAddress\"\n                });\n            }\n            return this.provider.formatter.address(accounts[this._index])\n        });\n    }\n\n    sendUncheckedTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        transaction = shallowCopy(transaction);\n\n        const fromAddress = this.getAddress().then((address) => {\n            if (address) { address = address.toLowerCase(); }\n            return address;\n        });\n\n        // The JSON-RPC for eth_sendTransaction uses 90000 gas; if the user\n        // wishes to use this, it is easy to specify explicitly, otherwise\n        // we look it up for them.\n        if (transaction.gasLimit == null) {\n            const estimate = shallowCopy(transaction);\n            estimate.from = fromAddress;\n            transaction.gasLimit = this.provider.estimateGas(estimate);\n        }\n\n        if (transaction.to != null) {\n            transaction.to = Promise.resolve(transaction.to).then(async (to) => {\n                if (to == null) { return null; }\n                const address = await this.provider.resolveName(to);\n                if (address == null) {\n                    logger.throwArgumentError(\"provided ENS name resolves to null\", \"tx.to\", to);\n                }\n                return address;\n            });\n        }\n\n        return resolveProperties({\n            tx: resolveProperties(transaction),\n            sender: fromAddress\n        }).then(({ tx, sender }) => {\n\n            if (tx.from != null) {\n                if (tx.from.toLowerCase() !== sender) {\n                    logger.throwArgumentError(\"from address mismatch\", \"transaction\", transaction);\n                }\n            } else {\n                tx.from = sender;\n            }\n\n            const hexTx = (<any>this.provider.constructor).hexlifyTransaction(tx, { from: true });\n\n            return this.provider.send(\"eth_sendTransaction\", [ hexTx ]).then((hash) => {\n                return hash;\n            }, (error) => {\n                return checkError(\"sendTransaction\", error, hexTx);\n            });\n        });\n    }\n\n    signTransaction(transaction: Deferrable<TransactionRequest>): Promise<string> {\n        return logger.throwError(\"signing transactions is unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"signTransaction\"\n        });\n    }\n\n    async sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        // This cannot be mined any earlier than any recent block\n        const blockNumber = await this.provider._getInternalBlockNumber(100 + 2 * this.provider.pollingInterval);\n\n        // Send the transaction\n        const hash = await this.sendUncheckedTransaction(transaction);\n\n        try {\n            // Unfortunately, JSON-RPC only provides and opaque transaction hash\n            // for a response, and we need the actual transaction, so we poll\n            // for it; it should show up very quickly\n            return await poll(async () => {\n                const tx = await this.provider.getTransaction(hash);\n                if (tx === null) { return undefined; }\n                return this.provider._wrapTransaction(tx, hash, blockNumber);\n            }, { oncePoll: this.provider });\n        } catch (error) {\n            (<any>error).transactionHash = hash;\n            throw error;\n        }\n    }\n\n    async signMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"personal_sign\", [ hexlify(data), address.toLowerCase() ]);\n    }\n\n    async _legacySignMessage(message: Bytes | string): Promise<string> {\n        const data = ((typeof(message) === \"string\") ? toUtf8Bytes(message): message);\n        const address = await this.getAddress();\n\n        // https://github.com/ethereum/wiki/wiki/JSON-RPC#eth_sign\n        return await this.provider.send(\"eth_sign\", [ address.toLowerCase(), hexlify(data) ]);\n    }\n\n    async _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, value: Record<string, any>): Promise<string> {\n        // Populate any ENS names (in-place)\n        const populated = await _TypedDataEncoder.resolveNames(domain, types, value, (name: string) => {\n            return this.provider.resolveName(name);\n        });\n\n        const address = await this.getAddress();\n\n        return await this.provider.send(\"eth_signTypedData_v4\", [\n            address.toLowerCase(),\n            JSON.stringify(_TypedDataEncoder.getPayload(populated.domain, types, populated.value))\n        ]);\n    }\n\n    async unlock(password: string): Promise<boolean> {\n        const provider = this.provider;\n\n        const address = await this.getAddress();\n\n        return provider.send(\"personal_unlockAccount\", [ address.toLowerCase(), password, null ]);\n    }\n}\n\nclass UncheckedJsonRpcSigner extends JsonRpcSigner {\n    sendTransaction(transaction: Deferrable<TransactionRequest>): Promise<TransactionResponse> {\n        return this.sendUncheckedTransaction(transaction).then((hash) => {\n            return <TransactionResponse>{\n                hash: hash,\n                nonce: null,\n                gasLimit: null,\n                gasPrice: null,\n                data: null,\n                value: null,\n                chainId: null,\n                confirmations: 0,\n                from: null,\n                wait: (confirmations?: number) => { return this.provider.waitForTransaction(hash, confirmations); }\n            };\n        });\n    }\n}\n\nconst allowedTransactionKeys: { [ key: string ]: boolean } = {\n    chainId: true, data: true, gasLimit: true, gasPrice:true, nonce: true, to: true, value: true,\n    type: true, accessList: true,\n    maxFeePerGas: true, maxPriorityFeePerGas: true\n}\n\nexport class JsonRpcProvider extends BaseProvider {\n    readonly connection: ConnectionInfo;\n\n    _pendingFilter: Promise<number>;\n    _nextId: number;\n\n    // During any given event loop, the results for a given call will\n    // all be the same, so we can dedup the calls to save requests and\n    // bandwidth. @TODO: Try out generalizing this against send?\n    _eventLoopCache: Record<string, Promise<any>>;\n    get _cache(): Record<string, Promise<any>> {\n        if (this._eventLoopCache == null) {\n            this._eventLoopCache = { };\n        }\n        return this._eventLoopCache;\n    }\n\n    constructor(url?: ConnectionInfo | string, network?: Networkish) {\n        logger.checkNew(new.target, JsonRpcProvider);\n\n        let networkOrReady: Networkish | Promise<Network> = network;\n\n        // The network is unknown, query the JSON-RPC for it\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then((network) => {\n                        resolve(network);\n                    }, (error) => {\n                        reject(error);\n                    });\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Default URL\n        if (!url) { url = getStatic<() => string>(this.constructor, \"defaultUrl\")(); }\n\n        if (typeof(url) === \"string\") {\n            defineReadOnly(this, \"connection\",Object.freeze({\n                url: url\n            }));\n        } else {\n            defineReadOnly(this, \"connection\", Object.freeze(shallowCopy(url)));\n        }\n\n        this._nextId = 42;\n    }\n\n    static defaultUrl(): string {\n        return \"http:/\\/localhost:8545\";\n    }\n\n    detectNetwork(): Promise<Network> {\n        if (!this._cache[\"detectNetwork\"]) {\n            this._cache[\"detectNetwork\"] = this._uncachedDetectNetwork();\n\n            // Clear this cache at the beginning of the next event loop\n            setTimeout(() => {\n                this._cache[\"detectNetwork\"] = null;\n            }, 0);\n        }\n        return this._cache[\"detectNetwork\"];\n    }\n\n    async _uncachedDetectNetwork(): Promise<Network> {\n        await timer(0);\n\n        let chainId = null;\n        try {\n            chainId = await this.send(\"eth_chainId\", [ ]);\n        } catch (error) {\n            try {\n                chainId = await this.send(\"net_version\", [ ]);\n            } catch (error) { }\n        }\n\n        if (chainId != null) {\n            const getNetwork = getStatic<(network: Networkish) => Network>(this.constructor, \"getNetwork\");\n            try {\n                return getNetwork(BigNumber.from(chainId).toNumber());\n            } catch (error) {\n                return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n                    chainId: chainId,\n                    event: \"invalidNetwork\",\n                    serverError: error\n                });\n            }\n        }\n\n        return logger.throwError(\"could not detect network\", Logger.errors.NETWORK_ERROR, {\n            event: \"noNetwork\"\n        });\n    }\n\n    getSigner(addressOrIndex?: string | number): JsonRpcSigner {\n        return new JsonRpcSigner(_constructorGuard, this, addressOrIndex);\n    }\n\n    getUncheckedSigner(addressOrIndex?: string | number): UncheckedJsonRpcSigner {\n        return this.getSigner(addressOrIndex).connectUnchecked();\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return this.send(\"eth_accounts\", []).then((accounts: Array<string>) => {\n            return accounts.map((a) => this.formatter.address(a));\n        });\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        // We can expand this in the future to any call, but for now these\n        // are the biggest wins and do not require any serializing parameters.\n        const cache = ([ \"eth_chainId\", \"eth_blockNumber\" ].indexOf(method) >= 0);\n        if (cache && this._cache[method]) {\n            return this._cache[method];\n        }\n\n        const result = fetchJson(this.connection, JSON.stringify(request), getResult).then((result) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                request: request,\n                response: result,\n                provider: this\n            });\n\n            return result;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                error: error,\n                request: request,\n                provider: this\n            });\n\n            throw error;\n        });\n\n        // Cache the fetch, but clear it on the next event loop\n        if (cache) {\n            this._cache[method] = result;\n            setTimeout(() => {\n                this._cache[method] = null;\n            }, 0);\n        }\n\n        return result;\n    }\n\n    prepareRequest(method: string, params: any): [ string, Array<any> ] {\n        switch (method) {\n            case \"getBlockNumber\":\n                return [ \"eth_blockNumber\", [] ];\n\n            case \"getGasPrice\":\n                return [ \"eth_gasPrice\", [] ];\n\n            case \"getBalance\":\n                return [ \"eth_getBalance\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getTransactionCount\":\n                return [ \"eth_getTransactionCount\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getCode\":\n                return [ \"eth_getCode\", [ getLowerCase(params.address), params.blockTag ] ];\n\n            case \"getStorageAt\":\n                return [ \"eth_getStorageAt\", [ getLowerCase(params.address), params.position, params.blockTag ] ];\n\n            case \"sendTransaction\":\n                return [ \"eth_sendRawTransaction\", [ params.signedTransaction ] ]\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return [ \"eth_getBlockByNumber\", [ params.blockTag, !!params.includeTransactions ] ];\n                } else if (params.blockHash) {\n                    return [ \"eth_getBlockByHash\", [ params.blockHash, !!params.includeTransactions ] ];\n                }\n                return null;\n\n            case \"getTransaction\":\n                return [ \"eth_getTransactionByHash\", [ params.transactionHash ] ];\n\n            case \"getTransactionReceipt\":\n                return [ \"eth_getTransactionReceipt\", [ params.transactionHash ] ];\n\n            case \"call\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_call\", [ hexlifyTransaction(params.transaction, { from: true }), params.blockTag ] ];\n            }\n\n            case \"estimateGas\": {\n                const hexlifyTransaction = getStatic<(t: TransactionRequest, a?: { [key: string]: boolean }) => { [key: string]: string }>(this.constructor, \"hexlifyTransaction\");\n                return [ \"eth_estimateGas\", [ hexlifyTransaction(params.transaction, { from: true }) ] ];\n            }\n\n            case \"getLogs\":\n                if (params.filter && params.filter.address != null) {\n                    params.filter.address = getLowerCase(params.filter.address);\n                }\n                return [ \"eth_getLogs\", [ params.filter ] ];\n\n            default:\n                break;\n        }\n\n        return null;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // Legacy networks do not like the type field being passed along (which\n        // is fair), so we delete type if it is 0 and a non-EIP-1559 network\n        if (method === \"call\" || method === \"estimateGas\") {\n            const tx = params.transaction;\n            if (tx && tx.type != null && BigNumber.from(tx.type).isZero()) {\n                // If there are no EIP-1559 properties, it might be non-EIP-a559\n                if (tx.maxFeePerGas == null && tx.maxPriorityFeePerGas == null) {\n                    const feeData = await this.getFeeData();\n                    if (feeData.maxFeePerGas == null && feeData.maxPriorityFeePerGas == null) {\n                        // Network doesn't know about EIP-1559 (and hence type)\n                        params = shallowCopy(params);\n                        params.transaction = shallowCopy(tx);\n                        delete params.transaction.type;\n                    }\n                }\n            }\n        }\n\n        const args = this.prepareRequest(method,  params);\n\n        if (args == null) {\n            logger.throwError(method + \" not implemented\", Logger.errors.NOT_IMPLEMENTED, { operation: method });\n        }\n        try {\n            return await this.send(args[0], args[1])\n        } catch (error) {\n            return checkError(method, error, params);\n        }\n    }\n\n    _startEvent(event: Event): void {\n        if (event.tag === \"pending\") { this._startPending(); }\n        super._startEvent(event);\n    }\n\n    _startPending(): void {\n        if (this._pendingFilter != null) { return; }\n        const self = this;\n\n        const pendingFilter: Promise<number> = this.send(\"eth_newPendingTransactionFilter\", []);\n        this._pendingFilter = pendingFilter;\n\n        pendingFilter.then(function(filterId) {\n            function poll() {\n                self.send(\"eth_getFilterChanges\", [ filterId ]).then(function(hashes: Array<string>) {\n                    if (self._pendingFilter != pendingFilter) { return null; }\n\n                    let seq = Promise.resolve();\n                    hashes.forEach(function(hash) {\n                        // @TODO: This should be garbage collected at some point... How? When?\n                        self._emitted[\"t:\" + hash.toLowerCase()] = \"pending\";\n                        seq = seq.then(function() {\n                            return self.getTransaction(hash).then(function(tx) {\n                                self.emit(\"pending\", tx);\n                                return null;\n                            });\n                        });\n                    });\n\n                    return seq.then(function() {\n                        return timer(1000);\n                    });\n                }).then(function() {\n                    if (self._pendingFilter != pendingFilter) {\n                        self.send(\"eth_uninstallFilter\", [ filterId ]);\n                        return;\n                    }\n                    setTimeout(function() { poll(); }, 0);\n\n                    return null;\n                }).catch((error: Error) => { });\n            }\n            poll();\n\n            return filterId;\n        }).catch((error: Error) => { });\n    }\n\n    _stopEvent(event: Event): void {\n        if (event.tag === \"pending\" && this.listenerCount(\"pending\") === 0) {\n            this._pendingFilter = null;\n        }\n        super._stopEvent(event);\n    }\n\n    // Convert an ethers.js transaction into a JSON-RPC transaction\n    //  - gasLimit => gas\n    //  - All values hexlified\n    //  - All numeric values zero-striped\n    //  - All addresses are lowercased\n    // NOTE: This allows a TransactionRequest, but all values should be resolved\n    //       before this is called\n    // @TODO: This will likely be removed in future versions and prepareRequest\n    //        will be the preferred method for this.\n    static hexlifyTransaction(transaction: TransactionRequest, allowExtra?: { [key: string]: boolean }): { [key: string]: string | AccessList } {\n        // Check only allowed properties are given\n        const allowed = shallowCopy(allowedTransactionKeys);\n        if (allowExtra) {\n            for (const key in allowExtra) {\n                if (allowExtra[key]) { allowed[key] = true; }\n            }\n        }\n\n        checkProperties(transaction, allowed);\n\n        const result: { [key: string]: string | AccessList } = {};\n\n        // Some nodes (INFURA ropsten; INFURA mainnet is fine) do not like leading zeros.\n        [\"gasLimit\", \"gasPrice\", \"type\", \"maxFeePerGas\", \"maxPriorityFeePerGas\", \"nonce\", \"value\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            const value = hexValue((<any>transaction)[key]);\n            if (key === \"gasLimit\") { key = \"gas\"; }\n            result[key] = value;\n        });\n\n        [\"from\", \"to\", \"data\"].forEach(function(key) {\n            if ((<any>transaction)[key] == null) { return; }\n            result[key] = hexlify((<any>transaction)[key]);\n        });\n\n        if ((<any>transaction).accessList) {\n            result[\"accessList\"] = accessListify((<any>transaction).accessList);\n        }\n\n        return result;\n    }\n}\n","\"use strict\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\n\nlet WS: any = null;\n\ntry {\n    WS = (WebSocket as any);\n    if (WS == null) { throw new Error(\"inject please\"); }\n} catch (error) {\n    const logger = new Logger(version);\n    WS = function() {\n        logger.throwError(\"WebSockets not supported in this environment\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"new WebSocket()\"\n        });\n    }\n}\n//export default WS;\n//module.exports = WS;\nexport { WS as WebSocket };\n","\"use strict\";\n\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Event } from \"./base-provider\";\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\nimport { WebSocket } from \"./ws\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n/**\n *  Notes:\n *\n *  This provider differs a bit from the polling providers. One main\n *  difference is how it handles consistency. The polling providers\n *  will stall responses to ensure a consistent state, while this\n *  WebSocket provider assumes the connected backend will manage this.\n *\n *  For example, if a polling provider emits an event which indicates\n *  the event occurred in blockhash XXX, a call to fetch that block by\n *  its hash XXX, if not present will retry until it is present. This\n *  can occur when querying a pool of nodes that are mildly out of sync\n *  with each other.\n */\n\nlet NextId = 1;\n\nexport type InflightRequest = {\n     callback: (error: Error, result: any) => void;\n     payload: string;\n};\n\nexport type Subscription = {\n    tag: string;\n    processFunc: (payload: any) => void;\n};\n\n\n// For more info about the Real-time Event API see:\n//   https://geth.ethereum.org/docs/rpc/pubsub\n\nexport class WebSocketProvider extends JsonRpcProvider {\n    readonly _websocket: any;\n    readonly _requests: { [ name: string ]: InflightRequest };\n    readonly _detectNetwork: Promise<Network>;\n\n    // Maps event tag to subscription ID (we dedupe identical events)\n    readonly _subIds: { [ tag: string ]: Promise<string> };\n\n    // Maps Subscription ID to Subscription\n    readonly _subs: { [ name: string ]: Subscription };\n\n    _wsReady: boolean;\n\n    constructor(url: string, network?: Networkish) {\n        // This will be added in the future; please open an issue to expedite\n        if (network === \"any\") {\n            logger.throwError(\"WebSocketProvider does not support 'any' network yet\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"network:any\"\n            });\n        }\n\n        super(url, network);\n        this._pollingInterval = -1;\n\n        this._wsReady = false;\n\n        defineReadOnly(this, \"_websocket\", new WebSocket(this.connection.url));\n        defineReadOnly(this, \"_requests\", { });\n        defineReadOnly(this, \"_subs\", { });\n        defineReadOnly(this, \"_subIds\", { });\n        defineReadOnly(this, \"_detectNetwork\", super.detectNetwork());\n\n        // Stall sending requests until the socket is open...\n        this._websocket.onopen = () => {\n            this._wsReady = true;\n            Object.keys(this._requests).forEach((id) => {\n                this._websocket.send(this._requests[id].payload);\n            });\n        };\n\n        this._websocket.onmessage = (messageEvent: { data: string }) => {\n            const data = messageEvent.data;\n            const result = JSON.parse(data);\n            if (result.id != null) {\n                const id = String(result.id);\n                const request = this._requests[id];\n                delete this._requests[id];\n\n                if (result.result !== undefined) {\n                    request.callback(null, result.result);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: JSON.parse(request.payload),\n                        response: result.result,\n                        provider: this\n                    });\n\n                } else {\n                    let error: Error = null;\n                    if (result.error) {\n                        error = new Error(result.error.message || \"unknown error\");\n                        defineReadOnly(<any>error, \"code\", result.error.code || null);\n                        defineReadOnly(<any>error, \"response\", data);\n                    } else {\n                        error = new Error(\"unknown error\");\n                    }\n\n                    request.callback(error, undefined);\n\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: JSON.parse(request.payload),\n                        provider: this\n                    });\n\n                }\n\n            } else if (result.method === \"eth_subscription\") {\n                // Subscription...\n                const sub = this._subs[result.params.subscription];\n                if (sub) {\n                    //this.emit.apply(this,                  );\n                    sub.processFunc(result.params.result)\n                }\n\n            } else {\n                console.warn(\"this should not happen\");\n            }\n        };\n\n        // This Provider does not actually poll, but we want to trigger\n        // poll events for things that depend on them (like stalling for\n        // block and transaction lookups)\n        const fauxPoll = setInterval(() => {\n            this.emit(\"poll\");\n        }, 1000);\n        if (fauxPoll.unref) { fauxPoll.unref(); }\n    }\n\n    detectNetwork(): Promise<Network> {\n        return this._detectNetwork;\n    }\n\n    get pollingInterval(): number {\n        return 0;\n    }\n\n    resetEventsBlock(blockNumber: number): void {\n        logger.throwError(\"cannot reset events block on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"resetEventBlock\"\n        });\n    }\n\n    set pollingInterval(value: number) {\n        logger.throwError(\"cannot set polling interval on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPollingInterval\"\n        });\n    }\n\n    async poll(): Promise<void> {\n        return null;\n    }\n\n    set polling(value: boolean) {\n        if (!value) { return; }\n\n        logger.throwError(\"cannot set polling on WebSocketProvider\", Logger.errors.UNSUPPORTED_OPERATION, {\n            operation: \"setPolling\"\n        });\n    }\n\n    send(method: string, params?: Array<any>): Promise<any> {\n        const rid = NextId++;\n\n        return new Promise((resolve, reject) => {\n            function callback(error: Error, result: any) {\n                if (error) { return reject(error); }\n                return resolve(result);\n            }\n\n            const payload = JSON.stringify({\n                method: method,\n                params: params,\n                id: rid,\n                jsonrpc: \"2.0\"\n            });\n\n            this.emit(\"debug\", {\n                action: \"request\",\n                request: JSON.parse(payload),\n                provider: this\n            });\n\n            this._requests[String(rid)] = { callback, payload };\n\n            if (this._wsReady) { this._websocket.send(payload); }\n        });\n    }\n\n    static defaultUrl(): string {\n        return \"ws:/\\/localhost:8546\";\n    }\n\n    async _subscribe(tag: string, param: Array<any>, processFunc: (result: any) => void): Promise<void> {\n        let subIdPromise = this._subIds[tag];\n        if (subIdPromise == null) {\n            subIdPromise = Promise.all(param).then((param) => {\n                return this.send(\"eth_subscribe\", param);\n            });\n            this._subIds[tag] = subIdPromise;\n        }\n        const subId = await subIdPromise;\n        this._subs[subId] = { tag, processFunc };\n    }\n\n    _startEvent(event: Event): void {\n        switch (event.type) {\n            case \"block\":\n                this._subscribe(\"block\", [ \"newHeads\" ], (result: any) => {\n                    const blockNumber = BigNumber.from(result.number).toNumber();\n                    this._emitted.block = blockNumber;\n                    this.emit(\"block\", blockNumber);\n                });\n                break;\n\n            case \"pending\":\n                this._subscribe(\"pending\", [ \"newPendingTransactions\" ], (result: any) => {\n                    this.emit(\"pending\", result);\n                });\n                break;\n\n            case \"filter\":\n                this._subscribe(event.tag, [ \"logs\", this._getFilter(event.filter) ], (result: any) => {\n                    if (result.removed == null) { result.removed = false; }\n                    this.emit(event.filter, this.formatter.filterLog(result));\n                });\n                break;\n\n            case \"tx\": {\n                const emitReceipt = (event: Event) => {\n                    const hash = event.hash;\n                    this.getTransactionReceipt(hash).then((receipt) => {\n                        if (!receipt) { return; }\n                        this.emit(hash, receipt);\n                    });\n                };\n\n                // In case it is already mined\n                emitReceipt(event);\n\n                // To keep things simple, we start up a single newHeads subscription\n                // to keep an eye out for transactions we are watching for.\n                // Starting a subscription for an event (i.e. \"tx\") that is already\n                // running is (basically) a nop.\n                this._subscribe(\"tx\", [ \"newHeads\" ], (result: any) => {\n                    this._events.filter((e) => (e.type === \"tx\")).forEach(emitReceipt);\n                });\n                break;\n            }\n\n            // Nothing is needed\n            case \"debug\":\n            case \"poll\":\n            case \"willPoll\":\n            case \"didPoll\":\n            case \"error\":\n                break;\n\n            default:\n                console.log(\"unhandled:\", event);\n                break;\n        }\n    }\n\n    _stopEvent(event: Event): void {\n        let tag = event.tag;\n\n        if (event.type === \"tx\") {\n            // There are remaining transaction event listeners\n            if (this._events.filter((e) => (e.type === \"tx\")).length) {\n                return;\n            }\n            tag = \"tx\";\n        } else if (this.listenerCount(event.event)) {\n            // There are remaining event listeners\n            return;\n        }\n\n        const subId = this._subIds[tag];\n        if (!subId) { return; }\n\n       delete this._subIds[tag];\n       subId.then((subId) => {\n            if (!this._subs[subId]) { return; }\n            delete this._subs[subId];\n            this.send(\"eth_unsubscribe\", [ subId ]);\n        });\n    }\n\n    async destroy(): Promise<void> {\n        // Wait until we have connected before trying to disconnect\n        if (this._websocket.readyState === WebSocket.CONNECTING) {\n            await (new Promise((resolve) => {\n                this._websocket.onopen = function() {\n                    resolve(true);\n                };\n\n                this._websocket.onerror = function() {\n                    resolve(false);\n                };\n            }));\n        }\n\n        // Hangup\n        // See: https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n        this._websocket.close(1000);\n    }\n}\n","\n\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly, getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { CommunityResourcable } from \"./formatter\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\n\ntype getUrlFunc = (network: Network, apiKey: string) => string | ConnectionInfo;\n\n// A StaticJsonRpcProvider is useful when you *know* for certain that\n// the backend will never change, as it never calls eth_chainId to\n// verify its backend. However, if the backend does change, the effects\n// are undefined and may include:\n// - inconsistent results\n// - locking up the UI\n// - block skew warnings\n// - wrong results\n// If the network is not explicit (i.e. auto-detection is expected), the\n// node MUST be running and available to respond to requests BEFORE this\n// is instantiated.\nexport class StaticJsonRpcProvider extends JsonRpcProvider {\n    async detectNetwork(): Promise<Network> {\n        let network = this.network;\n        if (network == null) {\n            network = await super.detectNetwork();\n\n            if (!network) {\n                logger.throwError(\"no network detected\", Logger.errors.UNKNOWN_ERROR, { });\n            }\n\n            // If still not set, set it\n            if (this._network == null) {\n                // A static network does not support \"any\"\n                defineReadOnly(this, \"_network\", network);\n\n                this.emit(\"network\", network, null);\n            }\n        }\n        return network;\n    }\n}\n\nexport abstract class UrlJsonRpcProvider extends StaticJsonRpcProvider implements CommunityResourcable {\n    readonly apiKey: any;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        logger.checkAbstract(new.target, UrlJsonRpcProvider);\n\n        // Normalize the Network and API Key\n        network = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n        apiKey = getStatic<(apiKey: string) => string>(new.target, \"getApiKey\")(apiKey);\n\n        const connection = getStatic<getUrlFunc>(new.target, \"getUrl\")(network, apiKey);\n\n        super(connection, network);\n\n        if (typeof(apiKey) === \"string\") {\n            defineReadOnly(this, \"apiKey\", apiKey);\n        } else if (apiKey != null) {\n            Object.keys(apiKey).forEach((key) => {\n                defineReadOnly<any, any>(this, key, apiKey[key]);\n            });\n        }\n    }\n\n    _startPending(): void {\n        logger.warn(\"WARNING: API provider does not support pending filters\");\n    }\n\n    isCommunityResource(): boolean {\n        return false;\n    }\n\n    getSigner(address?: string): JsonRpcSigner {\n        return logger.throwError(\n            \"API provider does not support signing\",\n            Logger.errors.UNSUPPORTED_OPERATION,\n            { operation: \"getSigner\" }\n        );\n    }\n\n    listAccounts(): Promise<Array<string>> {\n        return Promise.resolve([]);\n    }\n\n    // Return a defaultApiKey if null, otherwise validate the API key\n    static getApiKey(apiKey: any): any {\n        return apiKey;\n    }\n\n    // Returns the url or connection for the given network and API key. The\n    // API key will have been sanitized by the getApiKey first, so any validation\n    // or transformations can be done there.\n    static getUrl(network: Network, apiKey: any): string | ConnectionInfo {\n        return logger.throwError(\"not implemented; sub-classes must override getUrl\", Logger.errors.NOT_IMPLEMENTED, {\n            operation: \"getUrl\"\n        });\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\nimport { WebSocketProvider } from \"./websocket-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// This key was provided to ethers.js by Alchemy to be used by the\n// default provider, but it is recommended that for your own\n// production environments, that you acquire your own API key at:\n//   https://dashboard.alchemyapi.io\n\nconst defaultApiKey = \"_gg7wSSi0KMBsdKnGVfHDueq6xMB9EkC\"\n\nexport class AlchemyWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new AlchemyProvider(network, apiKey);\n\n        const url = provider.connection.url.replace(/^http/i, \"ws\")\n                                           .replace(\".alchemyapi.\", \".ws.alchemyapi.\");\n\n        super(url, provider.network);\n        defineReadOnly(this, \"apiKey\", provider.apiKey);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n\nexport class AlchemyProvider extends UrlJsonRpcProvider {\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): AlchemyWebSocketProvider {\n        return new AlchemyWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey == null) { return defaultApiKey; }\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey;\n    }\n\n    static getUrl(network: Network, apiKey: string): ConnectionInfo {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"eth-mainnet.alchemyapi.io/v2/\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.alchemyapi.io/v2/\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.alchemyapi.io/v2/\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.alchemyapi.io/v2/\";\n                break;\n            case \"kovan\":\n                host = \"eth-kovan.alchemyapi.io/v2/\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.g.alchemy.com/v2/\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.g.alchemy.com/v2/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + apiKey),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey === defaultApiKey) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nexport class CloudflareProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey != null) {\n            logger.throwArgumentError(\"apiKey not supported for cloudflare\", \"apiKey\", apiKey);\n        }\n        return null;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://cloudflare-eth.com/\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return host;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n        // The Cloudflare provider does not support eth_blockNumber,\n        // so we get the latest block and pull it from that\n        if (method === \"getBlockNumber\") {\n            const block = await super.perform(\"getBlock\", { blockTag: \"latest\" });\n            return block.number;\n        }\n\n        return super.perform(method, params);\n    }\n}\n","\"use strict\";\n\nimport { BlockTag, TransactionRequest, TransactionResponse } from \"@ethersproject/abstract-provider\";\nimport { hexlify, hexValue, isHexString } from \"@ethersproject/bytes\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\nimport { accessListify } from \"@ethersproject/transactions\";\nimport { ConnectionInfo, fetchJson } from \"@ethersproject/web\";\n\nimport { showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { BaseProvider } from \"./base-provider\";\n\n\n// The transaction has already been sanitized by the calls in Provider\nfunction getTransactionPostData(transaction: TransactionRequest): Record<string, string> {\n    const result: Record<string, string> = { };\n    for (let key in transaction) {\n        if ((<any>transaction)[key] == null) { continue; }\n        let value = (<any>transaction)[key];\n        if (key === \"type\" && value === 0) { continue; }\n\n        // Quantity-types require no leading zero, unless 0\n        if ((<any>{ type: true, gasLimit: true, gasPrice: true, maxFeePerGs: true, maxPriorityFeePerGas: true, nonce: true, value: true })[key]) {\n            value = hexValue(hexlify(value));\n        } else if (key === \"accessList\") {\n            value = \"[\" + accessListify(value).map((set) => {\n                return `{address:\"${ set.address }\",storageKeys:[\"${ set.storageKeys.join('\",\"') }\"]}`;\n            }).join(\",\") + \"]\";\n        } else {\n            value = hexlify(value);\n        }\n        result[key] = value;\n    }\n    return result;\n}\n\nfunction getResult(result: { status?: number, message?: string, result?: any }): any {\n    // getLogs, getHistory have weird success responses\n    if (result.status == 0 && (result.message === \"No records found\" || result.message === \"No transactions found\")) {\n        return result.result;\n    }\n\n    if (result.status != 1 || result.message != \"OK\") {\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        if ((result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n            error.throttleRetry = true;\n        }\n        throw error;\n    }\n\n    return result.result;\n}\n\nfunction getJsonResult(result: { jsonrpc: string, result?: any, error?: { code?: number, data?: any, message?: string} } ): any {\n    // This response indicates we are being throttled\n    if (result && (<any>result).status == 0 && (<any>result).message == \"NOTOK\" && (result.result || \"\").toLowerCase().indexOf(\"rate limit\") >= 0) {\n        const error: any = new Error(\"throttled response\");\n        error.result = JSON.stringify(result);\n        error.throttleRetry = true;\n        throw error;\n    }\n\n    if (result.jsonrpc != \"2.0\") {\n        // @TODO: not any\n        const error: any = new Error(\"invalid response\");\n        error.result = JSON.stringify(result);\n        throw error;\n    }\n\n    if (result.error) {\n        // @TODO: not any\n        const error: any = new Error(result.error.message || \"unknown error\");\n        if (result.error.code) { error.code = result.error.code; }\n        if (result.error.data) { error.data = result.error.data; }\n        throw error;\n    }\n\n    return result.result;\n}\n\n// The blockTag was normalized as a string by the Provider pre-perform operations\nfunction checkLogTag(blockTag: string): number | \"latest\" {\n    if (blockTag === \"pending\") { throw new Error(\"pending not supported\"); }\n    if (blockTag === \"latest\") { return blockTag; }\n\n    return parseInt(blockTag.substring(2), 16);\n}\n\n\nconst defaultApiKey = \"9D13ZE7XSBTJ94N9BNJ2MA33VMAY2YPIRB\";\n\nfunction checkError(method: string, error: any, transaction: any): any {\n    // Undo the \"convenience\" some nodes are attempting to prevent backwards\n    // incompatibility; maybe for v6 consider forwarding reverts as errors\n    if (method === \"call\" && error.code === Logger.errors.SERVER_ERROR) {\n        const e = error.error;\n\n        // Etherscan keeps changing their string\n        if (e && (e.message.match(/reverted/i) || e.message.match(/VM execution error/i))) {\n            // Etherscan prefixes the data like \"Reverted 0x1234\"\n            let data = e.data;\n            if (data) { data = \"0x\" + data.replace(/^.*0x/i, \"\"); }\n\n            if (isHexString(data)) { return data; }\n\n            logger.throwError(\"missing revert data in call exception\", Logger.errors.CALL_EXCEPTION, {\n                error, data: \"0x\"\n            });\n        }\n    }\n\n    // Get the message from any nested error structure\n    let message = error.message;\n    if (error.code === Logger.errors.SERVER_ERROR) {\n        if (error.error && typeof(error.error.message) === \"string\") {\n            message = error.error.message;\n        } else if (typeof(error.body) === \"string\") {\n            message = error.body;\n        } else if (typeof(error.responseText) === \"string\") {\n            message = error.responseText;\n        }\n    }\n    message = (message || \"\").toLowerCase();\n\n    // \"Insufficient funds. The account you tried to send transaction from does not have enough funds. Required 21464000000000 and got: 0\"\n    if (message.match(/insufficient funds/)) {\n        logger.throwError(\"insufficient funds for intrinsic transaction cost\", Logger.errors.INSUFFICIENT_FUNDS, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction with the same hash was already imported.\"\n    if (message.match(/same hash was already imported|transaction nonce is too low|nonce too low/)) {\n        logger.throwError(\"nonce has already been used\", Logger.errors.NONCE_EXPIRED, {\n           error, method, transaction\n        });\n    }\n\n    // \"Transaction gas price is too low. There is another transaction with same nonce in the queue. Try increasing the gas price or incrementing the nonce.\"\n    if (message.match(/another transaction with same nonce/)) {\n         logger.throwError(\"replacement fee too low\", Logger.errors.REPLACEMENT_UNDERPRICED, {\n            error, method, transaction\n         });\n    }\n\n    if (message.match(/execution failed due to an exception|execution reverted/)) {\n        logger.throwError(\"cannot estimate gas; transaction may fail or may require manual gas limit\", Logger.errors.UNPREDICTABLE_GAS_LIMIT, {\n            error, method, transaction\n        });\n    }\n\n    throw error;\n}\n\nexport class EtherscanProvider extends BaseProvider{\n    readonly baseUrl: string;\n    readonly apiKey: string;\n\n    constructor(network?: Networkish, apiKey?: string) {\n        logger.checkNew(new.target, EtherscanProvider);\n\n        super(network);\n\n        defineReadOnly(this, \"baseUrl\", this.getBaseUrl());\n        defineReadOnly(this, \"apiKey\", apiKey || defaultApiKey);\n    }\n\n    getBaseUrl(): string {\n        switch(this.network ? this.network.name: \"invalid\") {\n            case \"homestead\":\n                return \"https:/\\/api.etherscan.io\";\n            case \"ropsten\":\n                return \"https:/\\/api-ropsten.etherscan.io\";\n            case \"rinkeby\":\n                return \"https:/\\/api-rinkeby.etherscan.io\";\n            case \"kovan\":\n                return \"https:/\\/api-kovan.etherscan.io\";\n            case \"goerli\":\n                return \"https:/\\/api-goerli.etherscan.io\";\n            default:\n        }\n\n        return logger.throwArgumentError(\"unsupported network\", \"network\", name);\n    }\n\n    getUrl(module: string, params: Record<string, string>): string {\n        const query = Object.keys(params).reduce((accum, key) => {\n            const value = params[key];\n            if (value != null) {\n                accum += `&${ key }=${ value }`\n            }\n            return accum\n        }, \"\");\n        const apiKey = ((this.apiKey) ? `&apikey=${ this.apiKey }`: \"\");\n        return `${ this.baseUrl }/api?module=${ module }${ query }${ apiKey }`;\n    }\n\n    getPostUrl(): string {\n        return `${ this.baseUrl }/api`;\n    }\n\n    getPostData(module: string, params: Record<string, any>): Record<string, any> {\n        params.module = module;\n        params.apikey = this.apiKey;\n        return params;\n    }\n\n    async fetch(module: string, params: Record<string, any>, post?: boolean): Promise<any> {\n        const url = (post ? this.getPostUrl(): this.getUrl(module, params));\n        const payload = (post ? this.getPostData(module, params): null);\n        const procFunc = (module === \"proxy\") ? getJsonResult: getResult;\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            request: url,\n            provider: this\n        });\n\n        const connection: ConnectionInfo = {\n            url: url,\n            throttleSlotInterval: 1000,\n            throttleCallback: (attempt: number, url: string) => {\n                if (this.isCommunityResource()) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        let payloadStr: string = null;\n        if (payload) {\n            connection.headers = { \"content-type\": \"application/x-www-form-urlencoded; charset=UTF-8\" };\n            payloadStr = Object.keys(payload).map((key) => {\n                return `${ key }=${ payload[key] }`\n            }).join(\"&\");\n        }\n\n        const result = await fetchJson(connection, payloadStr, procFunc || getJsonResult);\n\n        this.emit(\"debug\", {\n            action: \"response\",\n            request: url,\n            response: deepCopy(result),\n            provider: this\n        });\n\n        return result;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        return this.network;\n    }\n\n    async perform(method: string, params: any): Promise<any> {\n\n        switch (method) {\n            case \"getBlockNumber\":\n                return this.fetch(\"proxy\", { action: \"eth_blockNumber\" });\n\n            case \"getGasPrice\":\n                return this.fetch(\"proxy\", { action: \"eth_gasPrice\" });\n\n            case \"getBalance\":\n                // Returns base-10 result\n                return this.fetch(\"account\", {\n                    action: \"balance\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getTransactionCount\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionCount\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getCode\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getCode\",\n                    address: params.address,\n                    tag: params.blockTag\n                });\n\n            case \"getStorageAt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getStorageAt\",\n                    address: params.address,\n                    position: params.position,\n                    tag: params.blockTag\n                });\n\n            case \"sendTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_sendRawTransaction\",\n                    hex: params.signedTransaction\n                }, true).catch((error) => {\n                    return checkError(\"sendTransaction\", error, params.signedTransaction);\n                });\n\n            case \"getBlock\":\n                if (params.blockTag) {\n                    return this.fetch(\"proxy\", {\n                        action: \"eth_getBlockByNumber\",\n                        tag: params.blockTag,\n                        boolean: (params.includeTransactions ? \"true\": \"false\")\n                    });\n                }\n                throw new Error(\"getBlock by blockHash not implemented\");\n\n            case \"getTransaction\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionByHash\",\n                    txhash: params.transactionHash\n                });\n\n            case \"getTransactionReceipt\":\n                return this.fetch(\"proxy\", {\n                    action: \"eth_getTransactionReceipt\",\n                    txhash: params.transactionHash\n                });\n\n            case \"call\": {\n                if (params.blockTag !== \"latest\") {\n                    throw new Error(\"EtherscanProvider does not support blockTag for call\");\n                }\n\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_call\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"call\", error, params.transaction);\n                }\n            }\n\n            case \"estimateGas\": {\n                const postData = getTransactionPostData(params.transaction);\n                postData.module = \"proxy\";\n                postData.action = \"eth_estimateGas\";\n\n                try {\n                    return await this.fetch(\"proxy\", postData, true);\n                } catch (error) {\n                    return checkError(\"estimateGas\", error, params.transaction);\n                }\n            }\n\n            case \"getLogs\": {\n                const args: Record<string, any> = { action: \"getLogs\" }\n\n                if (params.filter.fromBlock) {\n                    args.fromBlock = checkLogTag(params.filter.fromBlock);\n                }\n\n                if (params.filter.toBlock) {\n                    args.toBlock = checkLogTag(params.filter.toBlock);\n                }\n\n                if (params.filter.address) {\n                    args.address = params.filter.address;\n                }\n\n                // @TODO: We can handle slightly more complicated logs using the logs API\n                if (params.filter.topics && params.filter.topics.length > 0) {\n                    if (params.filter.topics.length > 1) {\n                        logger.throwError(\"unsupported topic count\", Logger.errors.UNSUPPORTED_OPERATION, { topics: params.filter.topics });\n                    }\n\n                    if (params.filter.topics.length === 1) {\n                        const topic0 = params.filter.topics[0];\n                        if (typeof(topic0) !== \"string\" || topic0.length !== 66) {\n                            logger.throwError(\"unsupported topic format\", Logger.errors.UNSUPPORTED_OPERATION, { topic0: topic0 });\n                        }\n                        args.topic0 = topic0;\n                    }\n                }\n\n                const logs: Array<any> = await this.fetch(\"logs\", args);\n\n                // Cache txHash => blockHash\n                let blocks: { [tag: string]: string } = {};\n\n                // Add any missing blockHash to the logs\n                for (let i = 0; i < logs.length; i++) {\n                    const log = logs[i];\n                    if (log.blockHash != null) { continue; }\n                    if (blocks[log.blockNumber] == null) {\n                        const block = await this.getBlock(log.blockNumber);\n                        if (block) {\n                            blocks[log.blockNumber] = block.hash;\n                        }\n                    }\n                    log.blockHash = blocks[log.blockNumber];\n                }\n\n                return logs;\n            }\n\n            case \"getEtherPrice\":\n                if (this.network.name !== \"homestead\") { return 0.0; }\n                return parseFloat((await this.fetch(\"stats\", { action: \"ethprice\" })).ethusd);\n\n            default:\n                break;\n         }\n\n        return super.perform(method, params);\n    }\n\n    // Note: The `page` page parameter only allows pagination within the\n    //       10,000 window available without a page and offset parameter\n    //       Error: Result window is too large, PageNo x Offset size must\n    //              be less than or equal to 10000\n    async getHistory(addressOrName: string | Promise<string>, startBlock?: BlockTag, endBlock?: BlockTag): Promise<Array<TransactionResponse>> {\n        const params = {\n            action: \"txlist\",\n            address: (await this.resolveName(addressOrName)),\n            startblock: ((startBlock == null) ? 0: startBlock),\n            endblock: ((endBlock == null) ? 99999999: endBlock),\n            sort: \"asc\"\n        };\n\n        const result = await this.fetch(\"account\", params);\n\n        return result.map((tx: any) => {\n            [\"contractAddress\", \"to\"].forEach(function(key) {\n                if (tx[key] == \"\") { delete tx[key]; }\n            });\n            if (tx.creates == null && tx.contractAddress != null) {\n                tx.creates = tx.contractAddress;\n            }\n            const item = this.formatter.transactionResponse(tx);\n            if (tx.timeStamp) { item.timestamp = parseInt(tx.timeStamp); }\n            return item;\n        });\n    }\n\n    isCommunityResource(): boolean {\n        return (this.apiKey === defaultApiKey);\n    }\n}\n","\"use strict\";\n\nimport { Block, BlockWithTransactions, Provider } from \"@ethersproject/abstract-provider\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { isHexString } from \"@ethersproject/bytes\";\nimport { Network } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly, shallowCopy } from \"@ethersproject/properties\";\nimport { shuffled } from \"@ethersproject/random\";\nimport { poll } from \"@ethersproject/web\";\n\nimport { BaseProvider } from \"./base-provider\";\nimport { isCommunityResource } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nfunction now() { return (new Date()).getTime(); }\n\n// Returns to network as long as all agree, or null if any is null.\n// Throws an error if any two networks do not match.\nfunction checkNetworks(networks: Array<Network>): Network {\n    let result = null;\n\n    for (let i = 0; i < networks.length; i++) {\n        const network = networks[i];\n\n        // Null! We do not know our network; bail.\n        if (network == null) { return null; }\n\n        if (result) {\n            // Make sure the network matches the previous networks\n            if (!(result.name === network.name && result.chainId === network.chainId &&\n                ((result.ensAddress === network.ensAddress) || (result.ensAddress == null && network.ensAddress == null)))) {\n\n                logger.throwArgumentError(\"provider mismatch\", \"networks\", networks);\n           }\n        } else {\n            result = network;\n        }\n    }\n\n    return result;\n}\n\nfunction median(values: Array<number>, maxDelta?: number): number {\n    values = values.slice().sort();\n    const middle = Math.floor(values.length / 2);\n\n    // Odd length; take the middle\n    if (values.length % 2) {\n        return values[middle];\n    }\n\n    // Even length; take the average of the two middle\n    const a = values[middle - 1], b = values[middle];\n\n    if (maxDelta != null && Math.abs(a - b) > maxDelta) {\n        return null;\n    }\n\n    return (a + b) / 2;\n}\n\nfunction serialize(value: any): string {\n    if (value === null) {\n        return \"null\";\n    } else if (typeof(value) === \"number\" || typeof(value) === \"boolean\") {\n        return JSON.stringify(value);\n    } else if (typeof(value) === \"string\") {\n        return value;\n    } else if (BigNumber.isBigNumber(value)) {\n        return value.toString();\n    } else if (Array.isArray(value)) {\n        return JSON.stringify(value.map((i) => serialize(i)));\n    } else if (typeof(value) === \"object\") {\n        const keys = Object.keys(value);\n        keys.sort();\n        return \"{\" + keys.map((key) => {\n            let v = value[key];\n            if (typeof(v) === \"function\") {\n                v = \"[function]\";\n            } else {\n                v = serialize(v);\n            }\n            return JSON.stringify(key) + \":\" + v;\n        }).join(\",\") + \"}\";\n    }\n\n    throw new Error(\"unknown value type: \" + typeof(value));\n}\n\n// Next request ID to use for emitting debug info\nlet nextRid = 1;\n\n\nexport interface FallbackProviderConfig {\n    // The Provider\n    provider: Provider;\n\n    // The priority to favour this Provider; lower values are used first (higher priority)\n    priority?: number;\n\n    // Timeout before also triggering the next provider; this does not stop\n    // this provider and if its result comes back before a quorum is reached\n    // it will be incorporated into the vote\n    // - lower values will cause more network traffic but may result in a\n    //   faster result.\n    stallTimeout?: number;\n\n    // How much this provider contributes to the quorum; sometimes a specific\n    // provider may be more reliable or trustworthy than others, but usually\n    // this should be left as the default\n    weight?: number;\n};\n\n// A Staller is used to provide a delay to give a Provider a chance to response\n// before asking the next Provider to try.\ntype Staller = {\n    wait: (func: () => void) => Promise<void>\n    getPromise: () => Promise<void>,\n    cancel: () => void\n};\n\nfunction stall(duration: number): Staller {\n    let cancel: () => void = null;\n\n    let timer: NodeJS.Timer = null;\n    let promise = <Promise<void>>(new Promise((resolve) => {\n        cancel = function() {\n            if (timer) {\n                clearTimeout(timer);\n                timer = null;\n            }\n            resolve();\n        }\n        timer = setTimeout(cancel, duration);\n    }));\n\n    const wait = (func: () => void) => {\n        promise = promise.then(func);\n        return promise;\n    }\n\n    function getPromise(): Promise<void> {\n        return promise;\n    }\n\n    return { cancel, getPromise, wait };\n}\n\nconst ForwardErrors = [\n    Logger.errors.CALL_EXCEPTION,\n    Logger.errors.INSUFFICIENT_FUNDS,\n    Logger.errors.NONCE_EXPIRED,\n    Logger.errors.REPLACEMENT_UNDERPRICED,\n    Logger.errors.UNPREDICTABLE_GAS_LIMIT\n];\n\nconst ForwardProperties = [\n    \"address\",\n    \"args\",\n    \"errorArgs\",\n    \"errorSignature\",\n    \"method\",\n    \"transaction\",\n];\n\n\n// @TODO: Make this an object with staller and cancel built-in\ninterface RunningConfig extends FallbackProviderConfig {\n    start?: number;\n    done?: boolean;\n    cancelled?: boolean;\n    runner?: Promise<any>;\n    staller?: Staller;\n    result?: any;\n    error?: Error;\n};\n\nfunction exposeDebugConfig(config: RunningConfig, now?: number): any {\n    const result: any = {\n        weight: config.weight\n    };\n    Object.defineProperty(result, \"provider\", { get: () => config.provider });\n    if (config.start) { result.start = config.start; }\n    if (now) { result.duration = (now - config.start); }\n    if (config.done) {\n        if (config.error) {\n            result.error = config.error;\n        } else {\n            result.result = config.result || null;\n        }\n    }\n    return result;\n}\n\nfunction normalizedTally(normalize: (value: any) => string, quorum: number): (configs: Array<RunningConfig>) => any {\n    return function(configs: Array<RunningConfig>): any {\n\n        // Count the votes for each result\n        const tally: { [ key: string]: { count: number, result: any } } = { };\n        configs.forEach((c) => {\n            const value = normalize(c.result);\n            if (!tally[value]) { tally[value] = { count: 0, result: c.result }; }\n            tally[value].count++;\n        });\n\n        // Check for a quorum on any given result\n        const keys = Object.keys(tally);\n        for (let i = 0; i < keys.length; i++) {\n            const check = tally[keys[i]];\n            if (check.count >= quorum) {\n                return check.result;\n            }\n        }\n\n        // No quroum\n        return undefined;\n    }\n}\nfunction getProcessFunc(provider: FallbackProvider, method: string, params: { [ key: string ]: any }): (configs: Array<RunningConfig>) => any {\n\n    let normalize = serialize;\n\n    switch (method) {\n        case \"getBlockNumber\":\n            // Return the median value, unless there is (median + 1) is also\n            // present, in which case that is probably true and the median\n            // is going to be stale soon. In the event of a malicious node,\n            // the lie will be true soon enough.\n            return function(configs: Array<RunningConfig>): number {\n                const values = configs.map((c) => c.result);\n\n                // Get the median block number\n                let blockNumber = median(configs.map((c) => c.result), 2);\n                if (blockNumber == null) { return undefined; }\n\n                blockNumber = Math.ceil(blockNumber);\n\n                // If the next block height is present, its prolly safe to use\n                if (values.indexOf(blockNumber + 1) >= 0) { blockNumber++; }\n\n                // Don't ever roll back the blockNumber\n                if (blockNumber >= provider._highestBlockNumber) {\n                    provider._highestBlockNumber = blockNumber;\n                }\n\n                return provider._highestBlockNumber;\n            };\n\n        case \"getGasPrice\":\n            // Return the middle (round index up) value, similar to median\n            // but do not average even entries and choose the higher.\n            // Malicious actors must compromise 50% of the nodes to lie.\n            return function(configs: Array<RunningConfig>): BigNumber {\n                const values = configs.map((c) => c.result);\n                values.sort();\n                return values[Math.floor(values.length / 2)];\n            }\n\n        case \"getEtherPrice\":\n            // Returns the median price. Malicious actors must compromise at\n            // least 50% of the nodes to lie (in a meaningful way).\n            return function(configs: Array<RunningConfig>): number {\n                return median(configs.map((c) => c.result));\n            }\n\n        // No additional normalizing required; serialize is enough\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n        case \"getStorageAt\":\n        case \"call\":\n        case \"estimateGas\":\n        case \"getLogs\":\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            normalize = function(tx: any): string {\n                if (tx == null) { return null; }\n\n                tx = shallowCopy(tx);\n                tx.confirmations = -1;\n                return serialize(tx);\n            }\n            break;\n\n        // We drop the confirmations from transactions as it is approximate\n        case \"getBlock\":\n            // We drop the confirmations from transactions as it is approximate\n            if (params.includeTransactions) {\n                normalize = function(block: BlockWithTransactions): string {\n                    if (block == null) { return null; }\n\n                    block = shallowCopy(block);\n                    block.transactions = block.transactions.map((tx) => {\n                        tx = shallowCopy(tx);\n                        tx.confirmations = -1;\n                        return tx;\n                    });\n                    return serialize(block);\n                };\n            } else {\n                normalize = function(block: Block): string {\n                    if (block == null) { return null; }\n                    return serialize(block);\n                }\n            }\n            break;\n\n        default:\n            throw new Error(\"unknown method: \" + method);\n    }\n\n    // Return the result if and only if the expected quorum is\n    // satisfied and agreed upon for the final result.\n    return normalizedTally(normalize, provider.quorum);\n\n}\n\n// If we are doing a blockTag query, we need to make sure the backend is\n// caught up to the FallbackProvider, before sending a request to it.\nasync function waitForSync(config: RunningConfig, blockNumber: number): Promise<BaseProvider> {\n    const provider = <BaseProvider>(config.provider);\n\n    if ((provider.blockNumber != null && provider.blockNumber >= blockNumber) || blockNumber === -1) {\n        return provider;\n    }\n\n    return poll(() => {\n        return new Promise((resolve, reject) => {\n            setTimeout(function() {\n\n                // We are synced\n                if (provider.blockNumber >= blockNumber) { return resolve(provider); }\n\n                // We're done; just quit\n                if (config.cancelled) { return resolve(null); }\n\n                // Try again, next block\n                return resolve(undefined);\n            }, 0);\n        });\n    }, { oncePoll: provider });\n}\n\nasync function getRunner(config: RunningConfig, currentBlockNumber: number, method: string, params: { [ key: string]: any }): Promise<any> {\n    let provider = config.provider;\n\n    switch (method) {\n        case \"getBlockNumber\":\n        case \"getGasPrice\":\n            return provider[method]();\n        case \"getEtherPrice\":\n            if ((<any>provider).getEtherPrice) {\n                return (<any>provider).getEtherPrice();\n            }\n            break;\n        case \"getBalance\":\n        case \"getTransactionCount\":\n        case \"getCode\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.address, params.blockTag || \"latest\");\n        case \"getStorageAt\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getStorageAt(params.address, params.position, params.blockTag || \"latest\");\n        case \"getBlock\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[(params.includeTransactions ? \"getBlockWithTransactions\": \"getBlock\")](params.blockTag || params.blockHash);\n        case \"call\":\n        case \"estimateGas\":\n            if (params.blockTag && isHexString(params.blockTag)) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider[method](params.transaction);\n        case \"getTransaction\":\n        case \"getTransactionReceipt\":\n            return provider[method](params.transactionHash);\n        case \"getLogs\": {\n            let filter = params.filter;\n            if ((filter.fromBlock && isHexString(filter.fromBlock)) || (filter.toBlock && isHexString(filter.toBlock))) {\n                provider = await waitForSync(config, currentBlockNumber)\n            }\n            return provider.getLogs(filter);\n        }\n    }\n\n    return logger.throwError(\"unknown method error\", Logger.errors.UNKNOWN_ERROR, {\n        method: method,\n        params: params\n    });\n}\n\nexport class FallbackProvider extends BaseProvider {\n    readonly providerConfigs: ReadonlyArray<FallbackProviderConfig>;\n    readonly quorum: number;\n\n    // Due to the highly asyncronous nature of the blockchain, we need\n    // to make sure we never unroll the blockNumber due to our random\n    // sample of backends\n    _highestBlockNumber: number;\n\n    constructor(providers: Array<Provider | FallbackProviderConfig>, quorum?: number) {\n        logger.checkNew(new.target, FallbackProvider);\n\n        if (providers.length === 0) {\n            logger.throwArgumentError(\"missing providers\", \"providers\", providers);\n        }\n\n        const providerConfigs: Array<FallbackProviderConfig> = providers.map((configOrProvider, index) => {\n            if (Provider.isProvider(configOrProvider)) {\n                const stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n                const priority = 1;\n                return Object.freeze({ provider: configOrProvider, weight: 1, stallTimeout, priority });\n            }\n\n            const config: FallbackProviderConfig = shallowCopy(configOrProvider);\n\n            if (config.priority == null) { config.priority = 1; }\n            if (config.stallTimeout == null) {\n                config.stallTimeout = isCommunityResource(configOrProvider) ? 2000: 750;\n            }\n            if (config.weight == null) { config.weight = 1; }\n\n            const weight = config.weight;\n            if (weight % 1 || weight > 512 || weight < 1) {\n                logger.throwArgumentError(\"invalid weight; must be integer in [1, 512]\", `providers[${ index }].weight`, weight);\n            }\n\n            return Object.freeze(config);\n        });\n\n        const total = providerConfigs.reduce((accum, c) => (accum + c.weight), 0);\n\n        if (quorum == null) {\n            quorum = total / 2;\n        } else if (quorum > total) {\n            logger.throwArgumentError(\"quorum will always fail; larger than total weight\", \"quorum\", quorum);\n        }\n\n        // Are all providers' networks are known\n        let networkOrReady: Network | Promise<Network> = checkNetworks(providerConfigs.map((c) => (<any>(c.provider)).network));\n\n        // Not all networks are known; we must stall\n        if (networkOrReady == null) {\n            networkOrReady = new Promise((resolve, reject) => {\n                setTimeout(() => {\n                    this.detectNetwork().then(resolve, reject);\n                }, 0);\n            });\n        }\n\n        super(networkOrReady);\n\n        // Preserve a copy, so we do not get mutated\n        defineReadOnly(this, \"providerConfigs\", Object.freeze(providerConfigs));\n        defineReadOnly(this, \"quorum\", quorum);\n\n        this._highestBlockNumber = -1;\n    }\n\n    async detectNetwork(): Promise<Network> {\n        const networks = await Promise.all(this.providerConfigs.map((c) => c.provider.getNetwork()));\n        return checkNetworks(networks);\n    }\n\n    async perform(method: string, params: { [name: string]: any }): Promise<any> {\n        // Sending transactions is special; always broadcast it to all backends\n        if (method === \"sendTransaction\") {\n            const results: Array<string | Error> = await Promise.all(this.providerConfigs.map((c) => {\n                return c.provider.sendTransaction(params.signedTransaction).then((result) => {\n                    return result.hash;\n                }, (error) => {\n                    return error;\n                });\n            }));\n\n            // Any success is good enough (other errors are likely \"already seen\" errors\n            for (let i = 0; i < results.length; i++) {\n                const result = results[i];\n                if (typeof(result) === \"string\") { return result; }\n            }\n\n            // They were all an error; pick the first error\n            throw results[0];\n        }\n\n        // We need to make sure we are in sync with our backends, so we need\n        // to know this before we can make a lot of calls\n        if (this._highestBlockNumber === -1 && method !== \"getBlockNumber\") {\n            await this.getBlockNumber();\n        }\n\n        const processFunc = getProcessFunc(this, method, params);\n\n        // Shuffle the providers and then sort them by their priority; we\n        // shallowCopy them since we will store the result in them too\n        const configs: Array<RunningConfig> = shuffled(this.providerConfigs.map(shallowCopy));\n        configs.sort((a, b) => (a.priority - b.priority));\n\n        const currentBlockNumber = this._highestBlockNumber;\n\n        let i = 0;\n        let first = true;\n        while (true) {\n            const t0 = now();\n\n            // Compute the inflight weight (exclude anything past)\n            let inflightWeight = configs.filter((c) => (c.runner && ((t0 - c.start) < c.stallTimeout)))\n                                        .reduce((accum, c) => (accum + c.weight), 0);\n\n            // Start running enough to meet quorum\n            while (inflightWeight < this.quorum && i < configs.length) {\n                const config = configs[i++];\n\n                const rid = nextRid++;\n\n                config.start = now();\n                config.staller = stall(config.stallTimeout);\n                config.staller.wait(() => { config.staller = null; });\n\n                config.runner = getRunner(config, currentBlockNumber, method, params).then((result) => {\n                    config.done = true;\n                    config.result = result;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                     }\n\n                }, (error) => {\n                    config.done = true;\n                    config.error = error;\n\n                    if (this.listenerCount(\"debug\")) {\n                        this.emit(\"debug\", {\n                            action: \"request\",\n                            rid: rid,\n                            backend: exposeDebugConfig(config, now()),\n                            request: { method: method, params: deepCopy(params) },\n                            provider: this\n                        });\n                    }\n                });\n\n                if (this.listenerCount(\"debug\")) {\n                    this.emit(\"debug\", {\n                        action: \"request\",\n                        rid: rid,\n                        backend: exposeDebugConfig(config, null),\n                        request: { method: method, params: deepCopy(params) },\n                        provider: this\n                    });\n                }\n\n                inflightWeight += config.weight;\n            }\n\n            // Wait for anything meaningful to finish or stall out\n            const waiting: Array<Promise<any>> = [ ];\n            configs.forEach((c) => {\n                if (c.done || !c.runner) { return; }\n                waiting.push(c.runner);\n                if (c.staller) { waiting.push(c.staller.getPromise()); }\n            });\n\n            if (waiting.length) { await Promise.race(waiting); }\n\n            // Check the quorum and process the results; the process function\n            // may additionally decide the quorum is not met\n            const results = configs.filter((c) => (c.done && c.error == null));\n            if (results.length >= this.quorum) {\n                const result = processFunc(results);\n                if (result !== undefined) {\n                    // Shut down any stallers\n                    configs.forEach(c => {\n                        if (c.staller) { c.staller.cancel(); }\n                        c.cancelled = true;\n                    });\n                    return result;\n                }\n                if (!first) { await stall(100).getPromise(); }\n                first = false;\n            }\n\n            // No result, check for errors that should be forwarded\n            const errors = configs.reduce((accum, c) => {\n                if (!c.done || c.error == null) { return accum; }\n\n                const code = (<any>(c.error)).code;\n                if (ForwardErrors.indexOf(code) >= 0) {\n                    if (!accum[code]) { accum[code] = { error: c.error, weight: 0 }; }\n                    accum[code].weight += c.weight;\n                }\n\n                return accum;\n            }, <{ [ code: string ]: { error: Error, weight: number } }>({ }));\n\n            Object.keys(errors).forEach((errorCode: string) => {\n                const tally = errors[errorCode];\n                if (tally.weight < this.quorum) { return; }\n\n                // Shut down any stallers\n                configs.forEach(c => {\n                    if (c.staller) { c.staller.cancel(); }\n                    c.cancelled = true;\n                });\n\n                const e = <any>(tally.error);\n\n                const props: { [ name: string ]: any } = { };\n                ForwardProperties.forEach((name) => {\n                    if (e[name] == null) { return; }\n                    props[name] = e[name];\n                });\n\n                logger.throwError(e.reason || e.message, <any>errorCode, props);\n            });\n\n            // All configs have run to completion; we will never get more data\n            if (configs.filter((c) => !c.done).length === 0) { break; }\n        }\n\n        // Shut down any stallers; shouldn't be any\n        configs.forEach(c => {\n            if (c.staller) { c.staller.cancel(); }\n            c.cancelled = true;\n        });\n\n        return logger.throwError(\"failed to meet quorum\", Logger.errors.SERVER_ERROR, {\n            method: method,\n            params: params,\n            //results: configs.map((c) => c.result),\n            //errors: configs.map((c) => c.error),\n            results: configs.map((c) => exposeDebugConfig(c)),\n            provider: this\n        });\n    }\n}\n","\"use strict\";\n\nconst IpcProvider: any = null;\n\nexport {\n    IpcProvider\n};\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { defineReadOnly } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { CommunityResourcable, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n\nconst defaultProjectId = \"84842078b09946638c03157f83405213\"\n\nexport class InfuraWebSocketProvider extends WebSocketProvider implements CommunityResourcable {\n    readonly apiKey: string;\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        const provider = new InfuraProvider(network, apiKey);\n        const connection = provider.connection;\n        if (connection.password) {\n            logger.throwError(\"INFURA WebSocket project secrets unsupported\", Logger.errors.UNSUPPORTED_OPERATION, {\n                operation: \"InfuraProvider.getWebSocketProvider()\"\n            });\n        }\n\n        const url = connection.url.replace(/^http/i, \"ws\").replace(\"/v3/\", \"/ws/v3/\");\n        super(url, network);\n\n        defineReadOnly(this, \"apiKey\", provider.projectId);\n        defineReadOnly(this, \"projectId\", provider.projectId);\n        defineReadOnly(this, \"projectSecret\", provider.projectSecret);\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n\nexport class InfuraProvider extends UrlJsonRpcProvider {\n    readonly projectId: string;\n    readonly projectSecret: string;\n\n    static getWebSocketProvider(network?: Networkish, apiKey?: any): InfuraWebSocketProvider {\n        return new InfuraWebSocketProvider(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        const apiKeyObj: { apiKey: string, projectId: string, projectSecret: string } = {\n            apiKey: defaultProjectId,\n            projectId: defaultProjectId,\n            projectSecret: null\n        };\n\n        if (apiKey == null) { return apiKeyObj; }\n\n        if (typeof(apiKey) === \"string\") {\n            apiKeyObj.projectId = apiKey;\n\n        } else if (apiKey.projectSecret != null) {\n            logger.assertArgument((typeof(apiKey.projectId) === \"string\"),\n                \"projectSecret requires a projectId\", \"projectId\", apiKey.projectId);\n            logger.assertArgument((typeof(apiKey.projectSecret) === \"string\"),\n                \"invalid projectSecret\", \"projectSecret\", \"[REDACTED]\");\n\n            apiKeyObj.projectId = apiKey.projectId;\n            apiKeyObj.projectSecret = apiKey.projectSecret;\n\n        } else if (apiKey.projectId) {\n            apiKeyObj.projectId = apiKey.projectId;\n        }\n\n        apiKeyObj.apiKey = apiKeyObj.projectId;\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch(network ? network.name: \"unknown\") {\n            case \"homestead\":\n                host = \"mainnet.infura.io\";\n                break;\n            case \"ropsten\":\n                host = \"ropsten.infura.io\";\n                break;\n            case \"rinkeby\":\n                host = \"rinkeby.infura.io\";\n                break;\n            case \"kovan\":\n                host = \"kovan.infura.io\";\n                break;\n            case \"goerli\":\n                host = \"goerli.infura.io\";\n                break;\n            case \"matic\":\n                host = \"polygon-mainnet.infura.io\";\n                break;\n            case \"maticmum\":\n                host = \"polygon-mumbai.infura.io\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        const connection: ConnectionInfo = {\n            allowGzip: true,\n            url: (\"https:/\" + \"/\" + host + \"/v3/\" + apiKey.projectId),\n            throttleCallback: (attempt: number, url: string) => {\n                if (apiKey.projectId === defaultProjectId) {\n                    showThrottleMessage();\n                }\n                return Promise.resolve(true);\n            }\n        };\n\n        if (apiKey.projectSecret != null) {\n            connection.user = \"\";\n            connection.password = apiKey.projectSecret\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.projectId === defaultProjectId);\n    }\n}\n","\nimport { deepCopy } from \"@ethersproject/properties\";\nimport { fetchJson } from \"@ethersproject/web\";\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Experimental\n\nexport class JsonRpcBatchProvider extends JsonRpcProvider {\n    _pendingBatchAggregator: NodeJS.Timer;\n    _pendingBatch: Array<{\n        request: { method: string, params: Array<any>, id: number, jsonrpc: \"2.0\" },\n        resolve: (result: any) => void,\n        reject: (error: Error) => void\n    }>;\n\n    send(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (this._nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        if (this._pendingBatch == null) {\n            this._pendingBatch = [ ];\n        }\n\n        const inflightRequest: any = { request, resolve: null, reject: null };\n\n        const promise = new Promise((resolve, reject) => {\n            inflightRequest.resolve = resolve;\n            inflightRequest.reject = reject;\n        });\n\n        this._pendingBatch.push(inflightRequest);\n\n        if (!this._pendingBatchAggregator) {\n            // Schedule batch for next event loop + short duration\n            this._pendingBatchAggregator = setTimeout(() => {\n\n                // Get teh current batch and clear it, so new requests\n                // go into the next batch\n                const batch = this._pendingBatch;\n                this._pendingBatch = null;\n                this._pendingBatchAggregator = null;\n\n                // Get the request as an array of requests\n                const request = batch.map((inflight) => inflight.request);\n\n                this.emit(\"debug\", {\n                    action: \"requestBatch\",\n                    request: deepCopy(request),\n                    provider: this\n                });\n\n                return fetchJson(this.connection, JSON.stringify(request)).then((result) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        request: request,\n                        response: result,\n                        provider: this\n                    });\n\n                    // For each result, feed it to the correct Promise, depending\n                    // on whether it was a success or error\n                    batch.forEach((inflightRequest, index) => {\n                        const payload = result[index];\n                        if (payload.error) {\n                            const error = new Error(payload.error.message);\n                            (<any>error).code = payload.error.code;\n                            (<any>error).data = payload.error.data;\n                            inflightRequest.reject(error);\n                        } else {\n                            inflightRequest.resolve(payload.result);\n                        }\n                    });\n\n                }, (error) => {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        error: error,\n                        request: request,\n                        provider: this\n                    });\n\n                    batch.forEach((inflightRequest) => {\n                        inflightRequest.reject(error);\n                    });\n                });\n\n            }, 10);\n        }\n\n        return promise;\n    }\n}\n","/* istanbul ignore file */\n\n\"use strict\";\n\nimport { Network } from \"@ethersproject/networks\";\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n// Special API key provided by Nodesmith for ethers.js\nconst defaultApiKey = \"ETHERS_JS_SHARED\";\n\nexport class NodesmithProvider extends UrlJsonRpcProvider {\n\n    static getApiKey(apiKey: any): any {\n        if (apiKey && typeof(apiKey) !== \"string\") {\n            logger.throwArgumentError(\"invalid apiKey\", \"apiKey\", apiKey);\n        }\n        return apiKey || defaultApiKey;\n    }\n\n    static getUrl(network: Network, apiKey?: any): string {\n        logger.warn(\"NodeSmith will be discontinued on 2019-12-20; please migrate to another platform.\");\n\n        let host = null;\n        switch (network.name) {\n            case \"homestead\":\n                host = \"https://ethereum.api.nodesmith.io/v1/mainnet/jsonrpc\";\n                break;\n            case \"ropsten\":\n                host = \"https://ethereum.api.nodesmith.io/v1/ropsten/jsonrpc\";\n                break;\n            case \"rinkeby\":\n                host = \"https://ethereum.api.nodesmith.io/v1/rinkeby/jsonrpc\";\n                break;\n            case \"goerli\":\n                host = \"https://ethereum.api.nodesmith.io/v1/goerli/jsonrpc\";\n                break;\n            case \"kovan\":\n                host = \"https://ethereum.api.nodesmith.io/v1/kovan/jsonrpc\";\n                break;\n            default:\n               logger.throwArgumentError(\"unsupported network\", \"network\", arguments[0]);\n        }\n\n        return (host + \"?apiKey=\" + apiKey);\n    }\n}\n","\"use strict\";\n\nimport { Network, Networkish } from \"@ethersproject/networks\";\nimport { getStatic } from \"@ethersproject/properties\";\nimport { ConnectionInfo } from \"@ethersproject/web\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\n\n// These are load-balancer-based application IDs\nconst defaultApplicationIds: Record<string, string> = {\n    homestead: \"6004bcd10040261633ade990\",\n    ropsten: \"6004bd4d0040261633ade991\",\n    rinkeby: \"6004bda20040261633ade994\",\n    goerli: \"6004bd860040261633ade992\",\n};\n\nexport class PocketProvider extends UrlJsonRpcProvider {\n    readonly applicationId: string;\n    readonly applicationSecretKey: string;\n    readonly loadBalancer: boolean;\n\n    constructor(network?: Networkish, apiKey?: any) {\n        // We need a bit of creativity in the constructor because\n        // Pocket uses different default API keys based on the network\n\n        if (apiKey == null) {\n            const n = getStatic<(network: Networkish) => Network>(new.target, \"getNetwork\")(network);\n            if (n) {\n                const applicationId = defaultApplicationIds[n.name];\n                if (applicationId) {\n                    apiKey = {\n                        applicationId: applicationId,\n                        loadBalancer: true\n                    };\n                }\n            }\n\n            // If there was any issue above, we don't know this network\n            if (apiKey == null) {\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n            }\n\n        }\n\n        super(network, apiKey);\n    }\n\n    static getApiKey(apiKey: any): any {\n        // Most API Providers allow null to get the default configuration, but\n        // Pocket requires the network to decide the default provider, so we\n        // rely on hijacking the constructor to add a sensible default for us\n\n        if (apiKey == null) {\n            logger.throwArgumentError(\"PocketProvider.getApiKey does not support null apiKey\", \"apiKey\", apiKey);\n        }\n\n        const apiKeyObj: { applicationId: string, applicationSecretKey: string, loadBalancer: boolean } = {\n            applicationId: null,\n            loadBalancer: false,\n            applicationSecretKey: null\n        };\n\n        // Parse applicationId and applicationSecretKey\n        if (typeof (apiKey) === \"string\") {\n            apiKeyObj.applicationId = apiKey;\n\n        } else if (apiKey.applicationSecretKey != null) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"applicationSecretKey requires an applicationId\", \"applicationId\", apiKey.applicationId);\n            logger.assertArgument((typeof (apiKey.applicationSecretKey) === \"string\"),\n                \"invalid applicationSecretKey\", \"applicationSecretKey\", \"[REDACTED]\");\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.applicationSecretKey = apiKey.applicationSecretKey;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else if (apiKey.applicationId) {\n            logger.assertArgument((typeof (apiKey.applicationId) === \"string\"),\n                \"apiKey.applicationId must be a string\", \"apiKey.applicationId\", apiKey.applicationId);\n\n            apiKeyObj.applicationId = apiKey.applicationId;\n            apiKeyObj.loadBalancer = !!apiKey.loadBalancer;\n\n        } else {\n            logger.throwArgumentError(\"unsupported PocketProvider apiKey\", \"apiKey\", apiKey);\n        }\n\n        return apiKeyObj;\n    }\n\n    static getUrl(network: Network, apiKey: any): ConnectionInfo {\n        let host: string = null;\n        switch (network ? network.name : \"unknown\") {\n            case \"homestead\":\n                host = \"eth-mainnet.gateway.pokt.network\";\n                break;\n            case \"ropsten\":\n                host = \"eth-ropsten.gateway.pokt.network\";\n                break;\n            case \"rinkeby\":\n                host = \"eth-rinkeby.gateway.pokt.network\";\n                break;\n            case \"goerli\":\n                host = \"eth-goerli.gateway.pokt.network\";\n                break;\n            default:\n                logger.throwError(\"unsupported network\", Logger.errors.INVALID_ARGUMENT, {\n                    argument: \"network\",\n                    value: network\n                });\n        }\n\n        let url = null;\n        if (apiKey.loadBalancer) {\n            url = `https:/\\/${ host }/v1/lb/${ apiKey.applicationId }`\n        } else {\n            url = `https:/\\/${ host }/v1/${ apiKey.applicationId }`\n        }\n\n        const connection: ConnectionInfo = { url };\n\n        // Initialize empty headers\n        connection.headers = {}\n\n        // Apply application secret key\n        if (apiKey.applicationSecretKey != null) {\n            connection.user = \"\";\n            connection.password = apiKey.applicationSecretKey\n        }\n\n        return connection;\n    }\n\n    isCommunityResource(): boolean {\n        return (this.applicationId === defaultApplicationIds[this.network.name]);\n    }\n}\n","\"use strict\";\n\nimport { Networkish } from \"@ethersproject/networks\";\nimport { deepCopy, defineReadOnly } from \"@ethersproject/properties\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\nimport { JsonRpcProvider } from \"./json-rpc-provider\";\n\n// Exported Types\nexport type ExternalProvider = {\n    isMetaMask?: boolean;\n    isStatus?: boolean;\n    host?: string;\n    path?: string;\n    sendAsync?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    send?: (request: { method: string, params?: Array<any> }, callback: (error: any, response: any) => void) => void\n    request?: (request: { method: string, params?: Array<any> }) => Promise<any>\n}\n\nlet _nextId = 1;\n\nexport type JsonRpcFetchFunc = (method: string, params?: Array<any>) => Promise<any>;\n\ntype Web3LegacySend = (request: any, callback: (error: Error, response: any) => void) => void;\n\nfunction buildWeb3LegacyFetcher(provider: ExternalProvider, sendFunc: Web3LegacySend) : JsonRpcFetchFunc {\n    const fetcher = \"Web3LegacyFetcher\";\n\n    return function(method: string, params: Array<any>): Promise<any> {\n        const request = {\n            method: method,\n            params: params,\n            id: (_nextId++),\n            jsonrpc: \"2.0\"\n        };\n\n        return new Promise((resolve, reject) => {\n            this.emit(\"debug\", {\n                action: \"request\",\n                fetcher,\n                request: deepCopy(request),\n                provider: this\n            });\n\n            sendFunc(request, (error, response) => {\n\n                if (error) {\n                    this.emit(\"debug\", {\n                        action: \"response\",\n                        fetcher,\n                        error,\n                        request,\n                        provider: this\n                    });\n\n                    return reject(error);\n                }\n\n                this.emit(\"debug\", {\n                    action: \"response\",\n                    fetcher,\n                    request,\n                    response,\n                    provider: this\n                });\n\n                if (response.error) {\n                    const error = new Error(response.error.message);\n                    (<any>error).code = response.error.code;\n                    (<any>error).data = response.error.data;\n                    return reject(error);\n                }\n\n                resolve(response.result);\n            });\n        });\n    }\n}\n\nfunction buildEip1193Fetcher(provider: ExternalProvider): JsonRpcFetchFunc {\n    return function(method: string, params: Array<any>): Promise<any> {\n        if (params == null) { params = [ ]; }\n\n        const request = { method, params };\n\n        this.emit(\"debug\", {\n            action: \"request\",\n            fetcher: \"Eip1193Fetcher\",\n            request: deepCopy(request),\n            provider: this\n        });\n\n        return provider.request(request).then((response) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                response,\n                provider: this\n            });\n\n            return response;\n\n        }, (error) => {\n            this.emit(\"debug\", {\n                action: \"response\",\n                fetcher: \"Eip1193Fetcher\",\n                request,\n                error,\n                provider: this\n            });\n\n            throw error;\n        });\n    }\n}\n\nexport class Web3Provider extends JsonRpcProvider {\n    readonly provider: ExternalProvider;\n    readonly jsonRpcFetchFunc: JsonRpcFetchFunc;\n\n    constructor(provider: ExternalProvider | JsonRpcFetchFunc, network?: Networkish) {\n        logger.checkNew(new.target, Web3Provider);\n\n        if (provider == null) {\n            logger.throwArgumentError(\"missing provider\", \"provider\", provider);\n        }\n\n        let path: string = null;\n        let jsonRpcFetchFunc: JsonRpcFetchFunc = null;\n        let subprovider: ExternalProvider = null;\n\n        if (typeof(provider) === \"function\") {\n            path = \"unknown:\";\n            jsonRpcFetchFunc = provider;\n\n        } else {\n            path = provider.host || provider.path || \"\";\n            if (!path && provider.isMetaMask) {\n                path = \"metamask\";\n            }\n\n            subprovider = provider;\n\n            if (provider.request) {\n                if (path === \"\") { path = \"eip-1193:\"; }\n                jsonRpcFetchFunc = buildEip1193Fetcher(provider);\n            } else if (provider.sendAsync) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.sendAsync.bind(provider));\n            } else if (provider.send) {\n                jsonRpcFetchFunc = buildWeb3LegacyFetcher(provider, provider.send.bind(provider));\n            } else {\n                logger.throwArgumentError(\"unsupported provider\", \"provider\", provider);\n            }\n\n            if (!path) { path = \"unknown:\"; }\n        }\n\n        super(path, network);\n\n        defineReadOnly(this, \"jsonRpcFetchFunc\", jsonRpcFetchFunc);\n        defineReadOnly(this, \"provider\", subprovider);\n    }\n\n    send(method: string, params: Array<any>): Promise<any> {\n        return this.jsonRpcFetchFunc(method, params);\n    }\n}\n","\"use strict\";\n\nimport {\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    Provider,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse\n} from \"@ethersproject/abstract-provider\";\n\nimport { getNetwork } from \"@ethersproject/networks\";\nimport { Network, Networkish } from \"@ethersproject/networks\";\n\nimport { BaseProvider, EnsProvider, EnsResolver, Resolver } from \"./base-provider\";\n\nimport { AlchemyProvider, AlchemyWebSocketProvider } from \"./alchemy-provider\";\nimport { CloudflareProvider } from \"./cloudflare-provider\";\nimport { EtherscanProvider } from \"./etherscan-provider\";\nimport { FallbackProvider, FallbackProviderConfig } from \"./fallback-provider\";\nimport { IpcProvider } from \"./ipc-provider\";\nimport { InfuraProvider, InfuraWebSocketProvider } from \"./infura-provider\";\nimport { JsonRpcProvider, JsonRpcSigner } from \"./json-rpc-provider\";\nimport { JsonRpcBatchProvider } from \"./json-rpc-batch-provider\";\nimport { NodesmithProvider } from \"./nodesmith-provider\";\nimport { PocketProvider } from \"./pocket-provider\";\nimport { StaticJsonRpcProvider, UrlJsonRpcProvider } from \"./url-json-rpc-provider\";\nimport { Web3Provider } from \"./web3-provider\";\nimport { WebSocketProvider } from \"./websocket-provider\";\nimport { ExternalProvider, JsonRpcFetchFunc } from \"./web3-provider\";\n\nimport { CommunityResourcable, Formatter, isCommunityResourcable, isCommunityResource, showThrottleMessage } from \"./formatter\";\n\nimport { Logger } from \"@ethersproject/logger\";\nimport { version } from \"./_version\";\nconst logger = new Logger(version);\n\n////////////////////////\n// Helper Functions\n\nfunction getDefaultProvider(network?: Networkish, options?: any): BaseProvider {\n    if (network == null) { network = \"homestead\"; }\n\n    // If passed a URL, figure out the right type of provider based on the scheme\n    if (typeof(network) === \"string\") {\n        // @TODO: Add support for IpcProvider; maybe if it ends in \".ipc\"?\n\n        // Handle http and ws (and their secure variants)\n        const match = network.match(/^(ws|http)s?:/i);\n        if (match) {\n            switch (match[1]) {\n                case \"http\":\n                    return new JsonRpcProvider(network);\n                case \"ws\":\n                    return new WebSocketProvider(network);\n                default:\n                    logger.throwArgumentError(\"unsupported URL scheme\", \"network\", network);\n            }\n        }\n    }\n\n    const n = getNetwork(network);\n    if (!n || !n._defaultProvider) {\n        logger.throwError(\"unsupported getDefaultProvider network\", Logger.errors.NETWORK_ERROR, {\n            operation: \"getDefaultProvider\",\n            network: network\n        });\n    }\n\n    return n._defaultProvider({\n        FallbackProvider,\n\n        AlchemyProvider,\n        CloudflareProvider,\n        EtherscanProvider,\n        InfuraProvider,\n        JsonRpcProvider,\n        NodesmithProvider,\n        PocketProvider,\n        Web3Provider,\n\n        IpcProvider,\n    }, options);\n}\n\n////////////////////////\n// Exports\n\nexport {\n\n    // Abstract Providers (or Abstract-ish)\n    Provider,\n    BaseProvider,\n\n    Resolver,\n\n    UrlJsonRpcProvider,\n\n    ///////////////////////\n    // Concrete Providers\n\n    FallbackProvider,\n\n    AlchemyProvider,\n    AlchemyWebSocketProvider,\n    CloudflareProvider,\n    EtherscanProvider,\n    InfuraProvider,\n    InfuraWebSocketProvider,\n    JsonRpcProvider,\n    JsonRpcBatchProvider,\n    NodesmithProvider,\n    PocketProvider,\n    StaticJsonRpcProvider,\n    Web3Provider,\n    WebSocketProvider,\n\n    IpcProvider,\n\n\n    ///////////////////////\n    // Signer\n\n    JsonRpcSigner,\n\n\n    ///////////////////////\n    // Functions\n\n    getDefaultProvider,\n    getNetwork,\n    isCommunityResource,\n    isCommunityResourcable,\n    showThrottleMessage,\n\n\n    ///////////////////////\n    // Objects\n\n    Formatter,\n\n\n    ///////////////////////\n    // Types\n\n    Block,\n    BlockTag,\n    EventType,\n    FeeData,\n    Filter,\n    Log,\n    Listener,\n    TransactionReceipt,\n    TransactionRequest,\n    TransactionResponse,\n\n    ExternalProvider,\n    JsonRpcFetchFunc,\n\n    FallbackProviderConfig,\n\n    Network,\n    Networkish,\n\n    EnsProvider,\n    EnsResolver,\n\n    CommunityResourcable\n};\n\n"],"names":["version","logger","Logger","Formatter","checkNew","this","formats","getDefaultFormats","address","bind","bigNumber","blockTag","data","hash","hex","number","type","transaction","accessList","allowNull","blockHash","blockNumber","transactionIndex","confirmations","from","gasPrice","maxPriorityFeePerGas","maxFeePerGas","gasLimit","to","value","nonce","r","uint256","s","v","creates","raw","transactionRequest","receiptLog","transactionHash","topics","arrayOf","logIndex","receipt","contractAddress","root","gasUsed","logsBloom","logs","cumulativeGasUsed","effectiveGasPrice","status","block","parentHash","timestamp","difficulty","miner","extraData","transactions","baseFeePerGas","blockWithTransactions","shallowCopy","transactionResponse","filter","fromBlock","undefined","toBlock","filterLog","removed","boolean","allowFalsish","accessListify","BigNumber","toNumber","toLowerCase","Error","strict","substring","isHexString","throwArgumentError","result","length","getAddress","hexDataSlice","AddressZero","getContractAddress","hexValue","hexDataLength","error","hexZeroPad","format","author","_difficulty","check","_block","gas","isZero","input","chainId","networkId","parseInt","replace","parseTransaction","byzantium","Array","isArray","map","object","key","checkKey","checkValue","nullValue","replaceValue","array","forEach","push","isCommunityResourcable","isCommunityResource","throttleMessage","showThrottleMessage","console","log","checkTopic","topic","serializeTopics","slice","pop","unique","sorted","Object","keys","sort","join","getEventTag","eventName","indexOf","ForkEvent","isForkEvent","warn","getTime","Date","stall","duration","Promise","resolve","setTimeout","PollableEvents","Event","tag","listener","once","defineReadOnly","split","comps","coinInfos","symbol","p2pkh","p2sh","prefix","ilk","bytes32ify","toHexString","base58Encode","Base58","encode","concat","sha256","matchers","RegExp","_parseString","toUtf8String","_parseBytes","offset","Resolver","provider","name","resolvedAddress","formatter","selector","parameters","tx","hexConcat","namehash","call","code","errors","CALL_EXCEPTION","coinType","hexBytes","coinInfo","String","throwError","UNSUPPORTED_OPERATION","operation","bytes","arrayify","match","words","bech32","unshift","HashZero","callAddress","_fetchBytes","_getAddress","linkage","getText","avatar","i","content","url","_resolvedAddress","owner","addr","tokenId","tokenOwner","balance","toString","metadataUrl","fetchJson","metadata","image","JSON","stringify","ipfs","swarm","keyBytes","toUtf8Bytes","hexlify","defaultFormatter","nextPollId","BaseProvider","network","Provider","_events","_emitted","getFormatter","anyNetwork","detectNetwork","_networkPromise","catch","_ready","knownNetwork","getStatic","emit","_maxInternalBlockNumber","_lastBlockNumber","_pollingInterval","_fastQueryDate","_network","UNKNOWN_ERROR","poll","then","NETWORK_ERROR","event","maxAge","_internalBlockNumber","internalBlockNumber","respTime","reqTime","checkInternalBlockNumber","resolveProperties","perform","networkError","getNetwork","_setFastBlockNumber","pollId","runners","_getInternalBlockNumber","pollingInterval","Math","abs","makeError","previousBlockNumber","eventBlockNumber","runner","getTransactionReceipt","getLogs","all","polling","currentNetwork","_fastBlockNumber","_fastBlockNumberPromise","detectedNetwork","_poller","setInterval","_bootstrapPoll","clearInterval","now","getBlockNumber","timeout","_waitForTransaction","replaceable","reject","cancelFuncs","done","alreadyDone","func","minedHandler","on","removeListener","lastBlockNumber","startBlock","scannedBlock","replaceHandler","__awaiter","getTransactionCount","getTransaction","mined","getBlockWithTransactions","ti","waitForTransaction","reason","eq","TRANSACTION_REPLACED","cancelled","replacement","_wrapTransaction","timer","TIMEOUT","unref","clearTimeout","SERVER_ERROR","method","addressOrName","_getBlockTag","params","position","p","expectedHash","returnedHash","wait","confirms","signedTransaction","t","hexTx","values","_getTransactionRequest","resolveName","blockHashOrBlockTag","includeTransactions","blockWithTxs","oncePoll","_getBlock","_getFilter","_getResolver","ensAddress","getResolver","resolver","reverseName","resolverAddress","nameOrAddress","getAvatar","NOT_IMPLEMENTED","e","pollable","_startEvent","_addEventListener","args","stopped","eventTag","apply","_stopEvent","removeAllListeners","found","errorGas","checkError","message","body","responseText","INSUFFICIENT_FUNDS","NONCE_EXPIRED","REPLACEMENT_UNDERPRICED","UNPREDICTABLE_GAS_LIMIT","getResult","payload","getLowerCase","_constructorGuard","JsonRpcSigner","constructorGuard","addressOrIndex","UncheckedJsonRpcSigner","_address","_index","send","accounts","fromAddress","estimate","estimateGas","sender","constructor","hexlifyTransaction","sendUncheckedTransaction","domain","types","_TypedDataEncoder","resolveNames","populated","getPayload","password","Signer","allowedTransactionKeys","JsonRpcProvider","networkOrReady","freeze","_nextId","_eventLoopCache","_cache","_uncachedDetectNetwork","serverError","getSigner","connectUnchecked","a","request","id","jsonrpc","action","deepCopy","cache","connection","response","getFeeData","feeData","prepareRequest","_startPending","_pendingFilter","self","pendingFilter","filterId","hashes","seq","listenerCount","allowExtra","allowed","checkProperties","WS","WebSocket","NextId","WebSocketProvider","_wsReady","_websocket","onopen","_requests","onmessage","messageEvent","parse","callback","sub","_subs","subscription","processFunc","fauxPoll","_detectNetwork","rid","param","subIdPromise","_subIds","subId","_subscribe","emitReceipt","readyState","CONNECTING","onerror","close","StaticJsonRpcProvider","_super","UrlJsonRpcProvider","apiKey","checkAbstract","defaultApiKey","AlchemyWebSocketProvider","AlchemyProvider","host","arguments","allowGzip","throttleCallback","attempt","CloudflareProvider","getTransactionPostData","maxFeePerGs","set","storageKeys","throttleRetry","getJsonResult","checkLogTag","EtherscanProvider","getBaseUrl","module","query","reduce","accum","baseUrl","apikey","post","getPostUrl","getUrl","getPostData","procFunc","throttleSlotInterval","payloadStr","headers","fetch","txhash","postData","topic0","blocks","getBlock","parseFloat","ethusd","endBlock","startblock","endblock","item","timeStamp","checkNetworks","networks","median","maxDelta","middle","floor","b","serialize","isBigNumber","nextRid","cancel","promise","getPromise","ForwardErrors","ForwardProperties","exposeDebugConfig","config","weight","defineProperty","get","start","getProcessFunc","normalize","configs","c","ceil","_highestBlockNumber","quorum","tally","count","normalizedTally","waitForSync","getRunner","currentBlockNumber","getEtherPrice","getStorageAt","FallbackProvider","providers","providerConfigs","configOrProvider","index","isProvider","stallTimeout","priority","total","sendTransaction","results","shuffled","first","t0","inflightWeight","staller","backend","waiting","race","errorCode","props","IpcProvider","defaultProjectId","InfuraWebSocketProvider","InfuraProvider","projectId","projectSecret","apiKeyObj","assertArgument","INVALID_ARGUMENT","argument","user","JsonRpcBatchProvider","_pendingBatch","inflightRequest","_pendingBatchAggregator","batch","inflight","NodesmithProvider","defaultApplicationIds","homestead","ropsten","rinkeby","goerli","PocketProvider","n","applicationId","loadBalancer","applicationSecretKey","buildWeb3LegacyFetcher","sendFunc","fetcher","Web3Provider","path","jsonRpcFetchFunc","subprovider","isMetaMask","buildEip1193Fetcher","sendAsync","getDefaultProvider","options","_defaultProvider"],"sourceRoot":""}