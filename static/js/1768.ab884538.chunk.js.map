{"version":3,"file":"static/js/1768.ab884538.chunk.js","mappings":"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","sources":["../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/abstract/hash-to-curve.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@noble/curves/src/secp256k1.ts"],"sourcesContent":["function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || val instanceof Uint8Array,\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport type { Group, GroupConstructor, AffinePoint } from './curve.js';\nimport { mod, IField } from './modular.js';\nimport { bytesToNumberBE, CHash, concatBytes, utf8ToBytes, validateObject } from './utils.js';\n\n/**\n * * `DST` is a domain separation tag, defined in section 2.2.5\n * * `p` characteristic of F, where F is a finite field of characteristic p and order q = p^m\n * * `m` is extension degree (1 for prime fields)\n * * `k` is the target security target in bits (e.g. 128), from section 5.1\n * * `expand` is `xmd` (SHA2, SHA3, BLAKE) or `xof` (SHAKE, BLAKE-XOF)\n * * `hash` conforming to `utils.CHash` interface, with `outputLen` / `blockLen` props\n */\ntype UnicodeOrBytes = string | Uint8Array;\nexport type Opts = {\n  DST: UnicodeOrBytes;\n  p: bigint;\n  m: number;\n  k: number;\n  expand: 'xmd' | 'xof';\n  hash: CHash;\n};\n\nfunction validateDST(dst: UnicodeOrBytes): Uint8Array {\n  if (dst instanceof Uint8Array) return dst;\n  if (typeof dst === 'string') return utf8ToBytes(dst);\n  throw new Error('DST must be Uint8Array or string');\n}\n\n// Octet Stream to Integer. \"spec\" implementation of os2ip is 2.5x slower vs bytesToNumberBE.\nconst os2ip = bytesToNumberBE;\n\n// Integer to Octet Stream (numberToBytesBE)\nfunction i2osp(value: number, length: number): Uint8Array {\n  if (value < 0 || value >= 1 << (8 * length)) {\n    throw new Error(`bad I2OSP call: value=${value} length=${length}`);\n  }\n  const res = Array.from({ length }).fill(0) as number[];\n  for (let i = length - 1; i >= 0; i--) {\n    res[i] = value & 0xff;\n    value >>>= 8;\n  }\n  return new Uint8Array(res);\n}\n\nfunction strxor(a: Uint8Array, b: Uint8Array): Uint8Array {\n  const arr = new Uint8Array(a.length);\n  for (let i = 0; i < a.length; i++) {\n    arr[i] = a[i] ^ b[i];\n  }\n  return arr;\n}\n\nfunction isBytes(item: unknown): void {\n  if (!(item instanceof Uint8Array)) throw new Error('Uint8Array expected');\n}\nfunction isNum(item: unknown): void {\n  if (!Number.isSafeInteger(item)) throw new Error('number expected');\n}\n\n// Produces a uniformly random byte string using a cryptographic hash function H that outputs b bits\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.1\nexport function expand_message_xmd(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  if (DST.length > 255) DST = H(concatBytes(utf8ToBytes('H2C-OVERSIZE-DST-'), DST));\n  const { outputLen: b_in_bytes, blockLen: r_in_bytes } = H;\n  const ell = Math.ceil(lenInBytes / b_in_bytes);\n  if (ell > 255) throw new Error('Invalid xmd length');\n  const DST_prime = concatBytes(DST, i2osp(DST.length, 1));\n  const Z_pad = i2osp(0, r_in_bytes);\n  const l_i_b_str = i2osp(lenInBytes, 2); // len_in_bytes_str\n  const b = new Array<Uint8Array>(ell);\n  const b_0 = H(concatBytes(Z_pad, msg, l_i_b_str, i2osp(0, 1), DST_prime));\n  b[0] = H(concatBytes(b_0, i2osp(1, 1), DST_prime));\n  for (let i = 1; i <= ell; i++) {\n    const args = [strxor(b_0, b[i - 1]), i2osp(i + 1, 1), DST_prime];\n    b[i] = H(concatBytes(...args));\n  }\n  const pseudo_random_bytes = concatBytes(...b);\n  return pseudo_random_bytes.slice(0, lenInBytes);\n}\n\n// Produces a uniformly random byte string using an extendable-output function (XOF) H.\n// 1. The collision resistance of H MUST be at least k bits.\n// 2. H MUST be an XOF that has been proved indifferentiable from\n//    a random oracle under a reasonable cryptographic assumption.\n// https://www.rfc-editor.org/rfc/rfc9380#section-5.3.2\nexport function expand_message_xof(\n  msg: Uint8Array,\n  DST: Uint8Array,\n  lenInBytes: number,\n  k: number,\n  H: CHash\n): Uint8Array {\n  isBytes(msg);\n  isBytes(DST);\n  isNum(lenInBytes);\n  // https://www.rfc-editor.org/rfc/rfc9380#section-5.3.3\n  // DST = H('H2C-OVERSIZE-DST-' || a_very_long_DST, Math.ceil((lenInBytes * k) / 8));\n  if (DST.length > 255) {\n    const dkLen = Math.ceil((2 * k) / 8);\n    DST = H.create({ dkLen }).update(utf8ToBytes('H2C-OVERSIZE-DST-')).update(DST).digest();\n  }\n  if (lenInBytes > 65535 || DST.length > 255)\n    throw new Error('expand_message_xof: invalid lenInBytes');\n  return (\n    H.create({ dkLen: lenInBytes })\n      .update(msg)\n      .update(i2osp(lenInBytes, 2))\n      // 2. DST_prime = DST || I2OSP(len(DST), 1)\n      .update(DST)\n      .update(i2osp(DST.length, 1))\n      .digest()\n  );\n}\n\n/**\n * Hashes arbitrary-length byte strings to a list of one or more elements of a finite field F\n * https://www.rfc-editor.org/rfc/rfc9380#section-5.2\n * @param msg a byte string containing the message to hash\n * @param count the number of elements of F to output\n * @param options `{DST: string, p: bigint, m: number, k: number, expand: 'xmd' | 'xof', hash: H}`, see above\n * @returns [u_0, ..., u_(count - 1)], a list of field elements.\n */\nexport function hash_to_field(msg: Uint8Array, count: number, options: Opts): bigint[][] {\n  validateObject(options, {\n    DST: 'stringOrUint8Array',\n    p: 'bigint',\n    m: 'isSafeInteger',\n    k: 'isSafeInteger',\n    hash: 'hash',\n  });\n  const { p, k, m, hash, expand, DST: _DST } = options;\n  isBytes(msg);\n  isNum(count);\n  const DST = validateDST(_DST);\n  const log2p = p.toString(2).length;\n  const L = Math.ceil((log2p + k) / 8); // section 5.1 of ietf draft link above\n  const len_in_bytes = count * m * L;\n  let prb; // pseudo_random_bytes\n  if (expand === 'xmd') {\n    prb = expand_message_xmd(msg, DST, len_in_bytes, hash);\n  } else if (expand === 'xof') {\n    prb = expand_message_xof(msg, DST, len_in_bytes, k, hash);\n  } else if (expand === '_internal_pass') {\n    // for internal tests only\n    prb = msg;\n  } else {\n    throw new Error('expand must be \"xmd\" or \"xof\"');\n  }\n  const u = new Array(count);\n  for (let i = 0; i < count; i++) {\n    const e = new Array(m);\n    for (let j = 0; j < m; j++) {\n      const elm_offset = L * (j + i * m);\n      const tv = prb.subarray(elm_offset, elm_offset + L);\n      e[j] = mod(os2ip(tv), p);\n    }\n    u[i] = e;\n  }\n  return u;\n}\n\nexport function isogenyMap<T, F extends IField<T>>(field: F, map: [T[], T[], T[], T[]]) {\n  // Make same order as in spec\n  const COEFF = map.map((i) => Array.from(i).reverse());\n  return (x: T, y: T) => {\n    const [xNum, xDen, yNum, yDen] = COEFF.map((val) =>\n      val.reduce((acc, i) => field.add(field.mul(acc, x), i))\n    );\n    x = field.div(xNum, xDen); // xNum / xDen\n    y = field.mul(y, field.div(yNum, yDen)); // y * (yNum / yDev)\n    return { x, y };\n  };\n}\n\nexport interface H2CPoint<T> extends Group<H2CPoint<T>> {\n  add(rhs: H2CPoint<T>): H2CPoint<T>;\n  toAffine(iz?: bigint): AffinePoint<T>;\n  clearCofactor(): H2CPoint<T>;\n  assertValidity(): void;\n}\n\nexport interface H2CPointConstructor<T> extends GroupConstructor<H2CPoint<T>> {\n  fromAffine(ap: AffinePoint<T>): H2CPoint<T>;\n}\n\nexport type MapToCurve<T> = (scalar: bigint[]) => AffinePoint<T>;\n\n// Separated from initialization opts, so users won't accidentally change per-curve parameters\n// (changing DST is ok!)\nexport type htfBasicOpts = { DST: UnicodeOrBytes };\n\nexport function createHasher<T>(\n  Point: H2CPointConstructor<T>,\n  mapToCurve: MapToCurve<T>,\n  def: Opts & { encodeDST?: UnicodeOrBytes }\n) {\n  if (typeof mapToCurve !== 'function') throw new Error('mapToCurve() must be defined');\n  return {\n    // Encodes byte string to elliptic curve.\n    // hash_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    hashToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 2, { ...def, DST: def.DST, ...options } as Opts);\n      const u0 = Point.fromAffine(mapToCurve(u[0]));\n      const u1 = Point.fromAffine(mapToCurve(u[1]));\n      const P = u0.add(u1).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n\n    // Encodes byte string to elliptic curve.\n    // encode_to_curve from https://www.rfc-editor.org/rfc/rfc9380#section-3\n    encodeToCurve(msg: Uint8Array, options?: htfBasicOpts) {\n      const u = hash_to_field(msg, 1, { ...def, DST: def.encodeDST, ...options } as Opts);\n      const P = Point.fromAffine(mapToCurve(u[0])).clearCofactor();\n      P.assertValidity();\n      return P;\n    },\n  };\n}\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"],"names":["number","n","Number","isSafeInteger","Error","bytes","b","Uint8Array","lengths","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","crypto","globalThis","undefined","u8a","a","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","Uint32Array","toBytes","data","str","TextEncoder","encode","utf8ToBytes","concatBytes","arrays","r","reduce","sum","pad","forEach","set","Hash","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","SHA2","padOffset","isLE","pos","view","len","take","Math","subarray","process","dataView","roundClean","fill","i","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","digestInto","res","slice","destroy","to","constructor","Maj","c","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","sha256","_0n","_1n","_2n","hexes","Array","from","_","toString","padStart","bytesToHex","hex","numberToHexUnpadded","num","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","numberToVarBytesBE","ensureBytes","title","expectedLength","e","equalBytes","b1","b2","bitLen","bitGet","bitSet","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","gen","sl","push","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","_3n","_4n","_5n","_8n","mod","result","pow","power","modulo","pow2","x","invert","y","u","q","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","Q","S","Z","legendreC","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","validateField","map","ORDER","MASK","BYTES","BITS","nLength","nBitLength","_nBitLength","nByteLength","ceil","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","validateBasic","curve","Gx","Gy","freeze","p","b2n","ut","h2b","DER","Err","_parseInt","d","toSig","sBytes","s","hexFromSig","sig","shl","rhl","rl","weierstrassPoints","opts","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","key","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","windowSize","_WINDOW_SIZE","delete","is0","left","right","isOdd","X1","Y1","Z1","X2","Y2","Z2","U1","U2","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","negate","equals","wnaf","wNAFCached","comp","toInv","invertBatch","fromAffine","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","double","scalar","fake","wNAF","f1p","f","f2p","constTimeNegate","normalizeZ","BASE","multiply","multiplyUnsafe","iz","z","inv","ax","ay","zz","cofactor","isCompressed","assertValidity","toRawBytes","points","privateKey","_bits","bits","condition","item","W","windows","elm","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","hmac","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","hasEvenY","head","y2","sqrt","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","msgHash","rec","radj","prefix","R","fromHex","ir","u1","u2","multiplyAndAddUnsafe","hasHighS","toDERHex","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","precompute","_setWindowSize","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","prehash","ent","extraEntropy","h1int","seedArgs","k2sig","kBytes","ik","normS","normalizeS","defaultVerOpts","getPublicKey","fromPrivateKey","getSharedSecret","privateA","publicB","sign","privKey","drbg","verify","signature","publicKey","sg","_sig","fromDER","derError","fromCompact","message","is","mapToCurveSimpleSWU","sqrtRatio","o","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","c7","tv1","tv2","tv3","tv5","tv4","isQR","cmov","tvv5","e1","y1","SWUFpSqrtRatio","tv6","div","os2ip","i2osp","strxor","isBytes","isNum","hash_to_field","count","options","DST","expand","_DST","prb","dst","validateDST","log2p","L","len_in_bytes","lenInBytes","b_in_bytes","r_in_bytes","ell","DST_prime","Z_pad","l_i_b_str","b_0","args","expand_message_xmd","dkLen","expand_message_xof","elm_offset","tv","HMAC","_key","assertHash","iHash","oHash","buf","assertExists","assertBytes","getPrototypeOf","getHash","msgs","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b6","b9","b11","b22","b44","b88","b176","b220","b223","redef","sqrtP","lhs","rhs","FpPow","sqrN","addN","subN","mulN","lst","nums","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","Field","secp256k1","defHash","createCurve","a1","a2","POW_2_128","fe","TAGGED_HASH_PREFIXES","taggedHash","tag","tagP","tagH","charCodeAt","messages","concat","pointToBytes","numTo32b","modP","GmulAdd","schnorrGetExtPubKey","priv","d_","lift_x","xx","challenge","schnorrGetPublicKey","schnorrSign","auxRand","t","rand","k_","rx","schnorrVerify","pub","schnorr","isoMap","COEFF","xNum","xDen","yNum","yDen","isogenyMap","mapSWU","htf","mapToCurve","def","hashToCurve","u0","encodeToCurve","encodeDST","createHasher","scalars"],"sourceRoot":""}