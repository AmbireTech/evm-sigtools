{"version":3,"file":"static/js/8253.00b99bff.chunk.js","mappings":"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","sources":["../node_modules/@noble/hashes/src/_assert.ts","../node_modules/@noble/hashes/src/crypto.ts","../node_modules/@noble/hashes/src/utils.ts","../node_modules/@noble/hashes/src/_sha2.ts","../node_modules/@noble/hashes/src/sha256.ts","../node_modules/@noble/curves/src/abstract/utils.ts","../node_modules/@noble/curves/src/abstract/modular.ts","../node_modules/@noble/hashes/src/hmac.ts","../node_modules/@noble/curves/src/abstract/curve.ts","../node_modules/@noble/curves/src/abstract/weierstrass.ts","../node_modules/@noble/curves/src/_shortw_utils.ts","../node_modules/@noble/curves/src/secp256k1.ts"],"sourcesContent":["function number(n: number) {\n  if (!Number.isSafeInteger(n) || n < 0) throw new Error(`Wrong positive integer: ${n}`);\n}\n\nfunction bool(b: boolean) {\n  if (typeof b !== 'boolean') throw new Error(`Expected boolean, not ${b}`);\n}\n\nfunction bytes(b: Uint8Array | undefined, ...lengths: number[]) {\n  if (!(b instanceof Uint8Array)) throw new Error('Expected Uint8Array');\n  if (lengths.length > 0 && !lengths.includes(b.length))\n    throw new Error(`Expected Uint8Array of length ${lengths}, not of length=${b.length}`);\n}\n\ntype Hash = {\n  (data: Uint8Array): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create: any;\n};\nfunction hash(hash: Hash) {\n  if (typeof hash !== 'function' || typeof hash.create !== 'function')\n    throw new Error('Hash should be wrapped by utils.wrapConstructor');\n  number(hash.outputLen);\n  number(hash.blockLen);\n}\n\nfunction exists(instance: any, checkFinished = true) {\n  if (instance.destroyed) throw new Error('Hash instance has been destroyed');\n  if (checkFinished && instance.finished) throw new Error('Hash#digest() has already been called');\n}\nfunction output(out: any, instance: any) {\n  bytes(out);\n  const min = instance.outputLen;\n  if (out.length < min) {\n    throw new Error(`digestInto() expects output buffer of length at least ${min}`);\n  }\n}\n\nexport { number, bool, bytes, hash, exists, output };\n\nconst assert = { number, bool, bytes, hash, exists, output };\nexport default assert;\n","// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// See utils.ts for details.\ndeclare const globalThis: Record<string, any> | undefined;\nexport const crypto =\n  typeof globalThis === 'object' && 'crypto' in globalThis ? globalThis.crypto : undefined;\n","/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated, we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n\n// prettier-ignore\nexport type TypedArray = Int8Array | Uint8ClampedArray | Uint8Array |\n  Uint16Array | Int16Array | Uint32Array | Int32Array;\n\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\n// Cast array to different type\nexport const u8 = (arr: TypedArray) => new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\nexport const u32 = (arr: TypedArray) =>\n  new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n\n// Cast array to view\nexport const createView = (arr: TypedArray) =>\n  new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n\n// The rotate right (circular right shift) operation for uint32\nexport const rotr = (word: number, shift: number) => (word << (32 - shift)) | (word >>> shift);\n\n// big-endian hardware is rare. Just in case someone still decides to run hashes:\n// early-throw an error because we don't support BE yet.\nexport const isLE = new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44;\nif (!isLE) throw new Error('Non little-endian hardware is not supported');\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// There is no setImmediate in browser and setTimeout is slow.\n// call of async fn will return Promise, which will be fullfiled only on\n// next scheduler queue processing step and this is exactly what we need.\nexport const nextTick = async () => {};\n\n// Returns control to thread each 'tick' ms to avoid blocking\nexport async function asyncLoop(iters: number, tick: number, cb: (i: number) => void) {\n  let ts = Date.now();\n  for (let i = 0; i < iters; i++) {\n    cb(i);\n    // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n    const diff = Date.now() - ts;\n    if (diff >= 0 && diff < tick) continue;\n    await nextTick();\n    ts += diff;\n  }\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\nexport type Input = Uint8Array | string;\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data: Input): Uint8Array {\n  if (typeof data === 'string') data = utf8ToBytes(data);\n  if (!u8a(data)) throw new Error(`expected Uint8Array, got ${typeof data}`);\n  return data;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\n// For runtime check if class implements interface\nexport abstract class Hash<T extends Hash<T>> {\n  abstract blockLen: number; // Bytes per block\n  abstract outputLen: number; // Bytes in output\n  abstract update(buf: Input): this;\n  // Writes digest into buf\n  abstract digestInto(buf: Uint8Array): void;\n  abstract digest(): Uint8Array;\n  /**\n   * Resets internal state. Makes Hash instance unusable.\n   * Reset is impossible for keyed hashes if key is consumed into state. If digest is not consumed\n   * by user, they will need to manually call `destroy()` when zeroing is necessary.\n   */\n  abstract destroy(): void;\n  /**\n   * Clones hash instance. Unsafe: doesn't check whether `to` is valid. Can be used as `clone()`\n   * when no options are passed.\n   * Reasons to use `_cloneInto` instead of clone: 1) performance 2) reuse instance => all internal\n   * buffers are overwritten => causes buffer overwrite which is used for digest in some cases.\n   * There are no guarantees for clean-up because it's impossible in JS.\n   */\n  abstract _cloneInto(to?: T): T;\n  // Safe version that clones internal state\n  clone(): T {\n    return this._cloneInto();\n  }\n}\n\n/**\n * XOF: streaming API to read digest in chunks.\n * Same as 'squeeze' in keccak/k12 and 'seek' in blake3, but more generic name.\n * When hash used in XOF mode it is up to user to call '.destroy' afterwards, since we cannot\n * destroy state, next call can require more bytes.\n */\nexport type HashXOF<T extends Hash<T>> = Hash<T> & {\n  xof(bytes: number): Uint8Array; // Read 'bytes' bytes from digest stream\n  xofInto(buf: Uint8Array): Uint8Array; // read buf.length bytes from digest stream into buf\n};\n\nconst toStr = {}.toString;\ntype EmptyObj = {};\nexport function checkOpts<T1 extends EmptyObj, T2 extends EmptyObj>(\n  defaults: T1,\n  opts?: T2\n): T1 & T2 {\n  if (opts !== undefined && toStr.call(opts) !== '[object Object]')\n    throw new Error('Options should be object or undefined');\n  const merged = Object.assign(defaults, opts);\n  return merged as T1 & T2;\n}\n\nexport type CHash = ReturnType<typeof wrapConstructor>;\n\nexport function wrapConstructor<T extends Hash<T>>(hashCons: () => Hash<T>) {\n  const hashC = (msg: Input): Uint8Array => hashCons().update(toBytes(msg)).digest();\n  const tmp = hashCons();\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = () => hashCons();\n  return hashC;\n}\n\nexport function wrapConstructorWithOpts<H extends Hash<H>, T extends Object>(\n  hashCons: (opts?: T) => Hash<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\nexport function wrapXOFConstructorWithOpts<H extends HashXOF<H>, T extends Object>(\n  hashCons: (opts?: T) => HashXOF<H>\n) {\n  const hashC = (msg: Input, opts?: T): Uint8Array => hashCons(opts).update(toBytes(msg)).digest();\n  const tmp = hashCons({} as T);\n  hashC.outputLen = tmp.outputLen;\n  hashC.blockLen = tmp.blockLen;\n  hashC.create = (opts: T) => hashCons(opts);\n  return hashC;\n}\n\n/**\n * Secure PRNG. Uses `crypto.getRandomValues`, which defers to OS.\n */\nexport function randomBytes(bytesLength = 32): Uint8Array {\n  if (crypto && typeof crypto.getRandomValues === 'function') {\n    return crypto.getRandomValues(new Uint8Array(bytesLength));\n  }\n  throw new Error('crypto.getRandomValues must be defined');\n}\n","import { exists, output } from './_assert.js';\nimport { Hash, createView, Input, toBytes } from './utils.js';\n\n// Polyfill for Safari 14\nfunction setBigUint64(view: DataView, byteOffset: number, value: bigint, isLE: boolean): void {\n  if (typeof view.setBigUint64 === 'function') return view.setBigUint64(byteOffset, value, isLE);\n  const _32n = BigInt(32);\n  const _u32_max = BigInt(0xffffffff);\n  const wh = Number((value >> _32n) & _u32_max);\n  const wl = Number(value & _u32_max);\n  const h = isLE ? 4 : 0;\n  const l = isLE ? 0 : 4;\n  view.setUint32(byteOffset + h, wh, isLE);\n  view.setUint32(byteOffset + l, wl, isLE);\n}\n\n// Base SHA2 class (RFC 6234)\nexport abstract class SHA2<T extends SHA2<T>> extends Hash<T> {\n  protected abstract process(buf: DataView, offset: number): void;\n  protected abstract get(): number[];\n  protected abstract set(...args: number[]): void;\n  abstract destroy(): void;\n  protected abstract roundClean(): void;\n  // For partial updates less than block size\n  protected buffer: Uint8Array;\n  protected view: DataView;\n  protected finished = false;\n  protected length = 0;\n  protected pos = 0;\n  protected destroyed = false;\n\n  constructor(\n    readonly blockLen: number,\n    public outputLen: number,\n    readonly padOffset: number,\n    readonly isLE: boolean\n  ) {\n    super();\n    this.buffer = new Uint8Array(blockLen);\n    this.view = createView(this.buffer);\n  }\n  update(data: Input): this {\n    exists(this);\n    const { view, buffer, blockLen } = this;\n    data = toBytes(data);\n    const len = data.length;\n    for (let pos = 0; pos < len; ) {\n      const take = Math.min(blockLen - this.pos, len - pos);\n      // Fast path: we have at least one block in input, cast it to view and process\n      if (take === blockLen) {\n        const dataView = createView(data);\n        for (; blockLen <= len - pos; pos += blockLen) this.process(dataView, pos);\n        continue;\n      }\n      buffer.set(data.subarray(pos, pos + take), this.pos);\n      this.pos += take;\n      pos += take;\n      if (this.pos === blockLen) {\n        this.process(view, 0);\n        this.pos = 0;\n      }\n    }\n    this.length += data.length;\n    this.roundClean();\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    exists(this);\n    output(out, this);\n    this.finished = true;\n    // Padding\n    // We can avoid allocation of buffer for padding completely if it\n    // was previously not allocated here. But it won't change performance.\n    const { buffer, view, blockLen, isLE } = this;\n    let { pos } = this;\n    // append the bit '1' to the message\n    buffer[pos++] = 0b10000000;\n    this.buffer.subarray(pos).fill(0);\n    // we have less than padOffset left in buffer, so we cannot put length in current block, need process it and pad again\n    if (this.padOffset > blockLen - pos) {\n      this.process(view, 0);\n      pos = 0;\n    }\n    // Pad until full block byte with zeros\n    for (let i = pos; i < blockLen; i++) buffer[i] = 0;\n    // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n    // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n    // So we just write lowest 64 bits of that value.\n    setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n    this.process(view, 0);\n    const oview = createView(out);\n    const len = this.outputLen;\n    // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n    if (len % 4) throw new Error('_sha2: outputLen should be aligned to 32bit');\n    const outLen = len / 4;\n    const state = this.get();\n    if (outLen > state.length) throw new Error('_sha2: outputLen bigger than state');\n    for (let i = 0; i < outLen; i++) oview.setUint32(4 * i, state[i], isLE);\n  }\n  digest() {\n    const { buffer, outputLen } = this;\n    this.digestInto(buffer);\n    const res = buffer.slice(0, outputLen);\n    this.destroy();\n    return res;\n  }\n  _cloneInto(to?: T): T {\n    to ||= new (this.constructor as any)() as T;\n    to.set(...this.get());\n    const { blockLen, buffer, length, finished, destroyed, pos } = this;\n    to.length = length;\n    to.pos = pos;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    if (length % blockLen) to.buffer.set(buffer);\n    return to;\n  }\n}\n","import { SHA2 } from './_sha2.js';\nimport { rotr, wrapConstructor } from './utils.js';\n\n// SHA2-256 need to try 2^128 hashes to execute birthday attack.\n// BTC network is doing 2^67 hashes/sec as per early 2023.\n\n// Choice: a ? b : c\nconst Chi = (a: number, b: number, c: number) => (a & b) ^ (~a & c);\n// Majority function, true if any two inpust is true\nconst Maj = (a: number, b: number, c: number) => (a & b) ^ (a & c) ^ (b & c);\n\n// Round constants:\n// first 32 bits of the fractional parts of the cube roots of the first 64 primes 2..311)\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */new Uint32Array([\n  0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n  0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n  0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n  0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n  0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n  0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n  0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n  0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n\n// Initial state (first 32 bits of the fractional parts of the square roots of the first 8 primes 2..19):\n// prettier-ignore\nconst IV = /* @__PURE__ */new Uint32Array([\n  0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19\n]);\n\n// Temporary buffer, not used to store anything between runs\n// Named this way because it matches specification.\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nclass SHA256 extends SHA2<SHA256> {\n  // We cannot use array here since array allows indexing by variable\n  // which means optimizer/compiler cannot use registers.\n  A = IV[0] | 0;\n  B = IV[1] | 0;\n  C = IV[2] | 0;\n  D = IV[3] | 0;\n  E = IV[4] | 0;\n  F = IV[5] | 0;\n  G = IV[6] | 0;\n  H = IV[7] | 0;\n\n  constructor() {\n    super(64, 32, 8, false);\n  }\n  protected get(): [number, number, number, number, number, number, number, number] {\n    const { A, B, C, D, E, F, G, H } = this;\n    return [A, B, C, D, E, F, G, H];\n  }\n  // prettier-ignore\n  protected set(\n    A: number, B: number, C: number, D: number, E: number, F: number, G: number, H: number\n  ) {\n    this.A = A | 0;\n    this.B = B | 0;\n    this.C = C | 0;\n    this.D = D | 0;\n    this.E = E | 0;\n    this.F = F | 0;\n    this.G = G | 0;\n    this.H = H | 0;\n  }\n  protected process(view: DataView, offset: number): void {\n    // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n    for (let i = 0; i < 16; i++, offset += 4) SHA256_W[i] = view.getUint32(offset, false);\n    for (let i = 16; i < 64; i++) {\n      const W15 = SHA256_W[i - 15];\n      const W2 = SHA256_W[i - 2];\n      const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n      const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n      SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n    }\n    // Compression function main loop, 64 rounds\n    let { A, B, C, D, E, F, G, H } = this;\n    for (let i = 0; i < 64; i++) {\n      const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n      const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n      const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n      const T2 = (sigma0 + Maj(A, B, C)) | 0;\n      H = G;\n      G = F;\n      F = E;\n      E = (D + T1) | 0;\n      D = C;\n      C = B;\n      B = A;\n      A = (T1 + T2) | 0;\n    }\n    // Add the compressed chunk to the current hash value\n    A = (A + this.A) | 0;\n    B = (B + this.B) | 0;\n    C = (C + this.C) | 0;\n    D = (D + this.D) | 0;\n    E = (E + this.E) | 0;\n    F = (F + this.F) | 0;\n    G = (G + this.G) | 0;\n    H = (H + this.H) | 0;\n    this.set(A, B, C, D, E, F, G, H);\n  }\n  protected roundClean() {\n    SHA256_W.fill(0);\n  }\n  destroy() {\n    this.set(0, 0, 0, 0, 0, 0, 0, 0);\n    this.buffer.fill(0);\n  }\n}\n// Constants from https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf\nclass SHA224 extends SHA256 {\n  A = 0xc1059ed8 | 0;\n  B = 0x367cd507 | 0;\n  C = 0x3070dd17 | 0;\n  D = 0xf70e5939 | 0;\n  E = 0xffc00b31 | 0;\n  F = 0x68581511 | 0;\n  G = 0x64f98fa7 | 0;\n  H = 0xbefa4fa4 | 0;\n  constructor() {\n    super();\n    this.outputLen = 28;\n  }\n}\n\n/**\n * SHA2-256 hash function\n * @param message - data that would be hashed\n */\nexport const sha256 = /* @__PURE__ */ wrapConstructor(() => new SHA256());\nexport const sha224 = /* @__PURE__ */ wrapConstructor(() => new SHA224());\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// 100 lines of code in the file are duplicated from noble-hashes (utils).\n// This is OK: `abstract` directory does not use noble-hashes.\n// User may opt-in into using different hashing library. This way, noble-hashes\n// won't be included into their bundle.\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst u8a = (a: any): a is Uint8Array => a instanceof Uint8Array;\nexport type Hex = Uint8Array | string; // hex strings are accepted for simplicity\nexport type PrivKey = Hex | bigint; // bigints are accepted to ease learning curve\nexport type CHash = {\n  (message: Uint8Array | string): Uint8Array;\n  blockLen: number;\n  outputLen: number;\n  create(opts?: { dkLen?: number }): any; // For shake\n};\nexport type FHash = (message: Uint8Array | string) => Uint8Array;\n\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) =>\n  i.toString(16).padStart(2, '0')\n);\n/**\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes: Uint8Array): string {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  // pre-caching improves the speed 6x\n  let hex = '';\n  for (let i = 0; i < bytes.length; i++) {\n    hex += hexes[bytes[i]];\n  }\n  return hex;\n}\n\nexport function numberToHexUnpadded(num: number | bigint): string {\n  const hex = num.toString(16);\n  return hex.length & 1 ? `0${hex}` : hex;\n}\n\nexport function hexToNumber(hex: string): bigint {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  // Big Endian\n  return BigInt(hex === '' ? '0' : `0x${hex}`);\n}\n\n/**\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex: string): Uint8Array {\n  if (typeof hex !== 'string') throw new Error('hex string expected, got ' + typeof hex);\n  const len = hex.length;\n  if (len % 2) throw new Error('padded hex string expected, got unpadded hex of length ' + len);\n  const array = new Uint8Array(len / 2);\n  for (let i = 0; i < array.length; i++) {\n    const j = i * 2;\n    const hexByte = hex.slice(j, j + 2);\n    const byte = Number.parseInt(hexByte, 16);\n    if (Number.isNaN(byte) || byte < 0) throw new Error('Invalid byte sequence');\n    array[i] = byte;\n  }\n  return array;\n}\n\n// BE: Big Endian, LE: Little Endian\nexport function bytesToNumberBE(bytes: Uint8Array): bigint {\n  return hexToNumber(bytesToHex(bytes));\n}\nexport function bytesToNumberLE(bytes: Uint8Array): bigint {\n  if (!u8a(bytes)) throw new Error('Uint8Array expected');\n  return hexToNumber(bytesToHex(Uint8Array.from(bytes).reverse()));\n}\n\nexport function numberToBytesBE(n: number | bigint, len: number): Uint8Array {\n  return hexToBytes(n.toString(16).padStart(len * 2, '0'));\n}\nexport function numberToBytesLE(n: number | bigint, len: number): Uint8Array {\n  return numberToBytesBE(n, len).reverse();\n}\n// Unpadded, rarely used\nexport function numberToVarBytesBE(n: number | bigint): Uint8Array {\n  return hexToBytes(numberToHexUnpadded(n));\n}\n\n/**\n * Takes hex string or Uint8Array, converts to Uint8Array.\n * Validates output length.\n * Will throw error for other types.\n * @param title descriptive title for an error e.g. 'private key'\n * @param hex hex string or Uint8Array\n * @param expectedLength optional, will compare to result array's length\n * @returns\n */\nexport function ensureBytes(title: string, hex: Hex, expectedLength?: number): Uint8Array {\n  let res: Uint8Array;\n  if (typeof hex === 'string') {\n    try {\n      res = hexToBytes(hex);\n    } catch (e) {\n      throw new Error(`${title} must be valid hex string, got \"${hex}\". Cause: ${e}`);\n    }\n  } else if (u8a(hex)) {\n    // Uint8Array.from() instead of hash.slice() because node.js Buffer\n    // is instance of Uint8Array, and its slice() creates **mutable** copy\n    res = Uint8Array.from(hex);\n  } else {\n    throw new Error(`${title} must be hex string or Uint8Array`);\n  }\n  const len = res.length;\n  if (typeof expectedLength === 'number' && len !== expectedLength)\n    throw new Error(`${title} expected ${expectedLength} bytes, got ${len}`);\n  return res;\n}\n\n/**\n * Copies several Uint8Arrays into one.\n */\nexport function concatBytes(...arrays: Uint8Array[]): Uint8Array {\n  const r = new Uint8Array(arrays.reduce((sum, a) => sum + a.length, 0));\n  let pad = 0; // walk through each item, ensure they have proper type\n  arrays.forEach((a) => {\n    if (!u8a(a)) throw new Error('Uint8Array expected');\n    r.set(a, pad);\n    pad += a.length;\n  });\n  return r;\n}\n\nexport function equalBytes(b1: Uint8Array, b2: Uint8Array) {\n  // We don't care about timing attacks here\n  if (b1.length !== b2.length) return false;\n  for (let i = 0; i < b1.length; i++) if (b1[i] !== b2[i]) return false;\n  return true;\n}\n\n// Global symbols in both browsers and Node.js since v11\n// See https://github.com/microsoft/TypeScript/issues/31535\ndeclare const TextEncoder: any;\n\n/**\n * @example utf8ToBytes('abc') // new Uint8Array([97, 98, 99])\n */\nexport function utf8ToBytes(str: string): Uint8Array {\n  if (typeof str !== 'string') throw new Error(`utf8ToBytes expected string, got ${typeof str}`);\n  return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n\n// Bit operations\n\n/**\n * Calculates amount of bits in a bigint.\n * Same as `n.toString(2).length`\n */\nexport function bitLen(n: bigint) {\n  let len;\n  for (len = 0; n > _0n; n >>= _1n, len += 1);\n  return len;\n}\n\n/**\n * Gets single bit at position.\n * NOTE: first bit position is 0 (same as arrays)\n * Same as `!!+Array.from(n.toString(2)).reverse()[pos]`\n */\nexport function bitGet(n: bigint, pos: number) {\n  return (n >> BigInt(pos)) & _1n;\n}\n\n/**\n * Sets single bit at position.\n */\nexport const bitSet = (n: bigint, pos: number, value: boolean) => {\n  return n | ((value ? _1n : _0n) << BigInt(pos));\n};\n\n/**\n * Calculate mask for N bits. Not using ** operator with bigints because of old engines.\n * Same as BigInt(`0b${Array(i).fill('1').join('')}`)\n */\nexport const bitMask = (n: number) => (_2n << BigInt(n - 1)) - _1n;\n\n// DRBG\n\nconst u8n = (data?: any) => new Uint8Array(data); // creates Uint8Array\nconst u8fr = (arr: any) => Uint8Array.from(arr); // another shortcut\ntype Pred<T> = (v: Uint8Array) => T | undefined;\n/**\n * Minimal HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n * @returns function that will call DRBG until 2nd arg returns something meaningful\n * @example\n *   const drbg = createHmacDRBG<Key>(32, 32, hmac);\n *   drbg(seed, bytesToKey); // bytesToKey must return Key or undefined\n */\nexport function createHmacDrbg<T>(\n  hashLen: number,\n  qByteLen: number,\n  hmacFn: (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array\n): (seed: Uint8Array, predicate: Pred<T>) => T {\n  if (typeof hashLen !== 'number' || hashLen < 2) throw new Error('hashLen must be a number');\n  if (typeof qByteLen !== 'number' || qByteLen < 2) throw new Error('qByteLen must be a number');\n  if (typeof hmacFn !== 'function') throw new Error('hmacFn must be a function');\n  // Step B, Step C: set hashLen to 8*ceil(hlen/8)\n  let v = u8n(hashLen); // Minimal non-full-spec HMAC-DRBG from NIST 800-90 for RFC6979 sigs.\n  let k = u8n(hashLen); // Steps B and C of RFC6979 3.2: set hashLen, in our case always same\n  let i = 0; // Iterations counter, will throw when over 1000\n  const reset = () => {\n    v.fill(1);\n    k.fill(0);\n    i = 0;\n  };\n  const h = (...b: Uint8Array[]) => hmacFn(k, v, ...b); // hmac(k)(v, ...values)\n  const reseed = (seed = u8n()) => {\n    // HMAC-DRBG reseed() function. Steps D-G\n    k = h(u8fr([0x00]), seed); // k = hmac(k || v || 0x00 || seed)\n    v = h(); // v = hmac(k || v)\n    if (seed.length === 0) return;\n    k = h(u8fr([0x01]), seed); // k = hmac(k || v || 0x01 || seed)\n    v = h(); // v = hmac(k || v)\n  };\n  const gen = () => {\n    // HMAC-DRBG generate() function\n    if (i++ >= 1000) throw new Error('drbg: tried 1000 values');\n    let len = 0;\n    const out: Uint8Array[] = [];\n    while (len < qByteLen) {\n      v = h();\n      const sl = v.slice();\n      out.push(sl);\n      len += v.length;\n    }\n    return concatBytes(...out);\n  };\n  const genUntil = (seed: Uint8Array, pred: Pred<T>): T => {\n    reset();\n    reseed(seed); // Steps D-G\n    let res: T | undefined = undefined; // Step H: grind until k is in [1..n-1]\n    while (!(res = pred(gen()))) reseed();\n    reset();\n    return res;\n  };\n  return genUntil;\n}\n\n// Validating curves and fields\n\nconst validatorFns = {\n  bigint: (val: any) => typeof val === 'bigint',\n  function: (val: any) => typeof val === 'function',\n  boolean: (val: any) => typeof val === 'boolean',\n  string: (val: any) => typeof val === 'string',\n  stringOrUint8Array: (val: any) => typeof val === 'string' || val instanceof Uint8Array,\n  isSafeInteger: (val: any) => Number.isSafeInteger(val),\n  array: (val: any) => Array.isArray(val),\n  field: (val: any, object: any) => (object as any).Fp.isValid(val),\n  hash: (val: any) => typeof val === 'function' && Number.isSafeInteger(val.outputLen),\n} as const;\ntype Validator = keyof typeof validatorFns;\ntype ValMap<T extends Record<string, any>> = { [K in keyof T]?: Validator };\n// type Record<K extends string | number | symbol, T> = { [P in K]: T; }\n\nexport function validateObject<T extends Record<string, any>>(\n  object: T,\n  validators: ValMap<T>,\n  optValidators: ValMap<T> = {}\n) {\n  const checkField = (fieldName: keyof T, type: Validator, isOptional: boolean) => {\n    const checkVal = validatorFns[type];\n    if (typeof checkVal !== 'function')\n      throw new Error(`Invalid validator \"${type}\", expected function`);\n\n    const val = object[fieldName as keyof typeof object];\n    if (isOptional && val === undefined) return;\n    if (!checkVal(val, object)) {\n      throw new Error(\n        `Invalid param ${String(fieldName)}=${val} (${typeof val}), expected ${type}`\n      );\n    }\n  };\n  for (const [fieldName, type] of Object.entries(validators)) checkField(fieldName, type!, false);\n  for (const [fieldName, type] of Object.entries(optValidators)) checkField(fieldName, type!, true);\n  return object;\n}\n// validate type tests\n// const o: { a: number; b: number; c: number } = { a: 1, b: 5, c: 6 };\n// const z0 = validateObject(o, { a: 'isSafeInteger' }, { c: 'bigint' }); // Ok!\n// // Should fail type-check\n// const z1 = validateObject(o, { a: 'tmp' }, { c: 'zz' });\n// const z2 = validateObject(o, { a: 'isSafeInteger' }, { c: 'zz' });\n// const z3 = validateObject(o, { test: 'boolean', z: 'bug' });\n// const z4 = validateObject(o, { a: 'boolean', z: 'bug' });\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Utilities for modular arithmetics and finite fields\nimport {\n  bitMask,\n  numberToBytesBE,\n  numberToBytesLE,\n  bytesToNumberBE,\n  bytesToNumberLE,\n  ensureBytes,\n  validateObject,\n} from './utils.js';\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3);\n// prettier-ignore\nconst _4n = BigInt(4), _5n = BigInt(5), _8n = BigInt(8);\n// prettier-ignore\nconst _9n = BigInt(9), _16n = BigInt(16);\n\n// Calculates a modulo b\nexport function mod(a: bigint, b: bigint): bigint {\n  const result = a % b;\n  return result >= _0n ? result : b + result;\n}\n/**\n * Efficiently raise num to power and do modular division.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n * @example\n * pow(2n, 6n, 11n) // 64n % 11n == 9n\n */\n// TODO: use field version && remove\nexport function pow(num: bigint, power: bigint, modulo: bigint): bigint {\n  if (modulo <= _0n || power < _0n) throw new Error('Expected power/modulo > 0');\n  if (modulo === _1n) return _0n;\n  let res = _1n;\n  while (power > _0n) {\n    if (power & _1n) res = (res * num) % modulo;\n    num = (num * num) % modulo;\n    power >>= _1n;\n  }\n  return res;\n}\n\n// Does x ^ (2 ^ power) mod p. pow2(30, 4) == 30 ^ (2 ^ 4)\nexport function pow2(x: bigint, power: bigint, modulo: bigint): bigint {\n  let res = x;\n  while (power-- > _0n) {\n    res *= res;\n    res %= modulo;\n  }\n  return res;\n}\n\n// Inverses number over modulo\nexport function invert(number: bigint, modulo: bigint): bigint {\n  if (number === _0n || modulo <= _0n) {\n    throw new Error(`invert: expected positive integers, got n=${number} mod=${modulo}`);\n  }\n  // Euclidean GCD https://brilliant.org/wiki/extended-euclidean-algorithm/\n  // Fermat's little theorem \"CT-like\" version inv(n) = n^(m-2) mod m is 30x slower.\n  let a = mod(number, modulo);\n  let b = modulo;\n  // prettier-ignore\n  let x = _0n, y = _1n, u = _1n, v = _0n;\n  while (a !== _0n) {\n    // JIT applies optimization if those two lines follow each other\n    const q = b / a;\n    const r = b % a;\n    const m = x - u * q;\n    const n = y - v * q;\n    // prettier-ignore\n    b = a, a = r, x = u, y = v, u = m, v = n;\n  }\n  const gcd = b;\n  if (gcd !== _1n) throw new Error('invert: does not exist');\n  return mod(x, modulo);\n}\n\n/**\n * Tonelli-Shanks square root search algorithm.\n * 1. https://eprint.iacr.org/2012/685.pdf (page 12)\n * 2. Square Roots from 1; 24, 51, 10 to Dan Shanks\n * Will start an infinite loop if field order P is not prime.\n * @param P field order\n * @returns function that takes field Fp (created from P) and number n\n */\nexport function tonelliShanks(P: bigint) {\n  // Legendre constant: used to calculate Legendre symbol (a | p),\n  // which denotes the value of a^((p-1)/2) (mod p).\n  // (a | p) ≡ 1    if a is a square (mod p)\n  // (a | p) ≡ -1   if a is not a square (mod p)\n  // (a | p) ≡ 0    if a ≡ 0 (mod p)\n  const legendreC = (P - _1n) / _2n;\n\n  let Q: bigint, S: number, Z: bigint;\n  // Step 1: By factoring out powers of 2 from p - 1,\n  // find q and s such that p - 1 = q*(2^s) with q odd\n  for (Q = P - _1n, S = 0; Q % _2n === _0n; Q /= _2n, S++);\n\n  // Step 2: Select a non-square z such that (z | p) ≡ -1 and set c ≡ zq\n  for (Z = _2n; Z < P && pow(Z, legendreC, P) !== P - _1n; Z++);\n\n  // Fast-path\n  if (S === 1) {\n    const p1div4 = (P + _1n) / _4n;\n    return function tonelliFast<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Slow-path\n  const Q1div2 = (Q + _1n) / _2n;\n  return function tonelliSlow<T>(Fp: IField<T>, n: T): T {\n    // Step 0: Check that n is indeed a square: (n | p) should not be ≡ -1\n    if (Fp.pow(n, legendreC) === Fp.neg(Fp.ONE)) throw new Error('Cannot find square root');\n    let r = S;\n    // TODO: will fail at Fp2/etc\n    let g = Fp.pow(Fp.mul(Fp.ONE, Z), Q); // will update both x and b\n    let x = Fp.pow(n, Q1div2); // first guess at the square root\n    let b = Fp.pow(n, Q); // first guess at the fudge factor\n\n    while (!Fp.eql(b, Fp.ONE)) {\n      if (Fp.eql(b, Fp.ZERO)) return Fp.ZERO; // https://en.wikipedia.org/wiki/Tonelli%E2%80%93Shanks_algorithm (4. If t = 0, return r = 0)\n      // Find m such b^(2^m)==1\n      let m = 1;\n      for (let t2 = Fp.sqr(b); m < r; m++) {\n        if (Fp.eql(t2, Fp.ONE)) break;\n        t2 = Fp.sqr(t2); // t2 *= t2\n      }\n      // NOTE: r-m-1 can be bigger than 32, need to convert to bigint before shift, otherwise there will be overflow\n      const ge = Fp.pow(g, _1n << BigInt(r - m - 1)); // ge = 2^(r-m-1)\n      g = Fp.sqr(ge); // g = ge * ge\n      x = Fp.mul(x, ge); // x *= ge\n      b = Fp.mul(b, g); // b *= g\n      r = m;\n    }\n    return x;\n  };\n}\n\nexport function FpSqrt(P: bigint) {\n  // NOTE: different algorithms can give different roots, it is up to user to decide which one they want.\n  // For example there is FpSqrtOdd/FpSqrtEven to choice root based on oddness (used for hash-to-curve).\n\n  // P ≡ 3 (mod 4)\n  // √n = n^((P+1)/4)\n  if (P % _4n === _3n) {\n    // Not all roots possible!\n    // const ORDER =\n    //   0x1a0111ea397fe69a4b1ba7b6434bacd764774b84f38512bf6730d2a0f6b0f6241eabfffeb153ffffb9feffffffffaaabn;\n    // const NUM = 72057594037927816n;\n    const p1div4 = (P + _1n) / _4n;\n    return function sqrt3mod4<T>(Fp: IField<T>, n: T) {\n      const root = Fp.pow(n, p1div4);\n      // Throw if root**2 != n\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // Atkin algorithm for q ≡ 5 (mod 8), https://eprint.iacr.org/2012/685.pdf (page 10)\n  if (P % _8n === _5n) {\n    const c1 = (P - _5n) / _8n;\n    return function sqrt5mod8<T>(Fp: IField<T>, n: T) {\n      const n2 = Fp.mul(n, _2n);\n      const v = Fp.pow(n2, c1);\n      const nv = Fp.mul(n, v);\n      const i = Fp.mul(Fp.mul(nv, _2n), v);\n      const root = Fp.mul(nv, Fp.sub(i, Fp.ONE));\n      if (!Fp.eql(Fp.sqr(root), n)) throw new Error('Cannot find square root');\n      return root;\n    };\n  }\n\n  // P ≡ 9 (mod 16)\n  if (P % _16n === _9n) {\n    // NOTE: tonelli is too slow for bls-Fp2 calculations even on start\n    // Means we cannot use sqrt for constants at all!\n    //\n    // const c1 = Fp.sqrt(Fp.negate(Fp.ONE)); //  1. c1 = sqrt(-1) in F, i.e., (c1^2) == -1 in F\n    // const c2 = Fp.sqrt(c1);                //  2. c2 = sqrt(c1) in F, i.e., (c2^2) == c1 in F\n    // const c3 = Fp.sqrt(Fp.negate(c1));     //  3. c3 = sqrt(-c1) in F, i.e., (c3^2) == -c1 in F\n    // const c4 = (P + _7n) / _16n;           //  4. c4 = (q + 7) / 16        # Integer arithmetic\n    // sqrt = (x) => {\n    //   let tv1 = Fp.pow(x, c4);             //  1. tv1 = x^c4\n    //   let tv2 = Fp.mul(c1, tv1);           //  2. tv2 = c1 * tv1\n    //   const tv3 = Fp.mul(c2, tv1);         //  3. tv3 = c2 * tv1\n    //   let tv4 = Fp.mul(c3, tv1);           //  4. tv4 = c3 * tv1\n    //   const e1 = Fp.equals(Fp.square(tv2), x); //  5.  e1 = (tv2^2) == x\n    //   const e2 = Fp.equals(Fp.square(tv3), x); //  6.  e2 = (tv3^2) == x\n    //   tv1 = Fp.cmov(tv1, tv2, e1); //  7. tv1 = CMOV(tv1, tv2, e1)  # Select tv2 if (tv2^2) == x\n    //   tv2 = Fp.cmov(tv4, tv3, e2); //  8. tv2 = CMOV(tv4, tv3, e2)  # Select tv3 if (tv3^2) == x\n    //   const e3 = Fp.equals(Fp.square(tv2), x); //  9.  e3 = (tv2^2) == x\n    //   return Fp.cmov(tv1, tv2, e3); //  10.  z = CMOV(tv1, tv2, e3)  # Select the sqrt from tv1 and tv2\n    // }\n  }\n\n  // Other cases: Tonelli-Shanks algorithm\n  return tonelliShanks(P);\n}\n\n// Little-endian check for first LE bit (last BE bit);\nexport const isNegativeLE = (num: bigint, modulo: bigint) => (mod(num, modulo) & _1n) === _1n;\n\n// Field is not always over prime: for example, Fp2 has ORDER(q)=p^m\nexport interface IField<T> {\n  ORDER: bigint;\n  BYTES: number;\n  BITS: number;\n  MASK: bigint;\n  ZERO: T;\n  ONE: T;\n  // 1-arg\n  create: (num: T) => T;\n  isValid: (num: T) => boolean;\n  is0: (num: T) => boolean;\n  neg(num: T): T;\n  inv(num: T): T;\n  sqrt(num: T): T;\n  sqr(num: T): T;\n  // 2-args\n  eql(lhs: T, rhs: T): boolean;\n  add(lhs: T, rhs: T): T;\n  sub(lhs: T, rhs: T): T;\n  mul(lhs: T, rhs: T | bigint): T;\n  pow(lhs: T, power: bigint): T;\n  div(lhs: T, rhs: T | bigint): T;\n  // N for NonNormalized (for now)\n  addN(lhs: T, rhs: T): T;\n  subN(lhs: T, rhs: T): T;\n  mulN(lhs: T, rhs: T | bigint): T;\n  sqrN(num: T): T;\n\n  // Optional\n  // Should be same as sgn0 function in\n  // [RFC9380](https://www.rfc-editor.org/rfc/rfc9380#section-4.1).\n  // NOTE: sgn0 is 'negative in LE', which is same as odd. And negative in LE is kinda strange definition anyway.\n  isOdd?(num: T): boolean; // Odd instead of even since we have it for Fp2\n  // legendre?(num: T): T;\n  pow(lhs: T, power: bigint): T;\n  invertBatch: (lst: T[]) => T[];\n  toBytes(num: T): Uint8Array;\n  fromBytes(bytes: Uint8Array): T;\n  // If c is False, CMOV returns a, otherwise it returns b.\n  cmov(a: T, b: T, c: boolean): T;\n}\n// prettier-ignore\nconst FIELD_FIELDS = [\n  'create', 'isValid', 'is0', 'neg', 'inv', 'sqrt', 'sqr',\n  'eql', 'add', 'sub', 'mul', 'pow', 'div',\n  'addN', 'subN', 'mulN', 'sqrN'\n] as const;\nexport function validateField<T>(field: IField<T>) {\n  const initial = {\n    ORDER: 'bigint',\n    MASK: 'bigint',\n    BYTES: 'isSafeInteger',\n    BITS: 'isSafeInteger',\n  } as Record<string, string>;\n  const opts = FIELD_FIELDS.reduce((map, val: string) => {\n    map[val] = 'function';\n    return map;\n  }, initial);\n  return validateObject(field, opts);\n}\n\n// Generic field functions\n\n/**\n * Same as `pow` but for Fp: non-constant-time.\n * Unsafe in some contexts: uses ladder, so can expose bigint bits.\n */\nexport function FpPow<T>(f: IField<T>, num: T, power: bigint): T {\n  // Should have same speed as pow for bigints\n  // TODO: benchmark!\n  if (power < _0n) throw new Error('Expected power > 0');\n  if (power === _0n) return f.ONE;\n  if (power === _1n) return num;\n  let p = f.ONE;\n  let d = num;\n  while (power > _0n) {\n    if (power & _1n) p = f.mul(p, d);\n    d = f.sqr(d);\n    power >>= _1n;\n  }\n  return p;\n}\n\n/**\n * Efficiently invert an array of Field elements.\n * `inv(0)` will return `undefined` here: make sure to throw an error.\n */\nexport function FpInvertBatch<T>(f: IField<T>, nums: T[]): T[] {\n  const tmp = new Array(nums.length);\n  // Walk from first to last, multiply them by each other MOD p\n  const lastMultiplied = nums.reduce((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = acc;\n    return f.mul(acc, num);\n  }, f.ONE);\n  // Invert last element\n  const inverted = f.inv(lastMultiplied);\n  // Walk from last to first, multiply them by inverted each other MOD p\n  nums.reduceRight((acc, num, i) => {\n    if (f.is0(num)) return acc;\n    tmp[i] = f.mul(acc, tmp[i]);\n    return f.mul(acc, num);\n  }, inverted);\n  return tmp;\n}\n\nexport function FpDiv<T>(f: IField<T>, lhs: T, rhs: T | bigint): T {\n  return f.mul(lhs, typeof rhs === 'bigint' ? invert(rhs, f.ORDER) : f.inv(rhs));\n}\n\n// This function returns True whenever the value x is a square in the field F.\nexport function FpIsSquare<T>(f: IField<T>) {\n  const legendreConst = (f.ORDER - _1n) / _2n; // Integer arithmetic\n  return (x: T): boolean => {\n    const p = f.pow(x, legendreConst);\n    return f.eql(p, f.ZERO) || f.eql(p, f.ONE);\n  };\n}\n\n// CURVE.n lengths\nexport function nLength(n: bigint, nBitLength?: number) {\n  // Bit size, byte size of CURVE.n\n  const _nBitLength = nBitLength !== undefined ? nBitLength : n.toString(2).length;\n  const nByteLength = Math.ceil(_nBitLength / 8);\n  return { nBitLength: _nBitLength, nByteLength };\n}\n\ntype FpField = IField<bigint> & Required<Pick<IField<bigint>, 'isOdd'>>;\n/**\n * Initializes a finite field over prime. **Non-primes are not supported.**\n * Do not init in loop: slow. Very fragile: always run a benchmark on a change.\n * Major performance optimizations:\n * * a) denormalized operations like mulN instead of mul\n * * b) same object shape: never add or remove keys\n * * c) Object.freeze\n * @param ORDER prime positive bigint\n * @param bitLen how many bits the field consumes\n * @param isLE (def: false) if encoding / decoding should be in little-endian\n * @param redef optional faster redefinitions of sqrt and other methods\n */\nexport function Field(\n  ORDER: bigint,\n  bitLen?: number,\n  isLE = false,\n  redef: Partial<IField<bigint>> = {}\n): Readonly<FpField> {\n  if (ORDER <= _0n) throw new Error(`Expected Field ORDER > 0, got ${ORDER}`);\n  const { nBitLength: BITS, nByteLength: BYTES } = nLength(ORDER, bitLen);\n  if (BYTES > 2048) throw new Error('Field lengths over 2048 bytes are not supported');\n  const sqrtP = FpSqrt(ORDER);\n  const f: Readonly<FpField> = Object.freeze({\n    ORDER,\n    BITS,\n    BYTES,\n    MASK: bitMask(BITS),\n    ZERO: _0n,\n    ONE: _1n,\n    create: (num) => mod(num, ORDER),\n    isValid: (num) => {\n      if (typeof num !== 'bigint')\n        throw new Error(`Invalid field element: expected bigint, got ${typeof num}`);\n      return _0n <= num && num < ORDER; // 0 is valid element, but it's not invertible\n    },\n    is0: (num) => num === _0n,\n    isOdd: (num) => (num & _1n) === _1n,\n    neg: (num) => mod(-num, ORDER),\n    eql: (lhs, rhs) => lhs === rhs,\n\n    sqr: (num) => mod(num * num, ORDER),\n    add: (lhs, rhs) => mod(lhs + rhs, ORDER),\n    sub: (lhs, rhs) => mod(lhs - rhs, ORDER),\n    mul: (lhs, rhs) => mod(lhs * rhs, ORDER),\n    pow: (num, power) => FpPow(f, num, power),\n    div: (lhs, rhs) => mod(lhs * invert(rhs, ORDER), ORDER),\n\n    // Same as above, but doesn't normalize\n    sqrN: (num) => num * num,\n    addN: (lhs, rhs) => lhs + rhs,\n    subN: (lhs, rhs) => lhs - rhs,\n    mulN: (lhs, rhs) => lhs * rhs,\n\n    inv: (num) => invert(num, ORDER),\n    sqrt: redef.sqrt || ((n) => sqrtP(f, n)),\n    invertBatch: (lst) => FpInvertBatch(f, lst),\n    // TODO: do we really need constant cmov?\n    // We don't have const-time bigints anyway, so probably will be not very useful\n    cmov: (a, b, c) => (c ? b : a),\n    toBytes: (num) => (isLE ? numberToBytesLE(num, BYTES) : numberToBytesBE(num, BYTES)),\n    fromBytes: (bytes) => {\n      if (bytes.length !== BYTES)\n        throw new Error(`Fp.fromBytes: expected ${BYTES}, got ${bytes.length}`);\n      return isLE ? bytesToNumberLE(bytes) : bytesToNumberBE(bytes);\n    },\n  } as FpField);\n  return Object.freeze(f);\n}\n\nexport function FpSqrtOdd<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? root : Fp.neg(root);\n}\n\nexport function FpSqrtEven<T>(Fp: IField<T>, elm: T) {\n  if (!Fp.isOdd) throw new Error(`Field doesn't have isOdd`);\n  const root = Fp.sqrt(elm);\n  return Fp.isOdd(root) ? Fp.neg(root) : root;\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Same as mapKeyToField, but accepts less bytes (40 instead of 48 for 32-byte field).\n * Which makes it slightly more biased, less secure.\n * @deprecated use mapKeyToField instead\n */\nexport function hashToPrivateScalar(\n  hash: string | Uint8Array,\n  groupOrder: bigint,\n  isLE = false\n): bigint {\n  hash = ensureBytes('privateHash', hash);\n  const hashLen = hash.length;\n  const minLen = nLength(groupOrder).nByteLength + 8;\n  if (minLen < 24 || hashLen < minLen || hashLen > 1024)\n    throw new Error(`hashToPrivateScalar: expected ${minLen}-1024 bytes of input, got ${hashLen}`);\n  const num = isLE ? bytesToNumberLE(hash) : bytesToNumberBE(hash);\n  return mod(num, groupOrder - _1n) + _1n;\n}\n\n/**\n * Returns total number of bytes consumed by the field element.\n * For example, 32 bytes for usual 256-bit weierstrass curve.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of field\n */\nexport function getFieldBytesLength(fieldOrder: bigint): number {\n  if (typeof fieldOrder !== 'bigint') throw new Error('field order must be bigint');\n  const bitLength = fieldOrder.toString(2).length;\n  return Math.ceil(bitLength / 8);\n}\n\n/**\n * Returns minimal amount of bytes that can be safely reduced\n * by field order.\n * Should be 2^-128 for 128-bit curve such as P256.\n * @param fieldOrder number of field elements, usually CURVE.n\n * @returns byte length of target hash\n */\nexport function getMinHashLength(fieldOrder: bigint): number {\n  const length = getFieldBytesLength(fieldOrder);\n  return length + Math.ceil(length / 2);\n}\n\n/**\n * \"Constant-time\" private key generation utility.\n * Can take (n + n/2) or more bytes of uniform input e.g. from CSPRNG or KDF\n * and convert them into private scalar, with the modulo bias being negligible.\n * Needs at least 48 bytes of input for 32-byte private key.\n * https://research.kudelskisecurity.com/2020/07/28/the-definitive-guide-to-modulo-bias-and-how-to-avoid-it/\n * FIPS 186-5, A.2 https://csrc.nist.gov/publications/detail/fips/186/5/final\n * RFC 9380, https://www.rfc-editor.org/rfc/rfc9380#section-5\n * @param hash hash output from SHA3 or a similar function\n * @param groupOrder size of subgroup - (e.g. secp256k1.CURVE.n)\n * @param isLE interpret hash bytes as LE num\n * @returns valid private scalar\n */\nexport function mapHashToField(key: Uint8Array, fieldOrder: bigint, isLE = false): Uint8Array {\n  const len = key.length;\n  const fieldLen = getFieldBytesLength(fieldOrder);\n  const minLen = getMinHashLength(fieldOrder);\n  // No small numbers: need to understand bias story. No huge numbers: easier to detect JS timings.\n  if (len < 16 || len < minLen || len > 1024)\n    throw new Error(`expected ${minLen}-1024 bytes of input, got ${len}`);\n  const num = isLE ? bytesToNumberBE(key) : bytesToNumberLE(key);\n  // `mod(x, 11)` can sometimes produce 0. `mod(x, 10) + 1` is the same, but no 0\n  const reduced = mod(num, fieldOrder - _1n) + _1n;\n  return isLE ? numberToBytesLE(reduced, fieldLen) : numberToBytesBE(reduced, fieldLen);\n}\n","import { hash as assertHash, bytes as assertBytes, exists as assertExists } from './_assert.js';\nimport { Hash, CHash, Input, toBytes } from './utils.js';\n// HMAC (RFC 2104)\nexport class HMAC<T extends Hash<T>> extends Hash<HMAC<T>> {\n  oHash: T;\n  iHash: T;\n  blockLen: number;\n  outputLen: number;\n  private finished = false;\n  private destroyed = false;\n\n  constructor(hash: CHash, _key: Input) {\n    super();\n    assertHash(hash);\n    const key = toBytes(_key);\n    this.iHash = hash.create() as T;\n    if (typeof this.iHash.update !== 'function')\n      throw new Error('Expected instance of class which extends utils.Hash');\n    this.blockLen = this.iHash.blockLen;\n    this.outputLen = this.iHash.outputLen;\n    const blockLen = this.blockLen;\n    const pad = new Uint8Array(blockLen);\n    // blockLen can be bigger than outputLen\n    pad.set(key.length > blockLen ? hash.create().update(key).digest() : key);\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36;\n    this.iHash.update(pad);\n    // By doing update (processing of first block) of outer hash here we can re-use it between multiple calls via clone\n    this.oHash = hash.create() as T;\n    // Undo internal XOR && apply outer XOR\n    for (let i = 0; i < pad.length; i++) pad[i] ^= 0x36 ^ 0x5c;\n    this.oHash.update(pad);\n    pad.fill(0);\n  }\n  update(buf: Input) {\n    assertExists(this);\n    this.iHash.update(buf);\n    return this;\n  }\n  digestInto(out: Uint8Array) {\n    assertExists(this);\n    assertBytes(out, this.outputLen);\n    this.finished = true;\n    this.iHash.digestInto(out);\n    this.oHash.update(out);\n    this.oHash.digestInto(out);\n    this.destroy();\n  }\n  digest() {\n    const out = new Uint8Array(this.oHash.outputLen);\n    this.digestInto(out);\n    return out;\n  }\n  _cloneInto(to?: HMAC<T>): HMAC<T> {\n    // Create new instance without calling constructor since key already in state and we don't know it.\n    to ||= Object.create(Object.getPrototypeOf(this), {});\n    const { oHash, iHash, finished, destroyed, blockLen, outputLen } = this;\n    to = to as this;\n    to.finished = finished;\n    to.destroyed = destroyed;\n    to.blockLen = blockLen;\n    to.outputLen = outputLen;\n    to.oHash = oHash._cloneInto(to.oHash);\n    to.iHash = iHash._cloneInto(to.iHash);\n    return to;\n  }\n  destroy() {\n    this.destroyed = true;\n    this.oHash.destroy();\n    this.iHash.destroy();\n  }\n}\n\n/**\n * HMAC: RFC2104 message authentication code.\n * @param hash - function that would be used e.g. sha256\n * @param key - message key\n * @param message - message data\n */\nexport const hmac = (hash: CHash, key: Input, message: Input): Uint8Array =>\n  new HMAC<any>(hash, key).update(message).digest();\nhmac.create = (hash: CHash, key: Input) => new HMAC<any>(hash, key);\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Abelian group utilities\nimport { IField, validateField, nLength } from './modular.js';\nimport { validateObject } from './utils.js';\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\n\nexport type AffinePoint<T> = {\n  x: T;\n  y: T;\n} & { z?: never; t?: never };\n\nexport interface Group<T extends Group<T>> {\n  double(): T;\n  negate(): T;\n  add(other: T): T;\n  subtract(other: T): T;\n  equals(other: T): boolean;\n  multiply(scalar: bigint): T;\n}\n\nexport type GroupConstructor<T> = {\n  BASE: T;\n  ZERO: T;\n};\nexport type Mapper<T> = (i: T[]) => T[];\n\n// Elliptic curve multiplication of Point by scalar. Fragile.\n// Scalars should always be less than curve order: this should be checked inside of a curve itself.\n// Creates precomputation tables for fast multiplication:\n// - private scalar is split by fixed size windows of W bits\n// - every window point is collected from window's table & added to accumulator\n// - since windows are different, same point inside tables won't be accessed more than once per calc\n// - each multiplication is 'Math.ceil(CURVE_ORDER / 𝑊) + 1' point additions (fixed for any scalar)\n// - +1 window is neccessary for wNAF\n// - wNAF reduces table size: 2x less memory + 2x faster generation, but 10% slower multiplication\n// TODO: Research returning 2d JS array of windows, instead of a single window. This would allow\n// windows to be in different memory locations\nexport function wNAF<T extends Group<T>>(c: GroupConstructor<T>, bits: number) {\n  const constTimeNegate = (condition: boolean, item: T): T => {\n    const neg = item.negate();\n    return condition ? neg : item;\n  };\n  const opts = (W: number) => {\n    const windows = Math.ceil(bits / W) + 1; // +1, because\n    const windowSize = 2 ** (W - 1); // -1 because we skip zero\n    return { windows, windowSize };\n  };\n  return {\n    constTimeNegate,\n    // non-const time multiplication ladder\n    unsafeLadder(elm: T, n: bigint) {\n      let p = c.ZERO;\n      let d: T = elm;\n      while (n > _0n) {\n        if (n & _1n) p = p.add(d);\n        d = d.double();\n        n >>= _1n;\n      }\n      return p;\n    },\n\n    /**\n     * Creates a wNAF precomputation window. Used for caching.\n     * Default window size is set by `utils.precompute()` and is equal to 8.\n     * Number of precomputed points depends on the curve size:\n     * 2^(𝑊−1) * (Math.ceil(𝑛 / 𝑊) + 1), where:\n     * - 𝑊 is the window size\n     * - 𝑛 is the bitlength of the curve order.\n     * For a 256-bit curve and window size 8, the number of precomputed points is 128 * 33 = 4224.\n     * @returns precomputed point tables flattened to a single array\n     */\n    precomputeWindow(elm: T, W: number): Group<T>[] {\n      const { windows, windowSize } = opts(W);\n      const points: T[] = [];\n      let p: T = elm;\n      let base = p;\n      for (let window = 0; window < windows; window++) {\n        base = p;\n        points.push(base);\n        // =1, because we skip zero\n        for (let i = 1; i < windowSize; i++) {\n          base = base.add(p);\n          points.push(base);\n        }\n        p = base.double();\n      }\n      return points;\n    },\n\n    /**\n     * Implements ec multiplication using precomputed tables and w-ary non-adjacent form.\n     * @param W window size\n     * @param precomputes precomputed tables\n     * @param n scalar (we don't check here, but should be less than curve order)\n     * @returns real and fake (for const-time) points\n     */\n    wNAF(W: number, precomputes: T[], n: bigint): { p: T; f: T } {\n      // TODO: maybe check that scalar is less than group order? wNAF behavious is undefined otherwise\n      // But need to carefully remove other checks before wNAF. ORDER == bits here\n      const { windows, windowSize } = opts(W);\n\n      let p = c.ZERO;\n      let f = c.BASE;\n\n      const mask = BigInt(2 ** W - 1); // Create mask with W ones: 0b1111 for W=4 etc.\n      const maxNumber = 2 ** W;\n      const shiftBy = BigInt(W);\n\n      for (let window = 0; window < windows; window++) {\n        const offset = window * windowSize;\n        // Extract W bits.\n        let wbits = Number(n & mask);\n\n        // Shift number by W bits.\n        n >>= shiftBy;\n\n        // If the bits are bigger than max size, we'll split those.\n        // +224 => 256 - 32\n        if (wbits > windowSize) {\n          wbits -= maxNumber;\n          n += _1n;\n        }\n\n        // This code was first written with assumption that 'f' and 'p' will never be infinity point:\n        // since each addition is multiplied by 2 ** W, it cannot cancel each other. However,\n        // there is negate now: it is possible that negated element from low value\n        // would be the same as high element, which will create carry into next window.\n        // It's not obvious how this can fail, but still worth investigating later.\n\n        // Check if we're onto Zero point.\n        // Add random point inside current window to f.\n        const offset1 = offset;\n        const offset2 = offset + Math.abs(wbits) - 1; // -1 because we skip zero\n        const cond1 = window % 2 !== 0;\n        const cond2 = wbits < 0;\n        if (wbits === 0) {\n          // The most important part for const-time getPublicKey\n          f = f.add(constTimeNegate(cond1, precomputes[offset1]));\n        } else {\n          p = p.add(constTimeNegate(cond2, precomputes[offset2]));\n        }\n      }\n      // JIT-compiler should not eliminate f here, since it will later be used in normalizeZ()\n      // Even if the variable is still unused, there are some checks which will\n      // throw an exception, so compiler needs to prove they won't happen, which is hard.\n      // At this point there is a way to F be infinity-point even if p is not,\n      // which makes it less const-time: around 1 bigint multiply.\n      return { p, f };\n    },\n\n    wNAFCached(P: T, precomputesMap: Map<T, T[]>, n: bigint, transform: Mapper<T>): { p: T; f: T } {\n      // @ts-ignore\n      const W: number = P._WINDOW_SIZE || 1;\n      // Calculate precomputes on a first run, reuse them after\n      let comp = precomputesMap.get(P);\n      if (!comp) {\n        comp = this.precomputeWindow(P, W) as T[];\n        if (W !== 1) {\n          precomputesMap.set(P, transform(comp));\n        }\n      }\n      return this.wNAF(W, comp, n);\n    },\n  };\n}\n\n// Generic BasicCurve interface: works even for polynomial fields (BLS): P, n, h would be ok.\n// Though generator can be different (Fp2 / Fp6 for BLS).\nexport type BasicCurve<T> = {\n  Fp: IField<T>; // Field over which we'll do calculations (Fp)\n  n: bigint; // Curve order, total count of valid points in the field\n  nBitLength?: number; // bit length of curve order\n  nByteLength?: number; // byte length of curve order\n  h: bigint; // cofactor. we can assign default=1, but users will just ignore it w/o validation\n  hEff?: bigint; // Number to multiply to clear cofactor\n  Gx: T; // base point X coordinate\n  Gy: T; // base point Y coordinate\n  allowInfinityPoint?: boolean; // bls12-381 requires it. ZERO point is valid, but invalid pubkey\n};\n\nexport function validateBasic<FP, T>(curve: BasicCurve<FP> & T) {\n  validateField(curve.Fp);\n  validateObject(\n    curve,\n    {\n      n: 'bigint',\n      h: 'bigint',\n      Gx: 'field',\n      Gy: 'field',\n    },\n    {\n      nBitLength: 'isSafeInteger',\n      nByteLength: 'isSafeInteger',\n    }\n  );\n  // Set defaults\n  return Object.freeze({\n    ...nLength(curve.n, curve.nBitLength),\n    ...curve,\n    ...{ p: curve.Fp.ORDER },\n  } as const);\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((_c: ProjConstructor<T>, point: ProjPointType<T>, _isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      if (this.is0()) {\n        // (0, 1, 0) aka ZERO is invalid in most contexts.\n        // In BLS, ZERO can be serialized, so we allow it.\n        // (0, 0, 0) is wrong representation of ZERO and is always invalid.\n        if (CURVE.allowInfinityPoint && !Fp.is0(this.py)) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(_c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size\n     * (groupLen + ceil(groupLen / 2)) with modulo bias being negligible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const length = mod.getMinHashLength(CURVE.n);\n      return mod.mapHashToField(CURVE.randomBytes(length), CURVE.n);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e)); // check for being bytes\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * Simplified Shallue-van de Woestijne-Ulas Method\n * https://www.rfc-editor.org/rfc/rfc9380#section-6.6.2\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { hmac } from '@noble/hashes/hmac';\nimport { concatBytes, randomBytes } from '@noble/hashes/utils';\nimport { weierstrass, CurveType } from './abstract/weierstrass.js';\nimport { CHash } from './abstract/utils.js';\n\n// connects noble-curves to noble-hashes\nexport function getHash(hash: CHash) {\n  return {\n    hash,\n    hmac: (key: Uint8Array, ...msgs: Uint8Array[]) => hmac(hash, key, concatBytes(...msgs)),\n    randomBytes,\n  };\n}\n// Same API as @noble/hashes, with ability to create curve with custom hash\ntype CurveDef = Readonly<Omit<CurveType, 'hash' | 'hmac' | 'randomBytes'>>;\nexport function createCurve(curveDef: CurveDef, defHash: CHash) {\n  const create = (hash: CHash) => weierstrass({ ...curveDef, ...getHash(hash) });\n  return Object.freeze({ ...create(defHash), create });\n}\n","/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { sha256 } from '@noble/hashes/sha256';\nimport { randomBytes } from '@noble/hashes/utils';\nimport { Field, mod, pow2 } from './abstract/modular.js';\nimport { ProjPointType as PointType, mapToCurveSimpleSWU } from './abstract/weierstrass.js';\nimport type { Hex, PrivKey } from './abstract/utils.js';\nimport { bytesToNumberBE, concatBytes, ensureBytes, numberToBytesBE } from './abstract/utils.js';\nimport { createHasher, isogenyMap } from './abstract/hash-to-curve.js';\nimport { createCurve } from './_shortw_utils.js';\n\nconst secp256k1P = BigInt('0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffffc2f');\nconst secp256k1N = BigInt('0xfffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141');\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nconst divNearest = (a: bigint, b: bigint) => (a + b / _2n) / b;\n\n/**\n * √n = n^((p+1)/4) for fields p = 3 mod 4. We unwrap the loop and multiply bit-by-bit.\n * (P+1n/4n).toString(2) would produce bits [223x 1, 0, 22x 1, 4x 0, 11, 00]\n */\nfunction sqrtMod(y: bigint): bigint {\n  const P = secp256k1P;\n  // prettier-ignore\n  const _3n = BigInt(3), _6n = BigInt(6), _11n = BigInt(11), _22n = BigInt(22);\n  // prettier-ignore\n  const _23n = BigInt(23), _44n = BigInt(44), _88n = BigInt(88);\n  const b2 = (y * y * y) % P; // x^3, 11\n  const b3 = (b2 * b2 * y) % P; // x^7\n  const b6 = (pow2(b3, _3n, P) * b3) % P;\n  const b9 = (pow2(b6, _3n, P) * b3) % P;\n  const b11 = (pow2(b9, _2n, P) * b2) % P;\n  const b22 = (pow2(b11, _11n, P) * b11) % P;\n  const b44 = (pow2(b22, _22n, P) * b22) % P;\n  const b88 = (pow2(b44, _44n, P) * b44) % P;\n  const b176 = (pow2(b88, _88n, P) * b88) % P;\n  const b220 = (pow2(b176, _44n, P) * b44) % P;\n  const b223 = (pow2(b220, _3n, P) * b3) % P;\n  const t1 = (pow2(b223, _23n, P) * b22) % P;\n  const t2 = (pow2(t1, _6n, P) * b2) % P;\n  const root = pow2(t2, _2n, P);\n  if (!Fp.eql(Fp.sqr(root), y)) throw new Error('Cannot find square root');\n  return root;\n}\n\nconst Fp = Field(secp256k1P, undefined, undefined, { sqrt: sqrtMod });\n\nexport const secp256k1 = createCurve(\n  {\n    a: BigInt(0), // equation params: a, b\n    b: BigInt(7), // Seem to be rigid: bitcointalk.org/index.php?topic=289795.msg3183975#msg3183975\n    Fp, // Field's prime: 2n**256n - 2n**32n - 2n**9n - 2n**8n - 2n**7n - 2n**6n - 2n**4n - 1n\n    n: secp256k1N, // Curve order, total count of valid points in the field\n    // Base point (x, y) aka generator point\n    Gx: BigInt('55066263022277343669578718895168534326250603453777594175500187360389116729240'),\n    Gy: BigInt('32670510020758816978083085130507043184471273380659243275938904335757337482424'),\n    h: BigInt(1), // Cofactor\n    lowS: true, // Allow only low-S signatures by default in sign() and verify()\n    /**\n     * secp256k1 belongs to Koblitz curves: it has efficiently computable endomorphism.\n     * Endomorphism uses 2x less RAM, speeds up precomputation by 2x and ECDH / key recovery by 20%.\n     * For precomputed wNAF it trades off 1/2 init time & 1/3 ram for 20% perf hit.\n     * Explanation: https://gist.github.com/paulmillr/eb670806793e84df628a7c434a873066\n     */\n    endo: {\n      beta: BigInt('0x7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee'),\n      splitScalar: (k: bigint) => {\n        const n = secp256k1N;\n        const a1 = BigInt('0x3086d221a7d46bcde86c90e49284eb15');\n        const b1 = -_1n * BigInt('0xe4437ed6010e88286f547fa90abfe4c3');\n        const a2 = BigInt('0x114ca50f7a8e2f3f657c1108d9d44cfd8');\n        const b2 = a1;\n        const POW_2_128 = BigInt('0x100000000000000000000000000000000'); // (2n**128n).toString(16)\n\n        const c1 = divNearest(b2 * k, n);\n        const c2 = divNearest(-b1 * k, n);\n        let k1 = mod(k - c1 * a1 - c2 * a2, n);\n        let k2 = mod(-c1 * b1 - c2 * b2, n);\n        const k1neg = k1 > POW_2_128;\n        const k2neg = k2 > POW_2_128;\n        if (k1neg) k1 = n - k1;\n        if (k2neg) k2 = n - k2;\n        if (k1 > POW_2_128 || k2 > POW_2_128) {\n          throw new Error('splitScalar: Endomorphism failed, k=' + k);\n        }\n        return { k1neg, k1, k2neg, k2 };\n      },\n    },\n  },\n  sha256\n);\n\n// Schnorr signatures are superior to ECDSA from above. Below is Schnorr-specific BIP0340 code.\n// https://github.com/bitcoin/bips/blob/master/bip-0340.mediawiki\nconst _0n = BigInt(0);\nconst fe = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1P;\nconst ge = (x: bigint) => typeof x === 'bigint' && _0n < x && x < secp256k1N;\n/** An object mapping tags to their tagged hash prefix of [SHA256(tag) | SHA256(tag)] */\nconst TAGGED_HASH_PREFIXES: { [tag: string]: Uint8Array } = {};\nfunction taggedHash(tag: string, ...messages: Uint8Array[]): Uint8Array {\n  let tagP = TAGGED_HASH_PREFIXES[tag];\n  if (tagP === undefined) {\n    const tagH = sha256(Uint8Array.from(tag, (c) => c.charCodeAt(0)));\n    tagP = concatBytes(tagH, tagH);\n    TAGGED_HASH_PREFIXES[tag] = tagP;\n  }\n  return sha256(concatBytes(tagP, ...messages));\n}\n\n// ECDSA compact points are 33-byte. Schnorr is 32: we strip first byte 0x02 or 0x03\nconst pointToBytes = (point: PointType<bigint>) => point.toRawBytes(true).slice(1);\nconst numTo32b = (n: bigint) => numberToBytesBE(n, 32);\nconst modP = (x: bigint) => mod(x, secp256k1P);\nconst modN = (x: bigint) => mod(x, secp256k1N);\nconst Point = secp256k1.ProjectivePoint;\nconst GmulAdd = (Q: PointType<bigint>, a: bigint, b: bigint) =>\n  Point.BASE.multiplyAndAddUnsafe(Q, a, b);\n\n// Calculate point, scalar and bytes\nfunction schnorrGetExtPubKey(priv: PrivKey) {\n  let d_ = secp256k1.utils.normPrivateKeyToScalar(priv); // same method executed in fromPrivateKey\n  let p = Point.fromPrivateKey(d_); // P = d'⋅G; 0 < d' < n check is done inside\n  const scalar = p.hasEvenY() ? d_ : modN(-d_);\n  return { scalar: scalar, bytes: pointToBytes(p) };\n}\n/**\n * lift_x from BIP340. Convert 32-byte x coordinate to elliptic curve point.\n * @returns valid point checked for being on-curve\n */\nfunction lift_x(x: bigint): PointType<bigint> {\n  if (!fe(x)) throw new Error('bad x: need 0 < x < p'); // Fail if x ≥ p.\n  const xx = modP(x * x);\n  const c = modP(xx * x + BigInt(7)); // Let c = x³ + 7 mod p.\n  let y = sqrtMod(c); // Let y = c^(p+1)/4 mod p.\n  if (y % _2n !== _0n) y = modP(-y); // Return the unique point P such that x(P) = x and\n  const p = new Point(x, y, _1n); // y(P) = y if y mod 2 = 0 or y(P) = p-y otherwise.\n  p.assertValidity();\n  return p;\n}\n/**\n * Create tagged hash, convert it to bigint, reduce modulo-n.\n */\nfunction challenge(...args: Uint8Array[]): bigint {\n  return modN(bytesToNumberBE(taggedHash('BIP0340/challenge', ...args)));\n}\n\n/**\n * Schnorr public key is just `x` coordinate of Point as per BIP340.\n */\nfunction schnorrGetPublicKey(privateKey: Hex): Uint8Array {\n  return schnorrGetExtPubKey(privateKey).bytes; // d'=int(sk). Fail if d'=0 or d'≥n. Ret bytes(d'⋅G)\n}\n\n/**\n * Creates Schnorr signature as per BIP340. Verifies itself before returning anything.\n * auxRand is optional and is not the sole source of k generation: bad CSPRNG won't be dangerous.\n */\nfunction schnorrSign(\n  message: Hex,\n  privateKey: PrivKey,\n  auxRand: Hex = randomBytes(32)\n): Uint8Array {\n  const m = ensureBytes('message', message);\n  const { bytes: px, scalar: d } = schnorrGetExtPubKey(privateKey); // checks for isWithinCurveOrder\n  const a = ensureBytes('auxRand', auxRand, 32); // Auxiliary random data a: a 32-byte array\n  const t = numTo32b(d ^ bytesToNumberBE(taggedHash('BIP0340/aux', a))); // Let t be the byte-wise xor of bytes(d) and hash/aux(a)\n  const rand = taggedHash('BIP0340/nonce', t, px, m); // Let rand = hash/nonce(t || bytes(P) || m)\n  const k_ = modN(bytesToNumberBE(rand)); // Let k' = int(rand) mod n\n  if (k_ === _0n) throw new Error('sign failed: k is zero'); // Fail if k' = 0.\n  const { bytes: rx, scalar: k } = schnorrGetExtPubKey(k_); // Let R = k'⋅G.\n  const e = challenge(rx, px, m); // Let e = int(hash/challenge(bytes(R) || bytes(P) || m)) mod n.\n  const sig = new Uint8Array(64); // Let sig = bytes(R) || bytes((k + ed) mod n).\n  sig.set(rx, 0);\n  sig.set(numTo32b(modN(k + e * d)), 32);\n  // If Verify(bytes(P), m, sig) (see below) returns failure, abort\n  if (!schnorrVerify(sig, m, px)) throw new Error('sign: Invalid signature produced');\n  return sig;\n}\n\n/**\n * Verifies Schnorr signature.\n * Will swallow errors & return false except for initial type validation of arguments.\n */\nfunction schnorrVerify(signature: Hex, message: Hex, publicKey: Hex): boolean {\n  const sig = ensureBytes('signature', signature, 64);\n  const m = ensureBytes('message', message);\n  const pub = ensureBytes('publicKey', publicKey, 32);\n  try {\n    const P = lift_x(bytesToNumberBE(pub)); // P = lift_x(int(pk)); fail if that fails\n    const r = bytesToNumberBE(sig.subarray(0, 32)); // Let r = int(sig[0:32]); fail if r ≥ p.\n    if (!fe(r)) return false;\n    const s = bytesToNumberBE(sig.subarray(32, 64)); // Let s = int(sig[32:64]); fail if s ≥ n.\n    if (!ge(s)) return false;\n    const e = challenge(numTo32b(r), pointToBytes(P), m); // int(challenge(bytes(r)||bytes(P)||m))%n\n    const R = GmulAdd(P, s, modN(-e)); // R = s⋅G - e⋅P\n    if (!R || !R.hasEvenY() || R.toAffine().x !== r) return false; // -eP == (n-e)P\n    return true; // Fail if is_infinite(R) / not has_even_y(R) / x(R) ≠ r.\n  } catch (error) {\n    return false;\n  }\n}\n\nexport const schnorr = /* @__PURE__ */ (() => ({\n  getPublicKey: schnorrGetPublicKey,\n  sign: schnorrSign,\n  verify: schnorrVerify,\n  utils: {\n    randomPrivateKey: secp256k1.utils.randomPrivateKey,\n    lift_x,\n    pointToBytes,\n    numberToBytesBE,\n    bytesToNumberBE,\n    taggedHash,\n    mod,\n  },\n}))();\n\nconst isoMap = /* @__PURE__ */ (() =>\n  isogenyMap(\n    Fp,\n    [\n      // xNum\n      [\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa8c7',\n        '0x7d3d4c80bc321d5b9f315cea7fd44c5d595d2fc0bf63b92dfff1044f17c6581',\n        '0x534c328d23f234e6e2a413deca25caece4506144037c40314ecbd0b53d9dd262',\n        '0x8e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38e38daaaaa88c',\n      ],\n      // xDen\n      [\n        '0xd35771193d94918a9ca34ccbb7b640dd86cd409542f8487d9fe6b745781eb49b',\n        '0xedadc6f64383dc1df7c4b2d51b54225406d36b641f5e41bbc52a56612a8c6d14',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n      // yNum\n      [\n        '0x4bda12f684bda12f684bda12f684bda12f684bda12f684bda12f684b8e38e23c',\n        '0xc75e0c32d5cb7c0fa9d0a54b12a0a6d5647ab046d686da6fdffc90fc201d71a3',\n        '0x29a6194691f91a73715209ef6512e576722830a201be2018a765e85a9ecee931',\n        '0x2f684bda12f684bda12f684bda12f684bda12f684bda12f684bda12f38e38d84',\n      ],\n      // yDen\n      [\n        '0xfffffffffffffffffffffffffffffffffffffffffffffffffffffffefffff93b',\n        '0x7a06534bb8bdb49fd5e9e6632722c2989467c1bfc8e8d978dfb425d2685c2573',\n        '0x6484aa716545ca2cf3a70c3fa8fe337e0a3d21162f0d6299a7bf8192bfd2a76f',\n        '0x0000000000000000000000000000000000000000000000000000000000000001', // LAST 1\n      ],\n    ].map((i) => i.map((j) => BigInt(j))) as [bigint[], bigint[], bigint[], bigint[]]\n  ))();\nconst mapSWU = /* @__PURE__ */ (() =>\n  mapToCurveSimpleSWU(Fp, {\n    A: BigInt('0x3f8731abdd661adca08a5558f0f5d272e953d363cb6f0e5d405447c01a444533'),\n    B: BigInt('1771'),\n    Z: Fp.create(BigInt('-11')),\n  }))();\nconst htf = /* @__PURE__ */ (() =>\n  createHasher(\n    secp256k1.ProjectivePoint,\n    (scalars: bigint[]) => {\n      const { x, y } = mapSWU(Fp.create(scalars[0]));\n      return isoMap(x, y);\n    },\n    {\n      DST: 'secp256k1_XMD:SHA-256_SSWU_RO_',\n      encodeDST: 'secp256k1_XMD:SHA-256_SSWU_NU_',\n      p: Fp.ORDER,\n      m: 1,\n      k: 128,\n      expand: 'xmd',\n      hash: sha256,\n    }\n  ))();\nexport const hashToCurve = /* @__PURE__ */ (() => htf.hashToCurve)();\nexport const encodeToCurve = /* @__PURE__ */ (() => htf.encodeToCurve)();\n"],"names":["number","n","Number","isSafeInteger","Error","bytes","b","Uint8Array","lengths","length","includes","hash","create","outputLen","blockLen","exists","instance","checkFinished","destroyed","finished","output","out","min","crypto","globalThis","undefined","u8a","a","createView","arr","DataView","buffer","byteOffset","byteLength","rotr","word","shift","Uint32Array","toBytes","data","str","TextEncoder","encode","utf8ToBytes","Hash","clone","this","_cloneInto","wrapConstructor","hashCons","hashC","msg","update","digest","tmp","randomBytes","bytesLength","getRandomValues","SHA2","constructor","padOffset","isLE","super","pos","view","len","take","Math","set","subarray","process","dataView","roundClean","digestInto","fill","i","value","setBigUint64","_32n","BigInt","_u32_max","wh","wl","h","l","setUint32","oview","outLen","state","get","res","slice","destroy","to","Maj","c","SHA256_K","IV","SHA256_W","SHA256","A","B","C","D","E","F","G","H","offset","getUint32","W15","W2","s0","s1","T1","T2","sha256","_1n","_2n","hexes","Array","from","_","toString","padStart","bytesToHex","hex","hexToNumber","hexToBytes","array","j","hexByte","byte","parseInt","isNaN","bytesToNumberBE","bytesToNumberLE","reverse","numberToBytesBE","numberToBytesLE","ensureBytes","title","expectedLength","e","concatBytes","arrays","r","reduce","sum","pad","forEach","bitMask","u8n","u8fr","createHmacDrbg","hashLen","qByteLen","hmacFn","v","k","reset","reseed","seed","gen","sl","push","pred","validatorFns","bigint","val","function","boolean","string","stringOrUint8Array","isArray","field","object","Fp","isValid","validateObject","validators","optValidators","checkField","fieldName","type","isOptional","checkVal","String","Object","entries","_0n","_3n","_4n","_5n","_8n","mod","result","pow","num","power","modulo","pow2","x","invert","y","u","q","m","FpSqrt","P","p1div4","root","eql","sqr","c1","n2","mul","nv","sub","ONE","legendreC","Q","S","Z","Q1div2","neg","g","ZERO","t2","ge","tonelliShanks","FIELD_FIELDS","nLength","nBitLength","_nBitLength","nByteLength","ceil","getFieldBytesLength","fieldOrder","bitLength","getMinHashLength","HMAC","_key","assertHash","key","iHash","oHash","buf","assertExists","assertBytes","getPrototypeOf","hmac","message","validateBasic","curve","map","ORDER","MASK","BYTES","BITS","Gx","Gy","freeze","p","b2n","h2b","ut","DER","Err","_parseInt","d","toSig","sBytes","s","rBytesLeft","hexFromSig","sig","shl","rhl","rl","weierstrassPoints","opts","CURVE","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","endo","beta","splitScalar","validatePointOpts","_c","point","_isCompressed","toAffine","tail","weierstrassEquation","x2","x3","add","isWithinCurveOrder","assertGE","normPrivateKeyToScalar","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","fromAffine","is0","normalizeZ","points","toInv","invertBatch","fromHex","assertValidity","fromPrivateKey","privateKey","BASE","multiply","_setWindowSize","windowSize","_WINDOW_SIZE","delete","left","right","hasEvenY","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","double","b3","X3","Y3","Z3","t0","t1","t3","t4","t5","subtract","wNAF","wnaf","wNAFCached","comp","multiplyUnsafe","I","unsafeLadder","k1neg","k1","k2neg","k2","k1p","k2p","scalar","fake","f","f1p","f2p","constTimeNegate","multiplyAndAddUnsafe","iz","z","inv","ax","ay","zz","cofactor","toRawBytes","isCompressed","toHex","_bits","bits","condition","item","W","windows","elm","precomputeWindow","base","window","precomputes","mask","maxNumber","shiftBy","wbits","offset1","offset2","abs","cond1","cond2","precomputesMap","transform","ProjectivePoint","weierstrass","curveDef","bits2int","bits2int_modN","lowS","validateOpts","CURVE_ORDER","compressedLen","uncompressedLen","modN","invN","cat","head","y2","sqrt","numToNByteStr","isBiggerThanHalfOrder","slcNum","Signature","recovery","fromCompact","fromDER","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","normalizeS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","utils","isValidPrivateKey","randomPrivateKey","fieldLen","minLen","reduced","precompute","isProbPub","delta","ORDER_MASK","int2octets","prepSig","defaultSigOpts","some","prehash","extraEntropy","ent","h1int","seedArgs","k2sig","kBytes","ik","normS","defaultVerOpts","getPublicKey","getSharedSecret","privateA","publicB","sign","privKey","drbg","verify","signature","publicKey","sg","_sig","derError","is","getHash","msgs","secp256k1P","secp256k1N","divNearest","sqrtMod","_6n","_11n","_22n","_23n","_44n","_88n","b2","b6","b9","b11","b22","b44","b88","b176","b220","b223","bitLen","redef","sqrtP","lhs","rhs","FpPow","div","sqrN","addN","subN","mulN","lst","nums","lastMultiplied","acc","inverted","reduceRight","FpInvertBatch","cmov","Field","secp256k1","defHash","createCurve","a1","b1","a2","POW_2_128","c2"],"sourceRoot":""}