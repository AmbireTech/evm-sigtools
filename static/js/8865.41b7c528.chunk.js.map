{"version":3,"file":"static/js/8865.41b7c528.chunk.js","mappings":"6LAAA,eAASA,OAAAA,eAAAA,EAAAA,kBAAAA,CAAAC,YAAAA,EAAAC,IAAAA,WAAA,SAAAC,eAAe,G,mOCCxB,eAEA,WAGaA,EAAAA,SAAAA,G,kBAKX,WAAYC,EAAgBC,GAAgB,wBAC1C,gBAHMC,aAAe,IAAIC,IAIzB,EAAKH,KAAOA,EACZ,EAAKC,IAAMA,EAH+B,CAI3C,C,4DAED,mFACEG,KAAKC,KAAK,UAAW,CAAEC,QAASF,KAAKE,UADvC,mE,yGAKA,iJ,yEAIA,WACE,OAAOF,KAAKJ,KAAKM,OAClB,G,gDAGD,WAAcC,GAAd,uHACUC,EAAwBD,EAAxBC,OADV,EACkCD,EAAhBE,OAAAA,OADlB,MAC2B,GAD3B,OAGUD,EAHV,OAIS,iBAJT,OAOS,gBAPT,MAQS,gBART,OAWS,kBAXT,OAwBS,aAxBT,QAqCS,sBArCT,MAsCS,yBAtCT,QAmDS,wBAnDT,QAsFS,oBAtFT,QA2FS,mBA3FT,QA8FS,gBA9FT,QAiGS,4BAjGT,QAoGS,qBApGT,QAuGS,yBAvGT,QA0GS,uBA1GT,QA6GS,6BA7GT,QA+HS,8BA/HT,QA8IS,oBA9IT,QAkJS,aAlJT,QAsJS,gBAtJT,QAyJS,iBAzJT,QA4JS,0BA5JT,QA+JS,8BA/JT,QAkKS,qBAlKT,iDAKa,CAACJ,KAAKJ,KAAKU,cALxB,4CASkBN,KAAKE,QAAQK,SAAS,MATxC,cAYiCF,EAZjC,GAYaG,EAZb,KAYsBC,EAZtB,KAcUT,KAAKJ,KAAKU,YAAYI,gBAAkBD,EAAQC,cAd1D,sBAec,IAAIC,MAAM,0CAfxB,wBAkB6BX,KAAKH,IAAIe,IAAIC,YAAYL,GAlBtD,eAkBYM,EAlBZ,OAmBYC,EAAY,cAAeD,EAAWA,EAASC,eAAYC,EAnBvE,kBAqBaD,GAAa,MArB1B,eAyBqCV,EAzBrC,GAyBaI,EAzBb,KAyBsBQ,EAzBtB,KA2BUjB,KAAKJ,KAAKU,YAAYI,gBAAkBD,EAAQC,eAAkBO,EAAYC,WAAW,MA3BnG,uBA4Bc,IAAIP,MAAM,0CA5BxB,yBA+B6BX,KAAKH,IAAIe,IAAIC,YAAYI,GA/BtD,eA+BYH,EA/BZ,OAgCYC,EAAY,cAAeD,EAAWA,EAASC,eAAYC,EAhCvE,kBAkCaD,GAAa,MAlC1B,eAuCmCV,EAvCnC,GAuCaI,EAvCb,KAuCsBU,EAvCtB,KAwCYC,EAAuC,kBAAdD,EAAyBE,KAAKC,MAAMH,GAAaA,EAE5EnB,KAAKJ,KAAKU,YAAYI,gBAAkBD,EAAQC,cA1C1D,uBA2Cc,IAAIC,MAAM,0BA3CxB,yBA8C6BX,KAAKH,IAAIe,IAAIW,iBAAiBH,GA9C3D,eA8CYN,EA9CZ,OA+CYC,EAAY,cAAeD,EAAWA,EAASC,eAAYC,EA/CvE,kBAgDaD,GAAa,MAhD1B,cA6D4B,kBAThBS,EAAEhC,OAAAA,OAAAA,CACNiC,MAAO,IACPC,KAAM,MACHrB,EAAO,KAMEsB,KAAoBH,EAAGG,IAAIT,WAAW,QAClDM,EAAGG,IAAMC,SAASJ,EAAGG,IAAK,KA9DlC,UAiEyB3B,KAAKH,IAAIe,IAAIiB,KAAK,CACnCjB,IAAK,CAACY,GACNnB,OAAQ,CAAEyB,UAAWN,EAAGG,OAnEhC,eAiEYI,EAjEZ,OAuEM/B,KAAKF,aAAakC,IAAID,EAAKE,WAAY,CACrCC,KAAMlC,KAAKJ,KAAKU,YAChB6B,KAAMJ,EAAKE,WACXN,IAAK,EACLS,SAAU,OACVC,MAAO,EACPC,MAAOd,EAAGE,KACVD,MAAOD,EAAGC,MACVc,GAAIf,EAAGe,GACPC,UAAW,KACXC,YAAa,KACbC,iBAAkB,OAlF1B,kBAoFaX,EAAKE,YApFlB,yBAuF0BjC,KAAKH,IAAI8C,IAAIC,iBAAiB,CAAC,WAvFzD,eAuFYC,EAvFZ,yBAyFaA,EAAMC,QAzFnB,iCA4Fa9C,KAAKH,IAAI8C,IAAII,WAAW,EAAC,IAAAC,cAAa3C,EAAO,IAAKA,EAAO,MA5FtE,iCA+FaL,KAAKH,IAAI8C,IAAIM,QAAQ,EAAC,IAAAD,cAAa3C,EAAO,IAAKA,EAAO,MA/FnE,iCAkGaL,KAAKH,IAAI8C,IAAIO,oBAAoB,EAAC,IAAAF,cAAa3C,EAAO,IAAKA,EAAO,MAlG/E,iCAqGaL,KAAKH,IAAI8C,IAAIQ,aAAa,EAAC,IAAAH,cAAa3C,EAAO,IAAKA,EAAO,GAAIA,EAAO,MArGnF,iCAwGaL,KAAKH,IAAI8C,IAAIC,iBAAiB,CAACvC,EAAO,GAAIA,EAAO,MAxG9D,iCA2GaL,KAAKH,IAAI8C,IAAIS,eAAe,CAAC/C,EAAO,GAAIA,EAAO,MA3G5D,eA8GUgD,EAAShD,EAAO,GA9G1B,oBAgH2BL,KAAKH,IAAIe,IAAI0C,gBAAgBD,GAhHxD,QAgHctB,EAhHd,OAiHQsB,EAAStB,EAAKsB,QAAUA,EAjHhC,+DAoHUrD,KAAKF,aAAayD,IAAIF,GApHhC,0CAqHerD,KAAKF,aAAaJ,IAAI2D,IArHrC,iCAuHarD,KAAKH,IAAI8C,IAAIa,qBAAqB,CAACH,IAASI,MAAK,SAACjC,GAKvD,OAHIA,IACFA,EAAGW,KAAO9B,EAAO,IAEZmB,CACR,KA7HP,eAgIU6B,EAAShD,EAAO,GAhI1B,oBAkI2BL,KAAKH,IAAIe,IAAI0C,gBAAgBD,GAlIxD,QAkIctB,EAlId,OAmIQsB,EAAStB,EAAKsB,QAAUA,EAnIhC,oFAqIarD,KAAKH,IAAI8C,IAAIe,sBAAsB,CAACL,IAASI,MAAK,SAACjC,GAKxD,OAHIA,IACFA,EAAGmC,gBAAkBtD,EAAO,IAEvBmB,CACR,KA3IP,iCA+IaxB,KAAKH,IAAI8C,IAAIiB,eAAevD,EAAO,KA/IhD,iCAmJaL,KAAKH,IAAI8C,IAAIkB,KAAK,CAACxD,EAAO,GAAIA,EAAO,MAnJlD,iCAuJaL,KAAKH,IAAI8C,IAAImB,YAAY,CAACzD,EAAO,MAvJ9C,iCA0JaL,KAAKH,IAAI8C,IAAIoB,eA1J1B,iCA6Ja/D,KAAKH,IAAImE,OAAOC,kBA7J7B,iCAgKajE,KAAKH,IAAImE,OAAOE,mBAAmB7D,EAAO,KAhKvD,iCAmKaL,KAAKH,IAAI8C,IAAIwB,gBAAgB,CAAC9D,EAAO,MAnKlD,cAsKYM,MAAM,IAAD,OAAKR,EAAQC,OAAb,sBAtKjB,mE,yEA4KA,SAAKD,EAAciE,GACZjE,GAASiE,EAAS,qBACvBpE,KAAKG,QAAQA,GACVsD,MAAK,SAACY,GAAD,OAAYD,EAAS,KAAM,CAAEE,QAAS,MAAOC,GAAIpE,EAAQoE,GAAIF,OAAAA,GAA7D,IACLG,OAAM,SAACC,GAAD,OAAWL,EAASK,EAAO,KAA3B,GACV,K,EA1MU9E,CAAwB+E,EAAAA,cAArCC,EAAAA,gBAAAA,C,6FCNAA,EAAAA,aAAA,SAA6BlD,GAC3B,OAAIA,EACKA,EAAMf,cAERe,CACR,C","sources":["../node_modules/@safe-global/safe-apps-provider/src/index.ts","../node_modules/@safe-global/safe-apps-provider/src/provider.ts","../node_modules/@safe-global/safe-apps-provider/src/utils.ts"],"sourcesContent":["export { SafeAppProvider } from './provider';\n","import SafeAppsSDK, { SafeInfo, Web3TransactionObject } from '@safe-global/safe-apps-sdk';\nimport { EventEmitter } from 'events';\nimport { EIP1193Provider } from './types';\nimport { getLowerCase } from './utils';\n\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nexport class SafeAppProvider extends EventEmitter implements EIP1193Provider {\n  private readonly safe: SafeInfo;\n  private readonly sdk: SafeAppsSDK;\n  private submittedTxs = new Map<string, Web3TransactionObject>();\n\n  constructor(safe: SafeInfo, sdk: SafeAppsSDK) {\n    super();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  async connect(): Promise<void> {\n    this.emit('connect', { chainId: this.chainId });\n    return;\n  }\n\n  async disconnect(): Promise<void> {\n    return;\n  }\n\n  public get chainId(): number {\n    return this.safe.chainId;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(request: { method: string; params?: any[] }): Promise<any> {\n    const { method, params = [] } = request;\n\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n\n      case 'personal_sign': {\n        const [message, address] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        const response = await this.sdk.txs.signMessage(message);\n        const signature = 'signature' in response ? response.signature : undefined;\n\n        return signature || '0x';\n      }\n\n      case 'eth_sign': {\n        const [address, messageHash] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        const response = await this.sdk.txs.signMessage(messageHash);\n        const signature = 'signature' in response ? response.signature : undefined;\n\n        return signature || '0x';\n      }\n\n      case 'eth_signTypedData':\n      case 'eth_signTypedData_v4': {\n        const [address, typedData] = params;\n        const parsedTypedData = typeof typedData === 'string' ? JSON.parse(typedData) : typedData;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address is invalid');\n        }\n\n        const response = await this.sdk.txs.signTypedMessage(parsedTypedData);\n        const signature = 'signature' in response ? response.signature : undefined;\n        return signature || '0x';\n      }\n\n      case 'eth_sendTransaction':\n        const tx = {\n          value: '0',\n          data: '0x',\n          ...params[0],\n        };\n\n        // Some ethereum libraries might pass the gas as a hex-encoded string\n        // We need to convert it to a number because the SDK expects a number and our backend only supports\n        // Decimal numbers\n        if (typeof tx.gas === 'string' && tx.gas.startsWith('0x')) {\n          tx.gas = parseInt(tx.gas, 16);\n        }\n\n        const resp = await this.sdk.txs.send({\n          txs: [tx],\n          params: { safeTxGas: tx.gas },\n        });\n\n        // Store fake transaction\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null,\n        });\n        return resp.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getTransactionCount':\n        return this.sdk.eth.getTransactionCount([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([getLowerCase(params[0]), params[1], params[2]]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        // Use fake transaction if we don't have a real tx hash\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n        return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n          return tx;\n        });\n\n      case 'eth_getTransactionReceipt': {\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.transactionHash = params[0];\n          }\n          return tx;\n        });\n      }\n\n      case 'eth_estimateGas': {\n        return this.sdk.eth.getEstimateGas(params[0]);\n      }\n\n      case 'eth_call': {\n        return this.sdk.eth.call([params[0], params[1]]);\n      }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      case 'eth_gasPrice':\n        return this.sdk.eth.getGasPrice();\n\n      case 'wallet_getPermissions':\n        return this.sdk.wallet.getPermissions();\n\n      case 'wallet_requestPermissions':\n        return this.sdk.wallet.requestPermissions(params[0]);\n\n      case 'safe_setSettings':\n        return this.sdk.eth.setSafeSettings([params[0]]);\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n\n  // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  send(request: any, callback: (error: any, response?: any) => void): void {\n    if (!request) callback('Undefined request');\n    this.request(request)\n      .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch((error) => callback(error, null));\n  }\n}\n","export function getLowerCase(value: string): string {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\n"],"names":["Object","enumerable","get","SafeAppProvider","safe","sdk","submittedTxs","Map","this","emit","chainId","request","method","params","safeAddress","toString","message","address","toLowerCase","Error","txs","signMessage","response","signature","undefined","messageHash","startsWith","typedData","parsedTypedData","JSON","parse","signTypedMessage","tx","value","data","gas","parseInt","send","safeTxGas","resp","set","safeTxHash","from","hash","gasPrice","nonce","input","to","blockHash","blockNumber","transactionIndex","eth","getBlockByNumber","block","number","getBalance","getLowerCase","getCode","getTransactionCount","getStorageAt","getBlockByHash","txHash","getBySafeTxHash","has","getTransactionByHash","then","getTransactionReceipt","transactionHash","getEstimateGas","call","getPastLogs","getGasPrice","wallet","getPermissions","requestPermissions","setSafeSettings","callback","result","jsonrpc","id","catch","error","events_1","exports"],"sourceRoot":""}