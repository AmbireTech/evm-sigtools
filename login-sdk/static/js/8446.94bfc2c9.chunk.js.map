{"version":3,"file":"static/js/8446.94bfc2c9.chunk.js","mappings":"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","sources":["../node_modules/@gnosis.pm/safe-apps-provider/src/index.ts","../node_modules/@gnosis.pm/safe-apps-provider/src/provider.ts","../node_modules/@gnosis.pm/safe-apps-provider/src/utils.ts"],"sourcesContent":["export { SafeAppProvider } from './provider';\n","import SafeAppsSDK, { SafeInfo, Web3TransactionObject } from '@gnosis.pm/safe-apps-sdk';\nimport { EventEmitter } from 'events';\nimport { EIP1193Provider } from './types';\nimport { getLowerCase } from './utils';\n\n// The API is based on Ethereum JavaScript API Provider Standard. Link: https://eips.ethereum.org/EIPS/eip-1193\nexport class SafeAppProvider extends EventEmitter implements EIP1193Provider {\n  private readonly safe: SafeInfo;\n  private readonly sdk: SafeAppsSDK;\n  private submittedTxs = new Map<string, Web3TransactionObject>();\n\n  constructor(safe: SafeInfo, sdk: SafeAppsSDK) {\n    super();\n    this.safe = safe;\n    this.sdk = sdk;\n  }\n\n  async connect(): Promise<void> {\n    this.emit('connect', { chainId: this.chainId });\n    return;\n  }\n\n  async disconnect(): Promise<void> {\n    return;\n  }\n\n  public get chainId(): number {\n    return this.safe.chainId;\n  }\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  async request(request: { method: string; params?: any[] }): Promise<any> {\n    const { method, params = [] } = request;\n\n    switch (method) {\n      case 'eth_accounts':\n        return [this.safe.safeAddress];\n\n      case 'net_version':\n      case 'eth_chainId':\n        return `0x${this.chainId.toString(16)}`;\n\n      case 'personal_sign': {\n        const [message, address] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase()) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        await this.sdk.txs.signMessage(message);\n\n        return '0x';\n      }\n\n      case 'eth_sign': {\n        const [address, messageHash] = params;\n\n        if (this.safe.safeAddress.toLowerCase() !== address.toLowerCase() || !messageHash.startsWith('0x')) {\n          throw new Error('The address or message hash is invalid');\n        }\n\n        await this.sdk.txs.signMessage(messageHash);\n\n        return '0x';\n      }\n\n      case 'eth_sendTransaction':\n        const tx = {\n          value: '0',\n          data: '0x',\n          ...params[0],\n        };\n\n        const resp = await this.sdk.txs.send({\n          txs: [tx],\n        });\n        // Store fake transaction\n        this.submittedTxs.set(resp.safeTxHash, {\n          from: this.safe.safeAddress,\n          hash: resp.safeTxHash,\n          gas: 0,\n          gasPrice: '0x00',\n          nonce: 0,\n          input: tx.data,\n          value: tx.value,\n          to: tx.to,\n          blockHash: null,\n          blockNumber: null,\n          transactionIndex: null,\n        });\n        return resp.safeTxHash;\n\n      case 'eth_blockNumber':\n        const block = await this.sdk.eth.getBlockByNumber(['latest']);\n\n        return block.number;\n\n      case 'eth_getBalance':\n        return this.sdk.eth.getBalance([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getCode':\n        return this.sdk.eth.getCode([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getTransactionCount':\n        return this.sdk.eth.getTransactionCount([getLowerCase(params[0]), params[1]]);\n\n      case 'eth_getStorageAt':\n        return this.sdk.eth.getStorageAt([getLowerCase(params[0]), params[1], params[2]]);\n\n      case 'eth_getBlockByNumber':\n        return this.sdk.eth.getBlockByNumber([params[0], params[1]]);\n\n      case 'eth_getBlockByHash':\n        return this.sdk.eth.getBlockByHash([params[0], params[1]]);\n\n      case 'eth_getTransactionByHash':\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        // Use fake transaction if we don't have a real tx hash\n        if (this.submittedTxs.has(txHash)) {\n          return this.submittedTxs.get(txHash);\n        }\n        return this.sdk.eth.getTransactionByHash([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.hash = params[0];\n          }\n          return tx;\n        });\n\n      case 'eth_getTransactionReceipt': {\n        let txHash = params[0];\n        try {\n          const resp = await this.sdk.txs.getBySafeTxHash(txHash);\n          txHash = resp.txHash || txHash;\n        } catch (e) {}\n        return this.sdk.eth.getTransactionReceipt([txHash]).then((tx) => {\n          // We set the tx hash to the one requested, as some provider assert this\n          if (tx) {\n            tx.transactionHash = params[0];\n          }\n          return tx;\n        });\n      }\n\n      case 'eth_estimateGas': {\n        return this.sdk.eth.getEstimateGas(params[0]);\n      }\n\n      case 'eth_call': {\n        return this.sdk.eth.call([params[0], params[1]]);\n      }\n\n      case 'eth_getLogs':\n        return this.sdk.eth.getPastLogs([params[0]]);\n\n      case 'eth_gasPrice':\n        return this.sdk.eth.getGasPrice();\n\n      default:\n        throw Error(`\"${request.method}\" not implemented`);\n    }\n  }\n\n  // this method is needed for ethers v4\n  // https://github.com/ethers-io/ethers.js/blob/427e16826eb15d52d25c4f01027f8db22b74b76c/src.ts/providers/web3-provider.ts#L41-L55\n  send(request: any, callback: (error: any, response?: any) => void): void {\n    if (!request) callback('Undefined request');\n    this.request(request)\n      .then((result) => callback(null, { jsonrpc: '2.0', id: request.id, result }))\n      .catch((error) => callback(error, null));\n  }\n}\n","export function getLowerCase(value: string): string {\n  if (value) {\n    return value.toLowerCase();\n  }\n  return value;\n}\n"],"names":["Object","enumerable","get","SafeAppProvider","safe","sdk","submittedTxs","Map","this","emit","chainId","request","method","params","safeAddress","toString","message","address","toLowerCase","Error","txs","signMessage","messageHash","startsWith","tx","value","data","send","resp","set","safeTxHash","from","hash","gas","gasPrice","nonce","input","to","blockHash","blockNumber","transactionIndex","eth","getBlockByNumber","block","number","getBalance","getLowerCase","getCode","getTransactionCount","getStorageAt","getBlockByHash","txHash","getBySafeTxHash","has","getTransactionByHash","then","getTransactionReceipt","transactionHash","getEstimateGas","call","getPastLogs","getGasPrice","callback","result","jsonrpc","id","catch","error","events_1","exports"],"sourceRoot":""}