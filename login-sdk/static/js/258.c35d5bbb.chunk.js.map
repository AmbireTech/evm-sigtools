{"version":3,"file":"static/js/258.c35d5bbb.chunk.js","mappings":"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","sources":["../node_modules/@ethereumjs/tx/src/baseTransaction.ts","../node_modules/@ethereumjs/tx/src/eip1559Transaction.ts","../node_modules/@ethereumjs/tx/src/eip2930Transaction.ts","../node_modules/@ethereumjs/tx/src/index.ts","../node_modules/@ethereumjs/tx/src/legacyTransaction.ts","../node_modules/@ethereumjs/tx/src/transactionFactory.ts","../node_modules/@ethereumjs/tx/src/types.ts","../node_modules/@ethereumjs/tx/src/util.ts","../node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/src/chains/index.ts","../node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/src/eips/index.ts","../node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/src/hardforks/index.ts","../node_modules/@ethereumjs/tx/node_modules/@ethereumjs/common/src/index.ts","../node_modules/crc-32/crc32.js"],"sourcesContent":["import Common, { Chain, Hardfork } from '@ethereumjs/common'\nimport {\n  Address,\n  BN,\n  toBuffer,\n  MAX_INTEGER,\n  MAX_UINT64,\n  unpadBuffer,\n  ecsign,\n  publicToAddress,\n  BNLike,\n  bufferToHex,\n} from 'ethereumjs-util'\nimport {\n  TxData,\n  JsonTx,\n  AccessListEIP2930ValuesArray,\n  AccessListEIP2930TxData,\n  FeeMarketEIP1559ValuesArray,\n  FeeMarketEIP1559TxData,\n  TxValuesArray,\n  Capability,\n} from './types'\n\ninterface TransactionCache {\n  hash: Buffer | undefined\n  dataFee?: {\n    value: BN\n    hardfork: string | Hardfork\n  }\n}\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nexport abstract class BaseTransaction<TransactionObject> {\n  private readonly _type: number\n\n  public readonly nonce: BN\n  public readonly gasLimit: BN\n  public readonly to?: Address\n  public readonly value: BN\n  public readonly data: Buffer\n\n  public readonly v?: BN\n  public readonly r?: BN\n  public readonly s?: BN\n\n  public readonly common!: Common\n\n  protected cache: TransactionCache = {\n    hash: undefined,\n    dataFee: undefined,\n  }\n\n  /**\n   * List of tx type defining EIPs,\n   * e.g. 1559 (fee market) and 2930 (access lists)\n   * for FeeMarketEIP1559Transaction objects\n   */\n  protected activeCapabilities: number[] = []\n\n  /**\n   * The default chain the tx falls back to if no Common\n   * is provided and if the chain can't be derived from\n   * a passed in chainId (only EIP-2718 typed txs) or\n   * EIP-155 signature (legacy txs).\n   *\n   * @hidden\n   */\n  protected DEFAULT_CHAIN = Chain.Mainnet\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK: string | Hardfork = Hardfork.Istanbul\n\n  constructor(txData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData) {\n    const { nonce, gasLimit, to, value, data, v, r, s, type } = txData\n    this._type = new BN(toBuffer(type)).toNumber()\n\n    const toB = toBuffer(to === '' ? '0x' : to)\n    const vB = toBuffer(v === '' ? '0x' : v)\n    const rB = toBuffer(r === '' ? '0x' : r)\n    const sB = toBuffer(s === '' ? '0x' : s)\n\n    this.nonce = new BN(toBuffer(nonce === '' ? '0x' : nonce))\n    this.gasLimit = new BN(toBuffer(gasLimit === '' ? '0x' : gasLimit))\n    this.to = toB.length > 0 ? new Address(toB) : undefined\n    this.value = new BN(toBuffer(value === '' ? '0x' : value))\n    this.data = toBuffer(data === '' ? '0x' : data)\n\n    this.v = vB.length > 0 ? new BN(vB) : undefined\n    this.r = rB.length > 0 ? new BN(rB) : undefined\n    this.s = sB.length > 0 ? new BN(sB) : undefined\n\n    this._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s })\n\n    // geth limits gasLimit to 2^64-1\n    this._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64)\n\n    // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n    this._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true)\n  }\n\n  /**\n   * Alias for {@link BaseTransaction.type}\n   *\n   * @deprecated Use `type` instead\n   */\n  get transactionType(): number {\n    return this.type\n  }\n\n  /**\n   * Returns the transaction type.\n   *\n   * Note: legacy txs will return tx type `0`.\n   */\n  get type() {\n    return this._type\n  }\n\n  /**\n   * Checks if a tx type defining capability is active\n   * on a tx, for example the EIP-1559 fee market mechanism\n   * or the EIP-2930 access list feature.\n   *\n   * Note that this is different from the tx type itself,\n   * so EIP-2930 access lists can very well be active\n   * on an EIP-1559 tx for example.\n   *\n   * This method can be useful for feature checks if the\n   * tx type is unknown (e.g. when instantiated with\n   * the tx factory).\n   *\n   * See `Capabilites` in the `types` module for a reference\n   * on all supported capabilities.\n   */\n  supports(capability: Capability) {\n    return this.activeCapabilities.includes(capability)\n  }\n\n  /**\n   * Checks if the transaction has the minimum amount of gas required\n   * (DataFee + TxFee + Creation Fee).\n   */\n  validate(): boolean\n  validate(stringError: false): boolean\n  validate(stringError: true): string[]\n  validate(stringError: boolean = false): boolean | string[] {\n    const errors = []\n\n    if (this.getBaseFee().gt(this.gasLimit)) {\n      errors.push(`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`)\n    }\n\n    if (this.isSigned() && !this.verifySignature()) {\n      errors.push('Invalid Signature')\n    }\n\n    return stringError ? errors : errors.length === 0\n  }\n\n  /**\n   * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n   */\n  getBaseFee(): BN {\n    const fee = this.getDataFee().addn(this.common.param('gasPrices', 'tx'))\n    if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n      fee.iaddn(this.common.param('gasPrices', 'txCreation'))\n    }\n    return fee\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    const txDataZero = this.common.param('gasPrices', 'txDataZero')\n    const txDataNonZero = this.common.param('gasPrices', 'txDataNonZero')\n\n    let cost: number | BN = 0\n    for (let i = 0; i < this.data.length; i++) {\n      this.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero)\n    }\n\n    cost = new BN(cost)\n    if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n      const dataLength = Math.ceil(this.data.length / 32)\n      const initCodeCost = new BN(this.common.param('gasPrices', 'initCodeWordCost')).imuln(\n        dataLength\n      )\n      cost.iadd(initCodeCost)\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  abstract getUpfrontCost(): BN\n\n  /**\n   * If the tx's `to` is to the creation address\n   */\n  toCreationAddress(): boolean {\n    return this.to === undefined || this.to.buf.length === 0\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of this transaction, in order.\n   *\n   * Use {@link BaseTransaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link BaseTransaction.getMessageToSign}.\n   */\n  abstract raw(): TxValuesArray | AccessListEIP2930ValuesArray | FeeMarketEIP1559ValuesArray\n\n  /**\n   * Returns the encoding of the transaction.\n   */\n  abstract serialize(): Buffer\n\n  // Returns the unsigned tx (hashed or raw), which is used to sign the transaction.\n  //\n  // Note: do not use code docs here since VS Studio is then not able to detect the\n  // comments from the inherited methods\n  abstract getMessageToSign(hashMessage: false): Buffer | Buffer[]\n  abstract getMessageToSign(hashMessage?: true): Buffer\n\n  abstract hash(): Buffer\n\n  abstract getMessageToVerifySignature(): Buffer\n\n  public isSigned(): boolean {\n    const { v, r, s } = this\n    if (this.type === 0) {\n      if (!v || !r || !s) {\n        return false\n      } else {\n        return true\n      }\n    } else {\n      if (v === undefined || !r || !s) {\n        return false\n      } else {\n        return true\n      }\n    }\n  }\n\n  /**\n   * Determines if the signature is valid\n   */\n  verifySignature(): boolean {\n    try {\n      // Main signature verification is done in `getSenderPublicKey()`\n      const publicKey = this.getSenderPublicKey()\n      return unpadBuffer(publicKey).length !== 0\n    } catch (e: any) {\n      return false\n    }\n  }\n\n  /**\n   * Returns the sender's address\n   */\n  getSenderAddress(): Address {\n    return new Address(publicToAddress(this.getSenderPublicKey()))\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  abstract getSenderPublicKey(): Buffer\n\n  /**\n   * Signs a transaction.\n   *\n   * Note that the signed tx is returned as a new object,\n   * use as follows:\n   * ```javascript\n   * const signedTx = tx.sign(privateKey)\n   * ```\n   */\n  sign(privateKey: Buffer): TransactionObject {\n    if (privateKey.length !== 32) {\n      const msg = this._errorMsg('Private key must be 32 bytes in length.')\n      throw new Error(msg)\n    }\n\n    // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n    // and want to recreate a signature (where EIP155 should be applied)\n    // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n    // 2021-06-23\n    let hackApplied = false\n    if (\n      this.type === 0 &&\n      this.common.gteHardfork('spuriousDragon') &&\n      !this.supports(Capability.EIP155ReplayProtection)\n    ) {\n      this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n      hackApplied = true\n    }\n\n    const msgHash = this.getMessageToSign(true)\n    const { v, r, s } = ecsign(msgHash, privateKey)\n    const tx = this._processSignature(v, r, s)\n\n    // Hack part 2\n    if (hackApplied) {\n      const index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection)\n      if (index > -1) {\n        this.activeCapabilities.splice(index, 1)\n      }\n    }\n\n    return tx\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  abstract toJSON(): JsonTx\n\n  // Accept the v,r,s values from the `sign` method, and convert this into a TransactionObject\n  protected abstract _processSignature(v: number, r: Buffer, s: Buffer): TransactionObject\n\n  /**\n   * Does chain ID checks on common and returns a common\n   * to be used on instantiation\n   * @hidden\n   *\n   * @param common - {@link Common} instance from tx options\n   * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n   */\n  protected _getCommon(common?: Common, chainId?: BNLike) {\n    // Chain ID provided\n    if (chainId) {\n      const chainIdBN = new BN(toBuffer(chainId))\n      if (common) {\n        if (!common.chainIdBN().eq(chainIdBN)) {\n          const msg = this._errorMsg('The chain ID does not match the chain ID of Common')\n          throw new Error(msg)\n        }\n        // Common provided, chain ID does match\n        // -> Return provided Common\n        return common.copy()\n      } else {\n        if (Common.isSupportedChainId(chainIdBN)) {\n          // No Common, chain ID supported by Common\n          // -> Instantiate Common with chain ID\n          return new Common({ chain: chainIdBN, hardfork: this.DEFAULT_HARDFORK })\n        } else {\n          // No Common, chain ID not supported by Common\n          // -> Instantiate custom Common derived from DEFAULT_CHAIN\n          return Common.forCustomChain(\n            this.DEFAULT_CHAIN,\n            {\n              name: 'custom-chain',\n              networkId: chainIdBN,\n              chainId: chainIdBN,\n            },\n            this.DEFAULT_HARDFORK\n          )\n        }\n      }\n    } else {\n      // No chain ID provided\n      // -> return Common provided or create new default Common\n      return (\n        common?.copy() ?? new Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK })\n      )\n    }\n  }\n\n  /**\n   * Validates that an object with BN values cannot exceed the specified bit limit.\n   * @param values Object containing string keys and BN values\n   * @param bits Number of bits to check (64 or 256)\n   * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n   */\n  protected _validateCannotExceedMaxInteger(\n    values: { [key: string]: BN | undefined },\n    bits = 256,\n    cannotEqual = false\n  ) {\n    for (const [key, value] of Object.entries(values)) {\n      switch (bits) {\n        case 64:\n          if (cannotEqual) {\n            if (value?.gte(MAX_UINT64)) {\n              const msg = this._errorMsg(\n                `${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          } else {\n            if (value?.gt(MAX_UINT64)) {\n              const msg = this._errorMsg(`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`)\n              throw new Error(msg)\n            }\n          }\n          break\n        case 256:\n          if (cannotEqual) {\n            if (value?.gte(MAX_INTEGER)) {\n              const msg = this._errorMsg(\n                `${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          } else {\n            if (value?.gt(MAX_INTEGER)) {\n              const msg = this._errorMsg(\n                `${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`\n              )\n              throw new Error(msg)\n            }\n          }\n          break\n        default: {\n          const msg = this._errorMsg('unimplemented bits value')\n          throw new Error(msg)\n        }\n      }\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public abstract errorStr(): string\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected abstract _errorMsg(msg: string): string\n\n  /**\n   * Returns the shared error postfix part for _error() method\n   * tx type implementations.\n   */\n  protected _getSharedErrorPostfix() {\n    let hash = ''\n    try {\n      hash = this.isSigned() ? bufferToHex(this.hash()) : 'not available (unsigned)'\n    } catch (e: any) {\n      hash = 'error'\n    }\n    let isSigned = ''\n    try {\n      isSigned = this.isSigned().toString()\n    } catch (e: any) {\n      hash = 'error'\n    }\n    let hf = ''\n    try {\n      hf = this.common.hardfork()\n    } catch (e: any) {\n      hf = 'error'\n    }\n\n    let postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `\n    postfix += `signed=${isSigned} hf=${hf}`\n\n    return postfix\n  }\n}\n","import {\n  BN,\n  bnToHex,\n  bnToUnpaddedBuffer,\n  ecrecover,\n  keccak256,\n  MAX_INTEGER,\n  rlp,\n  toBuffer,\n  validateNoLeadingZeroes,\n} from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { BaseTransaction } from './baseTransaction'\nimport {\n  AccessList,\n  AccessListBuffer,\n  FeeMarketEIP1559TxData,\n  FeeMarketEIP1559ValuesArray,\n  JsonTx,\n  N_DIV_2,\n  TxOptions,\n} from './types'\nimport { AccessLists, checkMaxInitCodeSize } from './util'\n\nconst TRANSACTION_TYPE = 2\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex')\n\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\nexport default class FeeMarketEIP1559Transaction extends BaseTransaction<FeeMarketEIP1559Transaction> {\n  public readonly chainId: BN\n  public readonly accessList: AccessListBuffer\n  public readonly AccessListJSON: AccessList\n  public readonly maxPriorityFeePerGas: BN\n  public readonly maxFeePerGas: BN\n\n  public readonly common: Common\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK = 'london'\n\n  /**\n   * EIP-2930 alias for `r`\n   *\n   * @deprecated use `r` instead\n   */\n  get senderR() {\n    return this.r\n  }\n\n  /**\n   * EIP-2930 alias for `s`\n   *\n   * @deprecated use `s` instead\n   */\n  get senderS() {\n    return this.s\n  }\n\n  /**\n   * EIP-2930 alias for `v`\n   *\n   * @deprecated use `v` instead\n   */\n  get yParity() {\n    return this.v\n  }\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n    return new FeeMarketEIP1559Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\n        `Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n          .slice(0, 1)\n          .toString('hex')}`\n      )\n    }\n\n    const values = rlp.decode(serialized.slice(1))\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array')\n    }\n\n    return FeeMarketEIP1559Transaction.fromValuesArray(values as any, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link FeeMarketEIP1559Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link FeeMarketEIP1559Transaction.fromSerializedTx} constructor\n   */\n  public static fromRlpSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    return FeeMarketEIP1559Transaction.fromSerializedTx(serialized, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   */\n  public static fromValuesArray(values: FeeMarketEIP1559ValuesArray, opts: TxOptions = {}) {\n    if (values.length !== 9 && values.length !== 12) {\n      throw new Error(\n        'Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).'\n      )\n    }\n\n    const [\n      chainId,\n      nonce,\n      maxPriorityFeePerGas,\n      maxFeePerGas,\n      gasLimit,\n      to,\n      value,\n      data,\n      accessList,\n      v,\n      r,\n      s,\n    ] = values\n\n    validateNoLeadingZeroes({ nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, value, v, r, s })\n\n    return new FeeMarketEIP1559Transaction(\n      {\n        chainId: new BN(chainId),\n        nonce,\n        maxPriorityFeePerGas,\n        maxFeePerGas,\n        gasLimit,\n        to,\n        value,\n        data,\n        accessList: accessList ?? [],\n        v: v !== undefined ? new BN(v) : undefined, // EIP2930 supports v's with value 0 (empty Buffer)\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE })\n    const { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData\n\n    this.common = this._getCommon(opts.common, chainId)\n    this.chainId = this.common.chainIdBN()\n\n    if (!this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common')\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930])\n\n    // Populate the access list fields\n    const accessListData = AccessLists.getAccessListData(accessList ?? [])\n    this.accessList = accessListData.accessList\n    this.AccessListJSON = accessListData.AccessListJSON\n    // Verify the access list format.\n    AccessLists.verifyAccessList(this.accessList)\n\n    this.maxFeePerGas = new BN(toBuffer(maxFeePerGas === '' ? '0x' : maxFeePerGas))\n    this.maxPriorityFeePerGas = new BN(\n      toBuffer(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas)\n    )\n\n    this._validateCannotExceedMaxInteger({\n      maxFeePerGas: this.maxFeePerGas,\n      maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n    })\n\n    if (this.gasLimit.mul(this.maxFeePerGas).gt(MAX_INTEGER)) {\n      const msg = this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)')\n      throw new Error(msg)\n    }\n\n    if (this.maxFeePerGas.lt(this.maxPriorityFeePerGas)) {\n      const msg = this._errorMsg(\n        'maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)'\n      )\n      throw new Error(msg)\n    }\n\n    if (this.v && !this.v.eqn(0) && !this.v.eqn(1)) {\n      const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1')\n      throw new Error(msg)\n    }\n\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    if (this.common.isActivatedEIP(3860)) {\n      checkMaxInitCodeSize(this.common, this.data.length)\n    }\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    const cost = super.getDataFee()\n    cost.iaddn(AccessLists.getDataFeeEIP2930(this.accessList, this.common))\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   * @param baseFee The base fee of the block (will be set to 0 if not provided)\n   */\n  getUpfrontCost(baseFee: BN = new BN(0)): BN {\n    const inclusionFeePerGas = BN.min(this.maxPriorityFeePerGas, this.maxFeePerGas.sub(baseFee))\n    const gasPrice = inclusionFeePerGas.add(baseFee)\n    return this.gasLimit.mul(gasPrice).add(this.value)\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-1559 transaction, in order.\n   *\n   * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS]`\n   *\n   * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n   */\n  raw(): FeeMarketEIP1559ValuesArray {\n    return [\n      bnToUnpaddedBuffer(this.chainId),\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.maxPriorityFeePerGas),\n      bnToUnpaddedBuffer(this.maxFeePerGas),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n      this.accessList,\n      this.v !== undefined ? bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the EIP-1559 transaction.\n   *\n   * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, signatureYParity, signatureR, signatureS])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize(): Buffer {\n    const base = this.raw()\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n  }\n\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true): Buffer {\n    const base = this.raw().slice(0, 9)\n    const message = Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n    if (hashMessage) {\n      return keccak256(message)\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  public hash(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(this.serialize())\n      }\n      return this.cache.hash\n    }\n\n    return keccak256(this.serialize())\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  public getMessageToVerifySignature(): Buffer {\n    return this.getMessageToSign()\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  public getSenderPublicKey(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    const msgHash = this.getMessageToVerifySignature()\n\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    const { v, r, s } = this\n    try {\n      return ecrecover(\n        msgHash,\n        v!.addn(27), // Recover the 27 which was stripped from ecsign\n        bnToUnpaddedBuffer(r!),\n        bnToUnpaddedBuffer(s!)\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  _processSignature(v: number, r: Buffer, s: Buffer) {\n    const opts = {\n      common: this.common,\n    }\n\n    return FeeMarketEIP1559Transaction.fromTxData(\n      {\n        chainId: this.chainId,\n        nonce: this.nonce,\n        maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        maxFeePerGas: this.maxFeePerGas,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: new BN(v - 27), // This looks extremely hacky: ethereumjs-util actually adds 27 to the value, the recovery bit is either 0 or 1.\n        r: new BN(r),\n        s: new BN(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON(): JsonTx {\n    const accessListJSON = AccessLists.getAccessListJSON(this.accessList)\n\n    return {\n      chainId: bnToHex(this.chainId),\n      nonce: bnToHex(this.nonce),\n      maxPriorityFeePerGas: bnToHex(this.maxPriorityFeePerGas),\n      maxFeePerGas: bnToHex(this.maxFeePerGas),\n      gasLimit: bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? bnToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    errorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","import {\n  BN,\n  bnToHex,\n  bnToUnpaddedBuffer,\n  ecrecover,\n  keccak256,\n  MAX_INTEGER,\n  rlp,\n  toBuffer,\n  validateNoLeadingZeroes,\n} from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { BaseTransaction } from './baseTransaction'\nimport {\n  AccessList,\n  AccessListBuffer,\n  AccessListEIP2930TxData,\n  AccessListEIP2930ValuesArray,\n  JsonTx,\n  TxOptions,\n  N_DIV_2,\n} from './types'\n\nimport { AccessLists, checkMaxInitCodeSize } from './util'\n\nconst TRANSACTION_TYPE = 1\nconst TRANSACTION_TYPE_BUFFER = Buffer.from(TRANSACTION_TYPE.toString(16).padStart(2, '0'), 'hex')\n\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\nexport default class AccessListEIP2930Transaction extends BaseTransaction<AccessListEIP2930Transaction> {\n  public readonly chainId: BN\n  public readonly accessList: AccessListBuffer\n  public readonly AccessListJSON: AccessList\n  public readonly gasPrice: BN\n\n  public readonly common: Common\n\n  /**\n   * The default HF if the tx type is active on that HF\n   * or the first greater HF where the tx is active.\n   *\n   * @hidden\n   */\n  protected DEFAULT_HARDFORK = 'berlin'\n\n  /**\n   * EIP-2930 alias for `r`\n   *\n   * @deprecated use `r` instead\n   */\n  get senderR() {\n    return this.r\n  }\n\n  /**\n   * EIP-2930 alias for `s`\n   *\n   * @deprecated use `s` instead\n   */\n  get senderS() {\n    return this.s\n  }\n\n  /**\n   * EIP-2930 alias for `v`\n   *\n   * @deprecated use `v` instead\n   */\n  get yParity() {\n    return this.v\n  }\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n    return new AccessListEIP2930Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    if (!serialized.slice(0, 1).equals(TRANSACTION_TYPE_BUFFER)) {\n      throw new Error(\n        `Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${serialized\n          .slice(0, 1)\n          .toString('hex')}`\n      )\n    }\n\n    const values = rlp.decode(serialized.slice(1))\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input: must be array')\n    }\n\n    return AccessListEIP2930Transaction.fromValuesArray(values as any, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link AccessListEIP2930Transaction.fromSerializedTx})\n   *\n   * Note: This means that the Buffer should start with 0x01.\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link AccessListEIP2930Transaction.fromSerializedTx} constructor\n   */\n  public static fromRlpSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    return AccessListEIP2930Transaction.fromSerializedTx(serialized, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   */\n  public static fromValuesArray(values: AccessListEIP2930ValuesArray, opts: TxOptions = {}) {\n    if (values.length !== 8 && values.length !== 11) {\n      throw new Error(\n        'Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).'\n      )\n    }\n\n    const [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values\n\n    validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s })\n\n    const emptyAccessList: AccessList = []\n\n    return new AccessListEIP2930Transaction(\n      {\n        chainId: new BN(chainId),\n        nonce,\n        gasPrice,\n        gasLimit,\n        to,\n        value,\n        data,\n        accessList: accessList ?? emptyAccessList,\n        v: v !== undefined ? new BN(v) : undefined, // EIP2930 supports v's with value 0 (empty Buffer)\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE })\n    const { chainId, accessList, gasPrice } = txData\n\n    this.common = this._getCommon(opts.common, chainId)\n    this.chainId = this.common.chainIdBN()\n\n    // EIP-2718 check is done in Common\n    if (!this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common')\n    }\n    this.activeCapabilities = this.activeCapabilities.concat([2718, 2930])\n\n    // Populate the access list fields\n    const accessListData = AccessLists.getAccessListData(accessList ?? [])\n    this.accessList = accessListData.accessList\n    this.AccessListJSON = accessListData.AccessListJSON\n    // Verify the access list format.\n    AccessLists.verifyAccessList(this.accessList)\n\n    this.gasPrice = new BN(toBuffer(gasPrice === '' ? '0x' : gasPrice))\n\n    this._validateCannotExceedMaxInteger({\n      gasPrice: this.gasPrice,\n    })\n\n    if (this.gasPrice.mul(this.gasLimit).gt(MAX_INTEGER)) {\n      const msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER')\n      throw new Error(msg)\n    }\n    if (this.v && !this.v.eqn(0) && !this.v.eqn(1)) {\n      const msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1')\n      throw new Error(msg)\n    }\n\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    if (this.common.isActivatedEIP(3860)) {\n      checkMaxInitCodeSize(this.common, this.data.length)\n    }\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    const cost = super.getDataFee()\n    cost.iaddn(AccessLists.getDataFeeEIP2930(this.accessList, this.common))\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: cost,\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return cost\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost(): BN {\n    return this.gasLimit.mul(this.gasPrice).add(this.value)\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the EIP-2930 transaction, in order.\n   *\n   * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)]`\n   *\n   * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n   * with {@link Block.fromValuesArray}.\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n   */\n  raw(): AccessListEIP2930ValuesArray {\n    return [\n      bnToUnpaddedBuffer(this.chainId),\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.gasPrice),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n      this.accessList,\n      this.v !== undefined ? bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the EIP-2930 transaction.\n   *\n   * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * signatureYParity (v), signatureR (r), signatureS (s)])`\n   *\n   * Note that in contrast to the legacy tx serialization format this is not\n   * valid RLP any more due to the raw tx type preceding and concatenated to\n   * the RLP encoding of the values.\n   */\n  serialize(): Buffer {\n    const base = this.raw()\n    return Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n  }\n\n  /**\n   * Returns the serialized unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: in contrast to the legacy tx the raw message format is already\n   * serialized and doesn't need to be RLP encoded any more.\n   *\n   * ```javascript\n   * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage = true): Buffer {\n    const base = this.raw().slice(0, 8)\n    const message = Buffer.concat([TRANSACTION_TYPE_BUFFER, rlp.encode(base as any)])\n    if (hashMessage) {\n      return keccak256(message)\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  public hash(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = keccak256(this.serialize())\n      }\n      return this.cache.hash\n    }\n\n    return keccak256(this.serialize())\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  public getMessageToVerifySignature(): Buffer {\n    return this.getMessageToSign()\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  public getSenderPublicKey(): Buffer {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('Cannot call this method if transaction is not signed')\n      throw new Error(msg)\n    }\n\n    const msgHash = this.getMessageToVerifySignature()\n\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    const { yParity, r, s } = this\n    try {\n      return ecrecover(\n        msgHash,\n        yParity!.addn(27), // Recover the 27 which was stripped from ecsign\n        bnToUnpaddedBuffer(r!),\n        bnToUnpaddedBuffer(s!)\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  _processSignature(v: number, r: Buffer, s: Buffer) {\n    const opts = {\n      common: this.common,\n    }\n\n    return AccessListEIP2930Transaction.fromTxData(\n      {\n        chainId: this.chainId,\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: new BN(v - 27), // This looks extremely hacky: ethereumjs-util actually adds 27 to the value, the recovery bit is either 0 or 1.\n        r: new BN(r),\n        s: new BN(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction\n   */\n  toJSON(): JsonTx {\n    const accessListJSON = AccessLists.getAccessListJSON(this.accessList)\n\n    return {\n      chainId: bnToHex(this.chainId),\n      nonce: bnToHex(this.nonce),\n      gasPrice: bnToHex(this.gasPrice),\n      gasLimit: bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      accessList: accessListJSON,\n      v: this.v !== undefined ? bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? bnToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n    errorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","export { default as Transaction } from './legacyTransaction'\nexport { default as AccessListEIP2930Transaction } from './eip2930Transaction'\nexport { default as TransactionFactory } from './transactionFactory'\nexport { default as FeeMarketEIP1559Transaction } from './eip1559Transaction'\nexport * from './types'\n","import {\n  BN,\n  bnToHex,\n  bnToUnpaddedBuffer,\n  ecrecover,\n  MAX_INTEGER,\n  rlp,\n  rlphash,\n  toBuffer,\n  unpadBuffer,\n  validateNoLeadingZeroes,\n} from 'ethereumjs-util'\nimport { TxOptions, TxData, JsonTx, N_DIV_2, TxValuesArray, Capability } from './types'\nimport { BaseTransaction } from './baseTransaction'\nimport Common from '@ethereumjs/common'\nimport { checkMaxInitCodeSize } from './util'\n\nconst TRANSACTION_TYPE = 0\n\n/**\n * An Ethereum non-typed (legacy) transaction\n */\nexport default class Transaction extends BaseTransaction<Transaction> {\n  public readonly gasPrice: BN\n\n  public readonly common: Common\n\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  public static fromTxData(txData: TxData, opts: TxOptions = {}) {\n    return new Transaction(txData, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   */\n  public static fromSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    const values = rlp.decode(serialized)\n\n    if (!Array.isArray(values)) {\n      throw new Error('Invalid serialized tx input. Must be array')\n    }\n\n    return this.fromValuesArray(values, opts)\n  }\n\n  /**\n   * Instantiate a transaction from the serialized tx.\n   * (alias of {@link Transaction.fromSerializedTx})\n   *\n   * @deprecated this constructor alias is deprecated and will be removed\n   * in favor of the {@link Transaction.fromSerializedTx} constructor\n   */\n  public static fromRlpSerializedTx(serialized: Buffer, opts: TxOptions = {}) {\n    return Transaction.fromSerializedTx(serialized, opts)\n  }\n\n  /**\n   * Create a transaction from a values array.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   */\n  public static fromValuesArray(values: TxValuesArray, opts: TxOptions = {}) {\n    // If length is not 6, it has length 9. If v/r/s are empty Buffers, it is still an unsigned transaction\n    // This happens if you get the RLP data from `raw()`\n    if (values.length !== 6 && values.length !== 9) {\n      throw new Error(\n        'Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).'\n      )\n    }\n\n    const [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values\n\n    validateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s })\n\n    return new Transaction(\n      {\n        nonce,\n        gasPrice,\n        gasLimit,\n        to,\n        value,\n        data,\n        v,\n        r,\n        s,\n      },\n      opts\n    )\n  }\n\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  public constructor(txData: TxData, opts: TxOptions = {}) {\n    super({ ...txData, type: TRANSACTION_TYPE })\n\n    this.common = this._validateTxV(this.v, opts.common)\n\n    this.gasPrice = new BN(toBuffer(txData.gasPrice === '' ? '0x' : txData.gasPrice))\n\n    if (this.gasPrice.mul(this.gasLimit).gt(MAX_INTEGER)) {\n      const msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)')\n      throw new Error(msg)\n    }\n    this._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice })\n\n    if (this.common.gteHardfork('spuriousDragon')) {\n      if (!this.isSigned()) {\n        this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        const v = this.v!\n        const chainIdDoubled = this.common.chainIdBN().muln(2)\n\n        // v and chain ID meet EIP-155 conditions\n        if (v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))) {\n          this.activeCapabilities.push(Capability.EIP155ReplayProtection)\n        }\n      }\n    }\n\n    if (this.common.isActivatedEIP(3860)) {\n      checkMaxInitCodeSize(this.common, this.data.length)\n    }\n\n    const freeze = opts?.freeze ?? true\n    if (freeze) {\n      Object.freeze(this)\n    }\n  }\n\n  /**\n   * Returns a Buffer Array of the raw Buffers of the legacy transaction, in order.\n   *\n   * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n   *\n   * For legacy txs this is also the correct format to add transactions\n   * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n   * for typed txs).\n   *\n   * For an unsigned tx this method returns the empty Buffer values\n   * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n   * representation have a look at {@link Transaction.getMessageToSign}.\n   */\n  raw(): TxValuesArray {\n    return [\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.gasPrice),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n      this.v !== undefined ? bnToUnpaddedBuffer(this.v) : Buffer.from([]),\n      this.r !== undefined ? bnToUnpaddedBuffer(this.r) : Buffer.from([]),\n      this.s !== undefined ? bnToUnpaddedBuffer(this.s) : Buffer.from([]),\n    ]\n  }\n\n  /**\n   * Returns the serialized encoding of the legacy transaction.\n   *\n   * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n   *\n   * For an unsigned tx this method uses the empty Buffer values for the\n   * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n   * representation for external signing use {@link Transaction.getMessageToSign}.\n   */\n  serialize(): Buffer {\n    return rlp.encode(this.raw())\n  }\n\n  private _getMessageToSign() {\n    const values = [\n      bnToUnpaddedBuffer(this.nonce),\n      bnToUnpaddedBuffer(this.gasPrice),\n      bnToUnpaddedBuffer(this.gasLimit),\n      this.to !== undefined ? this.to.buf : Buffer.from([]),\n      bnToUnpaddedBuffer(this.value),\n      this.data,\n    ]\n\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      values.push(toBuffer(this.common.chainIdBN()))\n      values.push(unpadBuffer(toBuffer(0)))\n      values.push(unpadBuffer(toBuffer(0)))\n    }\n\n    return values\n  }\n\n  /**\n   * Returns the unsigned tx (hashed or raw), which can be used\n   * to sign the transaction (e.g. for sending to a hardware wallet).\n   *\n   * Note: the raw message message format for the legacy tx is not RLP encoded\n   * and you might need to do yourself with:\n   *\n   * ```javascript\n   * import { rlp } from 'ethereumjs-util'\n   * const message = tx.getMessageToSign(false)\n   * const serializedMessage = rlp.encode(message) // use this for the HW wallet input\n   * ```\n   *\n   * @param hashMessage - Return hashed message if set to true (default: true)\n   */\n  getMessageToSign(hashMessage: false): Buffer[]\n  getMessageToSign(hashMessage?: true): Buffer\n  getMessageToSign(hashMessage = true) {\n    const message = this._getMessageToSign()\n    if (hashMessage) {\n      return rlphash(message)\n    } else {\n      return message\n    }\n  }\n\n  /**\n   * The amount of gas paid for the data in this tx\n   */\n  getDataFee(): BN {\n    if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n      return this.cache.dataFee.value\n    }\n\n    if (Object.isFrozen(this)) {\n      this.cache.dataFee = {\n        value: super.getDataFee(),\n        hardfork: this.common.hardfork(),\n      }\n    }\n\n    return super.getDataFee()\n  }\n\n  /**\n   * The up front amount that an account must have for this transaction to be valid\n   */\n  getUpfrontCost(): BN {\n    return this.gasLimit.mul(this.gasPrice).add(this.value)\n  }\n\n  /**\n   * Computes a sha3-256 hash of the serialized tx.\n   *\n   * This method can only be used for signed txs (it throws otherwise).\n   * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n   */\n  hash(): Buffer {\n    // In contrast to the tx type transaction implementations the `hash()` function\n    // for the legacy tx does not throw if the tx is not signed.\n    // This has been considered for inclusion but lead to unexpected backwards\n    // compatibility problems (no concrete reference found, needs validation).\n    //\n    // For context see also https://github.com/ethereumjs/ethereumjs-monorepo/pull/1445,\n    // September, 2021 as well as work done before.\n    //\n    // This should be updated along the next major version release by adding:\n    //\n    //if (!this.isSigned()) {\n    //  const msg = this._errorMsg('Cannot call hash method if transaction is not signed')\n    //  throw new Error(msg)\n    //}\n\n    if (Object.isFrozen(this)) {\n      if (!this.cache.hash) {\n        this.cache.hash = rlphash(this.raw())\n      }\n      return this.cache.hash\n    }\n\n    return rlphash(this.raw())\n  }\n\n  /**\n   * Computes a sha3-256 hash which can be used to verify the signature\n   */\n  getMessageToVerifySignature() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed')\n      throw new Error(msg)\n    }\n    const message = this._getMessageToSign()\n    return rlphash(message)\n  }\n\n  /**\n   * Returns the public key of the sender\n   */\n  getSenderPublicKey(): Buffer {\n    const msgHash = this.getMessageToVerifySignature()\n\n    // EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2 are considered invalid.\n    // Reasoning: https://ethereum.stackexchange.com/a/55728\n    if (this.common.gteHardfork('homestead') && this.s?.gt(N_DIV_2)) {\n      const msg = this._errorMsg(\n        'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid'\n      )\n      throw new Error(msg)\n    }\n\n    const { v, r, s } = this\n    try {\n      return ecrecover(\n        msgHash,\n        v!,\n        bnToUnpaddedBuffer(r!),\n        bnToUnpaddedBuffer(s!),\n        this.supports(Capability.EIP155ReplayProtection) ? this.common.chainIdBN() : undefined\n      )\n    } catch (e: any) {\n      const msg = this._errorMsg('Invalid Signature')\n      throw new Error(msg)\n    }\n  }\n\n  /**\n   * Process the v, r, s values from the `sign` method of the base transaction.\n   */\n  protected _processSignature(v: number, r: Buffer, s: Buffer) {\n    const vBN = new BN(v)\n    if (this.supports(Capability.EIP155ReplayProtection)) {\n      vBN.iadd(this.common.chainIdBN().muln(2).addn(8))\n    }\n\n    const opts = {\n      common: this.common,\n    }\n\n    return Transaction.fromTxData(\n      {\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        v: vBN,\n        r: new BN(r),\n        s: new BN(s),\n      },\n      opts\n    )\n  }\n\n  /**\n   * Returns an object with the JSON representation of the transaction.\n   */\n  toJSON(): JsonTx {\n    return {\n      nonce: bnToHex(this.nonce),\n      gasPrice: bnToHex(this.gasPrice),\n      gasLimit: bnToHex(this.gasLimit),\n      to: this.to !== undefined ? this.to.toString() : undefined,\n      value: bnToHex(this.value),\n      data: '0x' + this.data.toString('hex'),\n      v: this.v !== undefined ? bnToHex(this.v) : undefined,\n      r: this.r !== undefined ? bnToHex(this.r) : undefined,\n      s: this.s !== undefined ? bnToHex(this.s) : undefined,\n    }\n  }\n\n  /**\n   * Validates tx's `v` value\n   */\n  private _validateTxV(v?: BN, common?: Common): Common {\n    let chainIdBN\n    // No unsigned tx and EIP-155 activated and chain ID included\n    if (\n      v !== undefined &&\n      !v.eqn(0) &&\n      (!common || common.gteHardfork('spuriousDragon')) &&\n      !v.eqn(27) &&\n      !v.eqn(28)\n    ) {\n      if (common) {\n        const chainIdDoubled = common.chainIdBN().muln(2)\n        const isValidEIP155V = v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))\n\n        if (!isValidEIP155V) {\n          throw new Error(\n            `Incompatible EIP155-based V ${v} and chain id ${common.chainIdBN()}. See the Common parameter of the Transaction constructor to set the chain id.`\n          )\n        }\n      } else {\n        // Derive the original chain ID\n        let numSub\n        if (v.subn(35).isEven()) {\n          numSub = 35\n        } else {\n          numSub = 36\n        }\n        // Use derived chain ID to create a proper Common\n        chainIdBN = v.subn(numSub).divn(2)\n      }\n    }\n    return this._getCommon(common, chainIdBN)\n  }\n\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  private _unsignedTxImplementsEIP155() {\n    return this.common.gteHardfork('spuriousDragon')\n  }\n\n  /**\n   * @deprecated if you have called this internal method please use `tx.supports(Capabilities.EIP155ReplayProtection)` instead\n   */\n  private _signedTxImplementsEIP155() {\n    if (!this.isSigned()) {\n      const msg = this._errorMsg('This transaction is not signed')\n      throw new Error(msg)\n    }\n    const onEIP155BlockOrLater = this.common.gteHardfork('spuriousDragon')\n\n    // EIP155 spec:\n    // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36, then when computing the hash of a transaction for purposes of signing or recovering, instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data), hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n    const v = this.v!\n\n    const chainIdDoubled = this.common.chainIdBN().muln(2)\n\n    const vAndChainIdMeetEIP155Conditions =\n      v.eq(chainIdDoubled.addn(35)) || v.eq(chainIdDoubled.addn(36))\n\n    return vAndChainIdMeetEIP155Conditions && onEIP155BlockOrLater\n  }\n\n  /**\n   * Return a compact error string representation of the object\n   */\n  public errorStr() {\n    let errorStr = this._getSharedErrorPostfix()\n    errorStr += ` gasPrice=${this.gasPrice}`\n    return errorStr\n  }\n\n  /**\n   * Internal helper function to create an annotated error message\n   *\n   * @param msg Base error message\n   * @hidden\n   */\n  protected _errorMsg(msg: string) {\n    return `${msg} (${this.errorStr()})`\n  }\n}\n","import { BN, toBuffer } from 'ethereumjs-util'\nimport {\n  TxOptions,\n  TypedTransaction,\n  TxData,\n  AccessListEIP2930TxData,\n  FeeMarketEIP1559TxData,\n} from './types'\nimport { Transaction, AccessListEIP2930Transaction, FeeMarketEIP1559Transaction } from '.'\nimport Common from '@ethereumjs/common'\n\nexport default class TransactionFactory {\n  // It is not possible to instantiate a TransactionFactory object.\n  private constructor() {}\n\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n  public static fromTxData(\n    txData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData,\n    txOptions: TxOptions = {}\n  ): TypedTransaction {\n    if (!('type' in txData) || txData.type === undefined) {\n      // Assume legacy transaction\n      return Transaction.fromTxData(<TxData>txData, txOptions)\n    } else {\n      const txType = new BN(toBuffer(txData.type)).toNumber()\n      if (txType === 0) {\n        return Transaction.fromTxData(<TxData>txData, txOptions)\n      } else if (txType === 1) {\n        return AccessListEIP2930Transaction.fromTxData(<AccessListEIP2930TxData>txData, txOptions)\n      } else if (txType === 2) {\n        return FeeMarketEIP1559Transaction.fromTxData(<FeeMarketEIP1559TxData>txData, txOptions)\n      } else {\n        throw new Error(`Tx instantiation with type ${txType} not supported`)\n      }\n    }\n  }\n\n  /**\n   * This method tries to decode serialized data.\n   *\n   * @param data - The data Buffer\n   * @param txOptions - The transaction options\n   */\n  public static fromSerializedData(data: Buffer, txOptions: TxOptions = {}): TypedTransaction {\n    if (data[0] <= 0x7f) {\n      // Determine the type.\n      let EIP: number\n      switch (data[0]) {\n        case 1:\n          EIP = 2930\n          break\n        case 2:\n          EIP = 1559\n          break\n        default:\n          throw new Error(`TypedTransaction with ID ${data[0]} unknown`)\n      }\n      if (EIP === 1559) {\n        return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions)\n      } else {\n        // EIP === 2930\n        return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions)\n      }\n    } else {\n      return Transaction.fromSerializedTx(data, txOptions)\n    }\n  }\n\n  /**\n   * When decoding a BlockBody, in the transactions field, a field is either:\n   * A Buffer (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n   * A Buffer[] (Legacy Transaction)\n   * This method returns the right transaction.\n   *\n   * @param data - A Buffer or Buffer[]\n   * @param txOptions - The transaction options\n   */\n  public static fromBlockBodyData(data: Buffer | Buffer[], txOptions: TxOptions = {}) {\n    if (Buffer.isBuffer(data)) {\n      return this.fromSerializedData(data, txOptions)\n    } else if (Array.isArray(data)) {\n      // It is a legacy transaction\n      return Transaction.fromValuesArray(data, txOptions)\n    } else {\n      throw new Error('Cannot decode transaction: unknown type input')\n    }\n  }\n\n  /**\n   * This helper method allows one to retrieve the class which matches the transactionID\n   * If transactionID is undefined, returns the legacy transaction class.\n   * @deprecated - This method is deprecated and will be removed on the next major release\n   * @param transactionID\n   * @param _common - This option is not used\n   */\n  public static getTransactionClass(transactionID: number = 0, _common?: Common) {\n    const legacyTxn = transactionID == 0 || (transactionID >= 0x80 && transactionID <= 0xff)\n\n    if (legacyTxn) {\n      return Transaction\n    }\n\n    switch (transactionID) {\n      case 1:\n        return AccessListEIP2930Transaction\n      case 2:\n        return FeeMarketEIP1559Transaction\n      default:\n        throw new Error(`TypedTransaction with ID ${transactionID} unknown`)\n    }\n  }\n}\n","import { BN, AddressLike, BNLike, BufferLike, PrefixedHexString } from 'ethereumjs-util'\nimport Common from '@ethereumjs/common'\nimport { default as Transaction } from './legacyTransaction'\nimport { default as AccessListEIP2930Transaction } from './eip2930Transaction'\nimport { default as FeeMarketEIP1559Transaction } from './eip1559Transaction'\n\n/**\n * Can be used in conjunction with {@link Transaction.supports}\n * to query on tx capabilities\n */\nexport enum Capability {\n  /**\n   * Tx supports EIP-155 replay protection\n   * See: [155](https://eips.ethereum.org/EIPS/eip-155) Replay Attack Protection EIP\n   */\n  EIP155ReplayProtection = 155,\n\n  /**\n   * Tx supports EIP-1559 gas fee market mechansim\n   * See: [1559](https://eips.ethereum.org/EIPS/eip-1559) Fee Market EIP\n   */\n  EIP1559FeeMarket = 1559,\n\n  /**\n   * Tx is a typed transaction as defined in EIP-2718\n   * See: [2718](https://eips.ethereum.org/EIPS/eip-2718) Transaction Type EIP\n   */\n  EIP2718TypedTransaction = 2718,\n\n  /**\n   * Tx supports access list generation as defined in EIP-2930\n   * See: [2930](https://eips.ethereum.org/EIPS/eip-2930) Access Lists EIP\n   */\n  EIP2930AccessLists = 2930,\n}\n\n/**\n * The options for initializing a {@link Transaction}.\n */\nexport interface TxOptions {\n  /**\n   * A {@link Common} object defining the chain and hardfork for the transaction.\n   *\n   * Object will be internally copied so that tx behavior don't incidentally\n   * change on future HF changes.\n   *\n   * Default: {@link Common} object set to `mainnet` and the default hardfork as defined in the {@link Common} class.\n   *\n   * Current default hardfork: `istanbul`\n   */\n  common?: Common\n  /**\n   * A transaction object by default gets frozen along initialization. This gives you\n   * strong additional security guarantees on the consistency of the tx parameters.\n   * It also enables tx hash caching when the `hash()` method is called multiple times.\n   *\n   * If you need to deactivate the tx freeze - e.g. because you want to subclass tx and\n   * add aditional properties - it is strongly encouraged that you do the freeze yourself\n   * within your code instead.\n   *\n   * Default: true\n   */\n  freeze?: boolean\n}\n\n/*\n * Access List types\n */\n\nexport type AccessListItem = {\n  address: PrefixedHexString\n  storageKeys: PrefixedHexString[]\n}\n\n/*\n * An Access List as a tuple of [address: Buffer, storageKeys: Buffer[]]\n */\nexport type AccessListBufferItem = [Buffer, Buffer[]]\nexport type AccessListBuffer = AccessListBufferItem[]\nexport type AccessList = AccessListItem[]\n\nexport function isAccessListBuffer(\n  input: AccessListBuffer | AccessList\n): input is AccessListBuffer {\n  if (input.length === 0) {\n    return true\n  }\n  const firstItem = input[0]\n  if (Array.isArray(firstItem)) {\n    return true\n  }\n  return false\n}\n\nexport function isAccessList(input: AccessListBuffer | AccessList): input is AccessList {\n  return !isAccessListBuffer(input) // This is exactly the same method, except the output is negated.\n}\n\n/**\n * Encompassing type for all transaction types.\n *\n * Note that this also includes legacy txs which are\n * referenced as {@link Transaction} for compatibility reasons.\n */\nexport type TypedTransaction =\n  | Transaction\n  | AccessListEIP2930Transaction\n  | FeeMarketEIP1559Transaction\n\n/**\n * Legacy {@link Transaction} Data\n */\nexport type TxData = {\n  /**\n   * The transaction's nonce.\n   */\n  nonce?: BNLike\n\n  /**\n   * The transaction's gas price.\n   */\n  gasPrice?: BNLike\n\n  /**\n   * The transaction's gas limit.\n   */\n  gasLimit?: BNLike\n\n  /**\n   * The transaction's the address is sent to.\n   */\n  to?: AddressLike\n\n  /**\n   * The amount of Ether sent.\n   */\n  value?: BNLike\n\n  /**\n   * This will contain the data of the message or the init of a contract.\n   */\n  data?: BufferLike\n\n  /**\n   * EC recovery ID.\n   */\n  v?: BNLike\n\n  /**\n   * EC signature parameter.\n   */\n  r?: BNLike\n\n  /**\n   * EC signature parameter.\n   */\n  s?: BNLike\n\n  /**\n   * The transaction type\n   */\n\n  type?: BNLike\n}\n\n/**\n * {@link AccessListEIP2930Transaction} data.\n */\nexport interface AccessListEIP2930TxData extends TxData {\n  /**\n   * The transaction's chain ID\n   */\n  chainId?: BNLike\n\n  /**\n   * The access list which contains the addresses/storage slots which the transaction wishes to access\n   */\n  accessList?: AccessListBuffer | AccessList\n}\n\n/**\n * {@link FeeMarketEIP1559Transaction} data.\n */\nexport interface FeeMarketEIP1559TxData extends AccessListEIP2930TxData {\n  /**\n   * The transaction's gas price, inherited from {@link Transaction}.  This property is not used for EIP1559\n   * transactions and should always be undefined for this specific transaction type.\n   */\n  gasPrice?: never\n  /**\n   * The maximum inclusion fee per gas (this fee is given to the miner)\n   */\n  maxPriorityFeePerGas?: BNLike\n  /**\n   * The maximum total fee\n   */\n  maxFeePerGas?: BNLike\n}\n\n/**\n * Buffer values array for a legacy {@link Transaction}\n */\nexport type TxValuesArray = Buffer[]\n\n/**\n * Buffer values array for an {@link AccessListEIP2930Transaction}\n */\nexport type AccessListEIP2930ValuesArray = [\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  AccessListBuffer,\n  Buffer?,\n  Buffer?,\n  Buffer?\n]\n\n/**\n * Buffer values array for a {@link FeeMarketEIP1559Transaction}\n */\nexport type FeeMarketEIP1559ValuesArray = [\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  Buffer,\n  AccessListBuffer,\n  Buffer?,\n  Buffer?,\n  Buffer?\n]\n\ntype JsonAccessListItem = { address: string; storageKeys: string[] }\n\n/**\n * Generic interface for all tx types with a\n * JSON representation of a transaction.\n *\n * Note that all values are marked as optional\n * and not all the values are present on all tx types\n * (an EIP1559 tx e.g. lacks a `gasPrice`).\n */\nexport interface JsonTx {\n  nonce?: string\n  gasPrice?: string\n  gasLimit?: string\n  to?: string\n  data?: string\n  v?: string\n  r?: string\n  s?: string\n  value?: string\n  chainId?: string\n  accessList?: JsonAccessListItem[]\n  type?: string\n  maxPriorityFeePerGas?: string\n  maxFeePerGas?: string\n}\n\n/**\n * A const defining secp256k1n/2\n */\nexport const N_DIV_2 = new BN(\n  '7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0',\n  16\n)\n","import Common from '@ethereumjs/common'\nimport { bufferToHex, setLengthLeft, toBuffer } from 'ethereumjs-util'\nimport { AccessList, AccessListBuffer, AccessListItem, isAccessList } from './types'\n\nexport function checkMaxInitCodeSize(common: Common, length: number) {\n  if (length > common.param('vm', 'maxInitCodeSize')) {\n    throw new Error(\n      `the initcode size of this transaction is too large: it is ${length} while the max is ${common.param(\n        'vm',\n        'maxInitCodeSize'\n      )}`\n    )\n  }\n}\n\nexport class AccessLists {\n  public static getAccessListData(accessList: AccessListBuffer | AccessList) {\n    let AccessListJSON\n    let bufferAccessList\n    if (accessList && isAccessList(accessList)) {\n      AccessListJSON = accessList\n      const newAccessList: AccessListBuffer = []\n\n      for (let i = 0; i < accessList.length; i++) {\n        const item: AccessListItem = accessList[i]\n        const addressBuffer = toBuffer(item.address)\n        const storageItems: Buffer[] = []\n        for (let index = 0; index < item.storageKeys.length; index++) {\n          storageItems.push(toBuffer(item.storageKeys[index]))\n        }\n        newAccessList.push([addressBuffer, storageItems])\n      }\n      bufferAccessList = newAccessList\n    } else {\n      bufferAccessList = accessList ?? []\n      // build the JSON\n      const json: AccessList = []\n      for (let i = 0; i < bufferAccessList.length; i++) {\n        const data = bufferAccessList[i]\n        const address = bufferToHex(data[0])\n        const storageKeys: string[] = []\n        for (let item = 0; item < data[1].length; item++) {\n          storageKeys.push(bufferToHex(data[1][item]))\n        }\n        const jsonItem: AccessListItem = {\n          address,\n          storageKeys,\n        }\n        json.push(jsonItem)\n      }\n      AccessListJSON = json\n    }\n\n    return {\n      AccessListJSON,\n      accessList: bufferAccessList,\n    }\n  }\n\n  public static verifyAccessList(accessList: AccessListBuffer) {\n    for (let key = 0; key < accessList.length; key++) {\n      const accessListItem = accessList[key]\n      const address = <Buffer>accessListItem[0]\n      const storageSlots = <Buffer[]>accessListItem[1]\n      if ((<any>accessListItem)[2] !== undefined) {\n        throw new Error(\n          'Access list item cannot have 3 elements. It can only have an address, and an array of storage slots.'\n        )\n      }\n      if (address.length != 20) {\n        throw new Error('Invalid EIP-2930 transaction: address length should be 20 bytes')\n      }\n      for (let storageSlot = 0; storageSlot < storageSlots.length; storageSlot++) {\n        if (storageSlots[storageSlot].length != 32) {\n          throw new Error('Invalid EIP-2930 transaction: storage slot length should be 32 bytes')\n        }\n      }\n    }\n  }\n\n  public static getAccessListJSON(accessList: AccessListBuffer) {\n    const accessListJSON = []\n    for (let index = 0; index < accessList.length; index++) {\n      const item: any = accessList[index]\n      const JSONItem: any = {\n        address: '0x' + setLengthLeft(<Buffer>item[0], 20).toString('hex'),\n        storageKeys: [],\n      }\n      const storageSlots: Buffer[] = item[1]\n      for (let slot = 0; slot < storageSlots.length; slot++) {\n        const storageSlot = storageSlots[slot]\n        JSONItem.storageKeys.push('0x' + setLengthLeft(storageSlot, 32).toString('hex'))\n      }\n      accessListJSON.push(JSONItem)\n    }\n    return accessListJSON\n  }\n\n  public static getDataFeeEIP2930(accessList: AccessListBuffer, common: Common): number {\n    const accessListStorageKeyCost = common.param('gasPrices', 'accessListStorageKeyCost')\n    const accessListAddressCost = common.param('gasPrices', 'accessListAddressCost')\n\n    let slots = 0\n    for (let index = 0; index < accessList.length; index++) {\n      const item = accessList[index]\n      const storageSlots = item[1]\n      slots += storageSlots.length\n    }\n\n    const addresses = accessList.length\n    return addresses * accessListAddressCost + slots * accessListStorageKeyCost\n  }\n}\n","import { Chain, chainsType } from './../types'\nimport mainnet from './mainnet.json'\nimport ropsten from './ropsten.json'\nimport rinkeby from './rinkeby.json'\nimport kovan from './kovan.json'\nimport goerli from './goerli.json'\nimport sepolia from './sepolia.json'\n\n/**\n * @hidden\n */\nexport function _getInitializedChains(customChains?: Chain[]) {\n  const names: any = {\n    '1': 'mainnet',\n    '3': 'ropsten',\n    '4': 'rinkeby',\n    '42': 'kovan',\n    '5': 'goerli',\n    '11155111': 'sepolia',\n  }\n  const chains: any = {\n    mainnet,\n    ropsten,\n    rinkeby,\n    kovan,\n    goerli,\n    sepolia,\n  }\n  if (customChains) {\n    for (const chain of customChains) {\n      const name = chain.name\n      names[chain.chainId.toString()] = name\n      chains[name] = chain\n    }\n  }\n\n  chains['names'] = names\n  return chains\n}\n\n/**\n * @deprecated this constant will be internalized (removed)\n * on next major version update\n */\nexport const chains: chainsType = _getInitializedChains()\n","import { eipsType } from './../types'\n\nexport const EIPs: eipsType = {\n  1153: require('./1153.json'),\n  1559: require('./1559.json'),\n  2315: require('./2315.json'),\n  2537: require('./2537.json'),\n  2565: require('./2565.json'),\n  2718: require('./2718.json'),\n  2929: require('./2929.json'),\n  2930: require('./2930.json'),\n  3198: require('./3198.json'),\n  3529: require('./3529.json'),\n  3540: require('./3540.json'),\n  3541: require('./3541.json'),\n  3554: require('./3554.json'),\n  3607: require('./3607.json'),\n  3651: require('./3651.json'),\n  3670: require('./3670.json'),\n  3675: require('./3675.json'),\n  3855: require('./3855.json'),\n  3860: require('./3860.json'),\n  4345: require('./4345.json'),\n  4399: require('./4399.json'),\n}\n","export const hardforks = [\n  ['chainstart', require('./chainstart.json')],\n  ['homestead', require('./homestead.json')],\n  ['dao', require('./dao.json')],\n  ['tangerineWhistle', require('./tangerineWhistle.json')],\n  ['spuriousDragon', require('./spuriousDragon.json')],\n  ['byzantium', require('./byzantium.json')],\n  ['constantinople', require('./constantinople.json')],\n  ['petersburg', require('./petersburg.json')],\n  ['istanbul', require('./istanbul.json')],\n  ['muirGlacier', require('./muirGlacier.json')],\n  ['berlin', require('./berlin.json')],\n  ['london', require('./london.json')],\n  ['shanghai', require('./shanghai.json')],\n  ['arrowGlacier', require('./arrowGlacier.json')],\n  ['mergeForkIdTransition', require('./mergeForkIdTransition.json')],\n  ['merge', require('./merge.json')],\n]\n","import { EventEmitter } from 'events'\nimport { buf as crc32Buffer } from 'crc-32'\nimport { BN, BNLike, toType, TypeOutput, intToBuffer } from 'ethereumjs-util'\nimport { _getInitializedChains } from './chains'\nimport { hardforks as HARDFORK_CHANGES } from './hardforks'\nimport { EIPs } from './eips'\nimport {\n  BootstrapNode,\n  Chain as IChain,\n  GenesisBlock,\n  GenesisState,\n  Hardfork as HardforkParams,\n} from './types'\n\nexport enum CustomChain {\n  /**\n   * Polygon (Matic) Mainnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMainnet = 'polygon-mainnet',\n\n  /**\n   * Polygon (Matic) Mumbai Testnet\n   *\n   * - [Documentation](https://docs.matic.network/docs/develop/network-details/network)\n   */\n  PolygonMumbai = 'polygon-mumbai',\n\n  /**\n   * Arbitrum Rinkeby Testnet\n   *\n   * - [Documentation](https://developer.offchainlabs.com/docs/public_testnet)\n   */\n  ArbitrumRinkebyTestnet = 'arbitrum-rinkeby-testnet',\n\n  /**\n   * xDai EVM sidechain with a native stable token\n   *\n   * - [Documentation](https://www.xdaichain.com/)\n   */\n  xDaiChain = 'x-dai-chain',\n\n  /**\n   * Optimistic Kovan - testnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticKovan = 'optimistic-kovan',\n\n  /**\n   * Optimistic Ethereum - mainnet for Optimism roll-up\n   *\n   * - [Documentation](https://community.optimism.io/docs/developers/tutorials.html)\n   */\n  OptimisticEthereum = 'optimistic-ethereum',\n}\n\nexport enum Chain {\n  Mainnet = 1,\n  Ropsten = 3,\n  Rinkeby = 4,\n  Kovan = 42,\n  Goerli = 5,\n  Sepolia = 11155111,\n}\n\nexport enum Hardfork {\n  Chainstart = 'chainstart',\n  Homestead = 'homestead',\n  Dao = 'dao',\n  TangerineWhistle = 'tangerineWhistle',\n  SpuriousDragon = 'spuriousDragon',\n  Byzantium = 'byzantium',\n  Constantinople = 'constantinople',\n  Petersburg = 'petersburg',\n  Istanbul = 'istanbul',\n  MuirGlacier = 'muirGlacier',\n  Berlin = 'berlin',\n  London = 'london',\n  ArrowGlacier = 'arrowGlacier',\n  Shanghai = 'shanghai',\n  MergeForkIdTransition = 'mergeForkIdTransition',\n  Merge = 'merge',\n}\n\nexport enum ConsensusType {\n  ProofOfStake = 'pos',\n  ProofOfWork = 'pow',\n  ProofOfAuthority = 'poa',\n}\n\nexport enum ConsensusAlgorithm {\n  Ethash = 'ethash',\n  Clique = 'clique',\n  Casper = 'casper',\n}\n\ninterface BaseOpts {\n  /**\n   * String identifier ('byzantium') for hardfork or {@link Hardfork} enum.\n   *\n   * Default: Hardfork.Istanbul\n   */\n  hardfork?: string | Hardfork\n  /**\n   * Limit parameter returns to the given hardforks\n   */\n  supportedHardforks?: Array<string | Hardfork>\n  /**\n   * Selected EIPs which can be activated, please use an array for instantiation\n   * (e.g. `eips: [ 2537, ]`)\n   *\n   * Currently supported:\n   *\n   * - [EIP-2537](https://eips.ethereum.org/EIPS/eip-2537) - BLS12-381 precompiles\n   */\n  eips?: number[]\n}\n\n/**\n * Options for instantiating a {@link Common} instance.\n */\nexport interface CommonOpts extends BaseOpts {\n  /**\n   * Chain name ('mainnet'), id (1), or {@link Chain} enum,\n   * either from a chain directly supported or a custom chain\n   * passed in via {@link CommonOpts.customChains}.\n   */\n  chain: string | number | Chain | BN | object\n  /**\n   * Initialize (in addition to the supported chains) with the selected\n   * custom chains\n   *\n   * Usage (directly with the respective chain intialization via the {@link CommonOpts.chain} option):\n   *\n   * Pattern 1 (without genesis state):\n   *\n   * ```javascript\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ myCustomChain1 ]})\n   * ```\n   *\n   * Pattern 2 (with genesis state see {@link GenesisState} for format):\n   *\n   * ```javascript\n   * const simpleState = {\n   *   '0x0...01': '0x100', // For EoA\n   * }\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * import chain1GenesisState from '[PATH_TO_GENESIS_STATES]/chain1GenesisState.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ [ myCustomChain1, simpleState ] ]})\n   * ```\n   *\n   * Pattern 3 (with complex genesis state, containing contract accounts and storage).\n   * Note that in {@link AccountState} there are two\n   * accepted types. This allows to easily insert accounts in the genesis state:\n   *\n   * A complex genesis state with Contract and EoA states would have the following format:\n   *\n   * ```javascript\n   * const complexState = {\n   *   '0x0...01': '0x100', // For EoA\n   *   '0x0...02': ['0x1', '0xRUNTIME_BYTECODE', [[ keyOne, valueOne ], [ keyTwo, valueTwo ]]] // For contracts\n   * }\n   * import myCustomChain1 from '[PATH_TO_MY_CHAINS]/myCustomChain1.json'\n   * const common = new Common({ chain: 'myCustomChain1', customChains: [ [ myCustomChain1, complexState ] ]})\n   * ```\n   */\n  customChains?: IChain[] | [IChain, GenesisState][]\n}\n\n/**\n * Options to be used with the {@link Common.custom} static constructor.\n */\nexport interface CustomCommonOpts extends BaseOpts {\n  /**\n   * The name (`mainnet`), id (`1`), or {@link Chain} enum of\n   * a standard chain used to base the custom chain params on.\n   */\n  baseChain?: string | number | Chain | BN\n}\n\ninterface hardforkOptions {\n  /** optional, only allow supported HFs (default: false) */\n  onlySupported?: boolean\n  /** optional, only active HFs (default: false) */\n  onlyActive?: boolean\n}\n\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport default class Common extends EventEmitter {\n  readonly DEFAULT_HARDFORK: string | Hardfork\n\n  private _chainParams: IChain\n  private _hardfork: string | Hardfork\n  private _supportedHardforks: Array<string | Hardfork> = []\n  private _eips: number[] = []\n  private _customChains: IChain[] | [IChain, GenesisState][]\n\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `@ethereumjs/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n  static custom(\n    chainParamsOrName: Partial<IChain> | CustomChain,\n    opts: CustomCommonOpts = {}\n  ): Common {\n    const baseChain = opts.baseChain ?? 'mainnet'\n    const standardChainParams = { ...Common._getChainParams(baseChain) }\n    standardChainParams['name'] = 'custom-chain'\n\n    if (typeof chainParamsOrName !== 'string') {\n      return new Common({\n        chain: {\n          ...standardChainParams,\n          ...chainParamsOrName,\n        },\n        ...opts,\n      })\n    } else {\n      if (chainParamsOrName === CustomChain.PolygonMainnet) {\n        return Common.custom(\n          {\n            name: CustomChain.PolygonMainnet,\n            chainId: 137,\n            networkId: 137,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.PolygonMumbai) {\n        return Common.custom(\n          {\n            name: CustomChain.PolygonMumbai,\n            chainId: 80001,\n            networkId: 80001,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n        return Common.custom(\n          {\n            name: CustomChain.ArbitrumRinkebyTestnet,\n            chainId: 421611,\n            networkId: 421611,\n          },\n          opts\n        )\n      }\n      if (chainParamsOrName === CustomChain.xDaiChain) {\n        return Common.custom(\n          {\n            name: CustomChain.xDaiChain,\n            chainId: 100,\n            networkId: 100,\n          },\n          opts\n        )\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticKovan) {\n        return Common.custom(\n          {\n            name: CustomChain.OptimisticKovan,\n            chainId: 69,\n            networkId: 69,\n          },\n          // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n          { hardfork: Hardfork.Berlin, ...opts }\n        )\n      }\n\n      if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n        return Common.custom(\n          {\n            name: CustomChain.OptimisticEthereum,\n            chainId: 10,\n            networkId: 10,\n          },\n          // Optimism has not implemented the London hardfork yet (targeting Q1.22)\n          { hardfork: Hardfork.Berlin, ...opts }\n        )\n      }\n      throw new Error(`Custom chain ${chainParamsOrName} not supported`)\n    }\n  }\n\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one. It uses all the `Chain`\n   * params from {@link baseChain} except the ones overridden in {@link customChainParams}.\n   *\n   * @deprecated Use {@link Common.custom} instead\n   *\n   * @param baseChain The name (`mainnet`) or id (`1`) of a standard chain used to base the custom\n   * chain params on.\n   * @param customChainParams The custom parameters of the chain.\n   * @param hardfork String identifier ('byzantium') for hardfork (optional)\n   * @param supportedHardforks Limit parameter returns to the given hardforks (optional)\n   */\n  static forCustomChain(\n    baseChain: string | number | Chain,\n    customChainParams: Partial<IChain>,\n    hardfork?: string | Hardfork,\n    supportedHardforks?: Array<string | Hardfork>\n  ): Common {\n    const standardChainParams = Common._getChainParams(baseChain)\n\n    return new Common({\n      chain: {\n        ...standardChainParams,\n        ...customChainParams,\n      },\n      hardfork: hardfork,\n      supportedHardforks: supportedHardforks,\n    })\n  }\n\n  /**\n   * Static method to determine if a {@link chainId} is supported as a standard chain\n   * @param chainId BN id (`1`) of a standard chain\n   * @returns boolean\n   */\n  static isSupportedChainId(chainId: BN): boolean {\n    const initializedChains: any = _getInitializedChains()\n    return Boolean(initializedChains['names'][chainId.toString()])\n  }\n\n  private static _getChainParams(\n    chain: string | number | Chain | BN,\n    customChains?: IChain[]\n  ): IChain {\n    const initializedChains: any = _getInitializedChains(customChains)\n    if (typeof chain === 'number' || BN.isBN(chain)) {\n      chain = chain.toString()\n\n      if (initializedChains['names'][chain]) {\n        const name: string = initializedChains['names'][chain]\n        return initializedChains[name]\n      }\n\n      throw new Error(`Chain with ID ${chain} not supported`)\n    }\n\n    if (initializedChains[chain]) {\n      return initializedChains[chain]\n    }\n\n    throw new Error(`Chain with name ${chain} not supported`)\n  }\n\n  /**\n   *\n   * @constructor\n   */\n  constructor(opts: CommonOpts) {\n    super()\n    this._customChains = opts.customChains ?? []\n    this._chainParams = this.setChain(opts.chain)\n    this.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Istanbul\n    for (const hf of this._chainParams.hardforks) {\n      if (!hf.forkHash) {\n        hf.forkHash = this._calcForkHash(hf.name)\n      }\n    }\n    this._hardfork = this.DEFAULT_HARDFORK\n    if (opts.supportedHardforks) {\n      this._supportedHardforks = opts.supportedHardforks\n    }\n    if (opts.hardfork) {\n      this.setHardfork(opts.hardfork)\n    }\n    if (opts.eips) {\n      this.setEIPs(opts.eips)\n    }\n  }\n\n  /**\n   * Sets the chain\n   * @param chain String ('mainnet') or Number (1) chain\n   *     representation. Or, a Dictionary of chain parameters for a private network.\n   * @returns The dictionary with parameters set as chain\n   */\n  setChain(chain: string | number | Chain | BN | object): any {\n    if (typeof chain === 'number' || typeof chain === 'string' || BN.isBN(chain)) {\n      // Filter out genesis states if passed in to customChains\n      let plainCustomChains: IChain[]\n      if (\n        this._customChains &&\n        this._customChains.length > 0 &&\n        Array.isArray(this._customChains[0])\n      ) {\n        plainCustomChains = (this._customChains as [IChain, GenesisState][]).map((e) => e[0])\n      } else {\n        plainCustomChains = this._customChains as IChain[]\n      }\n      this._chainParams = Common._getChainParams(chain, plainCustomChains)\n    } else if (typeof chain === 'object') {\n      if (this._customChains.length > 0) {\n        throw new Error(\n          'Chain must be a string, number, or BN when initialized with customChains passed in'\n        )\n      }\n      const required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes']\n      for (const param of required) {\n        if ((<any>chain)[param] === undefined) {\n          throw new Error(`Missing required chain parameter: ${param}`)\n        }\n      }\n      this._chainParams = chain as IChain\n    } else {\n      throw new Error('Wrong input format')\n    }\n    return this._chainParams\n  }\n\n  /**\n   * Sets the hardfork to get params for\n   * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n   */\n  setHardfork(hardfork: string | Hardfork): void {\n    if (!this._isSupportedHardfork(hardfork)) {\n      throw new Error(`Hardfork ${hardfork} not set as supported in supportedHardforks`)\n    }\n    let existing = false\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if (hfChanges[0] === hardfork) {\n        if (this._hardfork !== hardfork) {\n          this._hardfork = hardfork\n          this.emit('hardforkChanged', hardfork)\n        }\n        existing = true\n      }\n    }\n    if (!existing) {\n      throw new Error(`Hardfork with name ${hardfork} not supported`)\n    }\n  }\n\n  /**\n   * Returns the hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF\n   */\n  getHardforkByBlockNumber(blockNumber: BNLike, td?: BNLike): string {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    td = toType(td, TypeOutput.BN)\n\n    let hardfork = Hardfork.Chainstart\n    let minTdHF\n    let maxTdHF\n    let previousHF\n    for (const hf of this.hardforks()) {\n      // Skip comparison for not applied HFs\n      if (hf.block === null) {\n        if (td !== undefined && td !== null && hf.td !== undefined && hf.td !== null) {\n          if (td.gte(new BN(hf.td))) {\n            return hf.name\n          }\n        }\n        continue\n      }\n      if (blockNumber.gte(new BN(hf.block))) {\n        hardfork = hf.name as Hardfork\n      }\n      if (td && hf.td) {\n        if (td.gte(new BN(hf.td))) {\n          minTdHF = hf.name\n        } else {\n          maxTdHF = previousHF\n        }\n      }\n      previousHF = hf.name\n    }\n    if (td) {\n      let msgAdd = `block number: ${blockNumber} (-> ${hardfork}), `\n      if (minTdHF) {\n        if (!this.hardforkGteHardfork(hardfork, minTdHF)) {\n          const msg = 'HF determined by block number is lower than the minimum total difficulty HF'\n          msgAdd += `total difficulty: ${td} (-> ${minTdHF})`\n          throw new Error(`${msg}: ${msgAdd}`)\n        }\n      }\n      if (maxTdHF) {\n        if (!this.hardforkGteHardfork(maxTdHF, hardfork)) {\n          const msg = 'Maximum HF determined by total difficulty is lower than the block number HF'\n          msgAdd += `total difficulty: ${td} (-> ${maxTdHF})`\n          throw new Error(`${msg}: ${msgAdd}`)\n        }\n      }\n    }\n    return hardfork\n  }\n\n  /**\n   * Sets a new hardfork based on the block number or an optional\n   * total difficulty (Merge HF) provided.\n   *\n   * An optional TD takes precedence in case the corresponding HF block\n   * is set to `null` or otherwise needs to match (if not an error\n   * will be thrown).\n   *\n   * @param blockNumber\n   * @param td\n   * @returns The name of the HF set\n   */\n  setHardforkByBlockNumber(blockNumber: BNLike, td?: BNLike): string {\n    const hardfork = this.getHardforkByBlockNumber(blockNumber, td)\n    this.setHardfork(hardfork)\n    return hardfork\n  }\n\n  /**\n   * Internal helper function to choose between hardfork set and hardfork provided as param\n   * @param hardfork Hardfork given to function as a parameter\n   * @returns Hardfork chosen to be used\n   */\n  _chooseHardfork(hardfork?: string | Hardfork | null, onlySupported: boolean = true): string {\n    if (!hardfork) {\n      hardfork = this._hardfork\n    } else if (onlySupported && !this._isSupportedHardfork(hardfork)) {\n      throw new Error(`Hardfork ${hardfork} not set as supported in supportedHardforks`)\n    }\n    return hardfork\n  }\n\n  /**\n   * Internal helper function, returns the params for the given hardfork for the chain set\n   * @param hardfork Hardfork name\n   * @returns Dictionary with hardfork params\n   */\n  _getHardfork(hardfork: string | Hardfork): any {\n    const hfs = this.hardforks()\n    for (const hf of hfs) {\n      if (hf['name'] === hardfork) return hf\n    }\n    throw new Error(`Hardfork ${hardfork} not defined for chain ${this.chainName()}`)\n  }\n\n  /**\n   * Internal helper function to check if a hardfork is set to be supported by the library\n   * @param hardfork Hardfork name\n   * @returns True if hardfork is supported\n   */\n  _isSupportedHardfork(hardfork: string | Hardfork | null): boolean {\n    if (this._supportedHardforks.length > 0) {\n      for (const supportedHf of this._supportedHardforks) {\n        if (hardfork === supportedHf) return true\n      }\n    } else {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Sets the active EIPs\n   * @param eips\n   */\n  setEIPs(eips: number[] = []) {\n    for (const eip of eips) {\n      if (!(eip in EIPs)) {\n        throw new Error(`${eip} not supported`)\n      }\n      const minHF = this.gteHardfork(EIPs[eip]['minimumHardfork'])\n      if (!minHF) {\n        throw new Error(\n          `${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`\n        )\n      }\n      if (EIPs[eip].requiredEIPs) {\n        ;(EIPs[eip].requiredEIPs as number[]).forEach((elem) => {\n          if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n            throw new Error(`${eip} requires EIP ${elem}, but is not included in the EIP list`)\n          }\n        })\n      }\n    }\n    this._eips = eips\n  }\n\n  /**\n   * Returns a parameter for the current chain setup\n   *\n   * If the parameter is present in an EIP, the EIP always takes precendence.\n   * Otherwise the parameter if taken from the latest applied HF with\n   * a change on the respective parameter.\n   *\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @returns The value requested or `null` if not found\n   */\n  param(topic: string, name: string): any {\n    // TODO: consider the case that different active EIPs\n    // can change the same parameter\n    let value = null\n    for (const eip of this._eips) {\n      value = this.paramByEIP(topic, name, eip)\n      if (value !== null) {\n        return value\n      }\n    }\n    return this.paramByHardfork(topic, name, this._hardfork)\n  }\n\n  /**\n   * Returns the parameter corresponding to a hardfork\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param hardfork Hardfork name\n   * @returns The value requested or `null` if not found\n   */\n  paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): any {\n    hardfork = this._chooseHardfork(hardfork)\n\n    let value = null\n    for (const hfChanges of HARDFORK_CHANGES) {\n      // EIP-referencing HF file (e.g. berlin.json)\n      if ('eips' in hfChanges[1]) {\n        const hfEIPs = hfChanges[1]['eips']\n        for (const eip of hfEIPs) {\n          const valueEIP = this.paramByEIP(topic, name, eip)\n          value = valueEIP !== null ? valueEIP : value\n        }\n        // Paramater-inlining HF file (e.g. istanbul.json)\n      } else {\n        if (!hfChanges[1][topic]) {\n          throw new Error(`Topic ${topic} not defined`)\n        }\n        if (hfChanges[1][topic][name] !== undefined) {\n          value = hfChanges[1][topic][name].v\n        }\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    return value\n  }\n\n  /**\n   * Returns a parameter corresponding to an EIP\n   * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n   * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n   * @param eip Number of the EIP\n   * @returns The value requested or `null` if not found\n   */\n  paramByEIP(topic: string, name: string, eip: number): any {\n    if (!(eip in EIPs)) {\n      throw new Error(`${eip} not supported`)\n    }\n\n    const eipParams = EIPs[eip]\n    if (!(topic in eipParams)) {\n      throw new Error(`Topic ${topic} not defined`)\n    }\n    if (eipParams[topic][name] === undefined) {\n      return null\n    }\n    const value = eipParams[topic][name].v\n    return value\n  }\n\n  /**\n   * Returns a parameter for the hardfork active on block number\n   * @param topic Parameter topic\n   * @param name Parameter name\n   * @param blockNumber Block number\n   */\n  paramByBlock(topic: string, name: string, blockNumber: BNLike): any {\n    const activeHfs = this.activeHardforks(blockNumber)\n    const hardfork = activeHfs[activeHfs.length - 1]['name']\n    return this.paramByHardfork(topic, name, hardfork)\n  }\n\n  /**\n   * Checks if an EIP is activated by either being included in the EIPs\n   * manually passed in with the {@link CommonOpts.eips} or in a\n   * hardfork currently being active\n   *\n   * Note: this method only works for EIPs being supported\n   * by the {@link CommonOpts.eips} constructor option\n   * @param eip\n   */\n  isActivatedEIP(eip: number): boolean {\n    if (this.eips().includes(eip)) {\n      return true\n    }\n    for (const hfChanges of HARDFORK_CHANGES) {\n      const hf = hfChanges[1]\n      if (this.gteHardfork(hf['name']) && 'eips' in hf) {\n        if (hf['eips'].includes(eip)) {\n          return true\n        }\n      }\n    }\n    return false\n  }\n\n  /**\n   * Checks if set or provided hardfork is active on block number\n   * @param hardfork Hardfork name or null (for HF set)\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  hardforkIsActiveOnBlock(\n    hardfork: string | Hardfork | null,\n    blockNumber: BNLike,\n    opts: hardforkOptions = {}\n  ): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    const onlySupported = opts.onlySupported ?? false\n    hardfork = this._chooseHardfork(hardfork, onlySupported)\n    const hfBlock = this.hardforkBlockBN(hardfork)\n    if (hfBlock && blockNumber.gte(hfBlock)) {\n      return true\n    }\n    return false\n  }\n\n  /**\n   * Alias to hardforkIsActiveOnBlock when hardfork is set\n   * @param blockNumber\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if HF is active on block number\n   */\n  activeOnBlock(blockNumber: BNLike, opts?: hardforkOptions): boolean {\n    return this.hardforkIsActiveOnBlock(null, blockNumber, opts)\n  }\n\n  /**\n   * Sequence based check if given or set HF1 is greater than or equal HF2\n   * @param hardfork1 Hardfork name or null (if set)\n   * @param hardfork2 Hardfork name\n   * @param opts Hardfork options\n   * @returns True if HF1 gte HF2\n   */\n  hardforkGteHardfork(\n    hardfork1: string | Hardfork | null,\n    hardfork2: string | Hardfork,\n    opts: hardforkOptions = {}\n  ): boolean {\n    const onlyActive = opts.onlyActive === undefined ? false : opts.onlyActive\n    hardfork1 = this._chooseHardfork(hardfork1, opts.onlySupported)\n\n    let hardforks\n    if (onlyActive) {\n      hardforks = this.activeHardforks(null, opts)\n    } else {\n      hardforks = this.hardforks()\n    }\n\n    let posHf1 = -1,\n      posHf2 = -1\n    let index = 0\n    for (const hf of hardforks) {\n      if (hf['name'] === hardfork1) posHf1 = index\n      if (hf['name'] === hardfork2) posHf2 = index\n      index += 1\n    }\n    return posHf1 >= posHf2 && posHf2 !== -1\n  }\n\n  /**\n   * Alias to hardforkGteHardfork when hardfork is set\n   * @param hardfork Hardfork name\n   * @param opts Hardfork options\n   * @returns True if hardfork set is greater than hardfork provided\n   */\n  gteHardfork(hardfork: string | Hardfork, opts?: hardforkOptions): boolean {\n    return this.hardforkGteHardfork(null, hardfork, opts)\n  }\n\n  /**\n   * Checks if given or set hardfork is active on the chain\n   * @param hardfork Hardfork name, optional if HF set\n   * @param opts Hardfork options (onlyActive unused)\n   * @returns True if hardfork is active on the chain\n   */\n  hardforkIsActiveOnChain(\n    hardfork?: string | Hardfork | null,\n    opts: hardforkOptions = {}\n  ): boolean {\n    const onlySupported = opts.onlySupported ?? false\n    hardfork = this._chooseHardfork(hardfork, onlySupported)\n    for (const hf of this.hardforks()) {\n      if (hf['name'] === hardfork && hf['block'] !== null) return true\n    }\n    return false\n  }\n\n  /**\n   * Returns the active hardfork switches for the current chain\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Array with hardfork arrays\n   */\n  activeHardforks(blockNumber?: BNLike | null, opts: hardforkOptions = {}): HardforkParams[] {\n    const activeHardforks: HardforkParams[] = []\n    const hfs = this.hardforks()\n    for (const hf of hfs) {\n      if (hf['block'] === null) continue\n      if (blockNumber !== undefined && blockNumber !== null && blockNumber < hf['block']) break\n      if (opts.onlySupported && !this._isSupportedHardfork(hf['name'])) continue\n\n      activeHardforks.push(hf)\n    }\n    return activeHardforks\n  }\n\n  /**\n   * Returns the latest active hardfork name for chain or block or throws if unavailable\n   * @param blockNumber up to block if provided, otherwise for the whole chain\n   * @param opts Hardfork options (onlyActive unused)\n   * @return Hardfork name\n   */\n  activeHardfork(blockNumber?: BNLike | null, opts: hardforkOptions = {}): string {\n    const activeHardforks = this.activeHardforks(blockNumber, opts)\n    if (activeHardforks.length > 0) {\n      return activeHardforks[activeHardforks.length - 1]['name']\n    } else {\n      throw new Error(`No (supported) active hardfork found`)\n    }\n  }\n\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   * @deprecated Please use {@link Common.hardforkBlockBN} for large number support\n   */\n  hardforkBlock(hardfork?: string | Hardfork): number | null {\n    const block = this.hardforkBlockBN(hardfork)\n    return toType(block, TypeOutput.Number)\n  }\n\n  /**\n   * Returns the hardfork change block for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if unscheduled\n   */\n  hardforkBlockBN(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const block = this._getHardfork(hardfork)['block']\n    if (block === undefined || block === null) {\n      return null\n    }\n    return new BN(block)\n  }\n\n  /**\n   * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Total difficulty or null if no set\n   */\n  hardforkTD(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const td = this._getHardfork(hardfork)['td']\n    if (td === undefined || td === null) {\n      return null\n    }\n    return new BN(td)\n  }\n\n  /**\n   * True if block number provided is the hardfork (given or set) change block\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  isHardforkBlock(blockNumber: BNLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    hardfork = this._chooseHardfork(hardfork, false)\n    const block = this.hardforkBlockBN(hardfork)\n    return block ? block.eq(blockNumber) : false\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   * @deprecated Please use {@link Common.nextHardforkBlockBN} for large number support\n   */\n  nextHardforkBlock(hardfork?: string | Hardfork): number | null {\n    const block = this.nextHardforkBlockBN(hardfork)\n    return toType(block, TypeOutput.Number)\n  }\n\n  /**\n   * Returns the change block for the next hardfork after the hardfork provided or set\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns Block number or null if not available\n   */\n  nextHardforkBlockBN(hardfork?: string | Hardfork): BN | null {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const hfBlock = this.hardforkBlockBN(hardfork)\n    if (hfBlock === null) {\n      return null\n    }\n    // Next fork block number or null if none available\n    // Logic: if accumulator is still null and on the first occurrence of\n    // a block greater than the current hfBlock set the accumulator,\n    // pass on the accumulator as the final result from this time on\n    const nextHfBlock = this.hardforks().reduce((acc: BN | null, hf: HardforkParams) => {\n      const block = new BN(hf.block!)\n      return block.gt(hfBlock) && acc === null ? block : acc\n    }, null)\n    return nextHfBlock\n  }\n\n  /**\n   * True if block number provided is the hardfork change block following the hardfork given or set\n   * @param blockNumber Number of the block to check\n   * @param hardfork Hardfork name, optional if HF set\n   * @returns True if blockNumber is HF block\n   */\n  isNextHardforkBlock(blockNumber: BNLike, hardfork?: string | Hardfork): boolean {\n    blockNumber = toType(blockNumber, TypeOutput.BN)\n    hardfork = this._chooseHardfork(hardfork, false)\n    const nextHardforkBlock = this.nextHardforkBlockBN(hardfork)\n\n    return nextHardforkBlock === null ? false : nextHardforkBlock.eq(blockNumber)\n  }\n\n  /**\n   * Internal helper function to calculate a fork hash\n   * @param hardfork Hardfork name\n   * @returns Fork hash as hex string\n   */\n  _calcForkHash(hardfork: string | Hardfork) {\n    const genesis = Buffer.from(this.genesis().hash.substr(2), 'hex')\n\n    let hfBuffer = Buffer.alloc(0)\n    let prevBlock = 0\n    for (const hf of this.hardforks()) {\n      const block = hf.block\n\n      // Skip for chainstart (0), not applied HFs (null) and\n      // when already applied on same block number HFs\n      if (block !== 0 && block !== null && block !== prevBlock) {\n        const hfBlockBuffer = Buffer.from(block.toString(16).padStart(16, '0'), 'hex')\n        hfBuffer = Buffer.concat([hfBuffer, hfBlockBuffer])\n      }\n\n      if (hf.name === hardfork) break\n      if (block !== null) {\n        prevBlock = block\n      }\n    }\n    const inputBuffer = Buffer.concat([genesis, hfBuffer])\n\n    // CRC32 delivers result as signed (negative) 32-bit integer,\n    // convert to hex string\n    const forkhash = intToBuffer(crc32Buffer(inputBuffer) >>> 0).toString('hex')\n    return `0x${forkhash}`\n  }\n\n  /**\n   * Returns an eth/64 compliant fork hash (EIP-2124)\n   * @param hardfork Hardfork name, optional if HF set\n   */\n  forkHash(hardfork?: string | Hardfork) {\n    hardfork = this._chooseHardfork(hardfork, false)\n    const data = this._getHardfork(hardfork)\n    if (data['block'] === null && data['td'] === undefined) {\n      const msg = 'No fork hash calculation possible for future hardfork'\n      throw new Error(msg)\n    }\n    if (data['forkHash'] !== undefined) {\n      return data['forkHash']\n    }\n    return this._calcForkHash(hardfork)\n  }\n\n  /**\n   *\n   * @param forkHash Fork hash as a hex string\n   * @returns Array with hardfork data (name, block, forkHash)\n   */\n  hardforkForForkHash(forkHash: string): any | null {\n    const resArray = this.hardforks().filter((hf: any) => {\n      return hf.forkHash === forkHash\n    })\n    return resArray.length >= 1 ? resArray[resArray.length - 1] : null\n  }\n\n  /**\n   * Returns the Genesis parameters of the current chain\n   * @returns Genesis dictionary\n   */\n  genesis(): GenesisBlock {\n    return this._chainParams['genesis']\n  }\n\n  /**\n   * Returns the Genesis state of the current chain,\n   * all values are provided as hex-prefixed strings.\n   */\n  genesisState(): GenesisState {\n    // Use require statements here in favor of import statements\n    // to load json files on demand\n    // (high memory usage by large mainnet.json genesis state file)\n    switch (this.chainName()) {\n      case 'mainnet':\n        return require('./genesisStates/mainnet.json')\n      case 'ropsten':\n        return require('./genesisStates/ropsten.json')\n      case 'rinkeby':\n        return require('./genesisStates/rinkeby.json')\n      case 'kovan':\n        return require('./genesisStates/kovan.json')\n      case 'goerli':\n        return require('./genesisStates/goerli.json')\n      case 'sepolia':\n        return require('./genesisStates/sepolia.json')\n    }\n\n    // Custom chains with genesis state provided\n    if (\n      this._customChains &&\n      this._customChains.length > 0 &&\n      Array.isArray(this._customChains[0])\n    ) {\n      for (const chainArrayWithGenesis of this._customChains as [IChain, GenesisState][]) {\n        if (chainArrayWithGenesis[0].name === this.chainName()) {\n          return chainArrayWithGenesis[1]\n        }\n      }\n    }\n\n    return {}\n  }\n\n  /**\n   * Returns the hardforks for current chain\n   * @returns {Array} Array with arrays of hardforks\n   */\n  hardforks(): HardforkParams[] {\n    return this._chainParams['hardforks']\n  }\n\n  /**\n   * Returns bootstrap nodes for the current chain\n   * @returns {Dictionary} Dict with bootstrap nodes\n   */\n  bootstrapNodes(): BootstrapNode[] {\n    return this._chainParams['bootstrapNodes']\n  }\n\n  /**\n   * Returns DNS networks for the current chain\n   * @returns {String[]} Array of DNS ENR urls\n   */\n  dnsNetworks(): string[] {\n    return this._chainParams['dnsNetworks']!\n  }\n\n  /**\n   * Returns the hardfork set\n   * @returns Hardfork name\n   */\n  hardfork(): string | Hardfork {\n    return this._hardfork\n  }\n\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   * @deprecated Please use {@link Common.chainIdBN} for large number support\n   */\n  chainId(): number {\n    return toType(this.chainIdBN(), TypeOutput.Number)\n  }\n\n  /**\n   * Returns the Id of current chain\n   * @returns chain Id\n   */\n  chainIdBN(): BN {\n    return new BN(this._chainParams['chainId'])\n  }\n\n  /**\n   * Returns the name of current chain\n   * @returns chain name (lower case)\n   */\n  chainName(): string {\n    return this._chainParams['name']\n  }\n\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   * @deprecated Please use {@link Common.networkIdBN} for large number support\n   */\n  networkId(): number {\n    return toType(this.networkIdBN(), TypeOutput.Number)\n  }\n\n  /**\n   * Returns the Id of current network\n   * @returns network Id\n   */\n  networkIdBN(): BN {\n    return new BN(this._chainParams['networkId'])\n  }\n\n  /**\n   * Returns the active EIPs\n   * @returns List of EIPs\n   */\n  eips(): number[] {\n    return this._eips\n  }\n\n  /**\n   * Returns the consensus type of the network\n   * Possible values: \"pow\"|\"poa\"|\"pos\"\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusType(): string | ConsensusType {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['type']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    return this._chainParams['consensus']!['type']\n  }\n\n  /**\n   * Returns the concrete consensus implementation\n   * algorithm or protocol for the network\n   * e.g. \"ethash\" for \"pow\" consensus type,\n   * \"clique\" for \"poa\" consensus type or\n   * \"casper\" for \"pos\" consensus type.\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusAlgorithm(): string | ConsensusAlgorithm {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        value = hfChanges[1]['consensus']['algorithm']\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    return this._chainParams['consensus']!['algorithm'] as ConsensusAlgorithm\n  }\n\n  /**\n   * Returns a dictionary with consensus configuration\n   * parameters based on the consensus algorithm\n   *\n   * Expected returns (parameters must be present in\n   * the respective chain json files):\n   *\n   * ethash: -\n   * clique: period, epoch\n   * aura: -\n   * casper: -\n   *\n   * Note: This value can update along a hardfork.\n   */\n  consensusConfig(): { [key: string]: any } {\n    const hardfork = this.hardfork()\n\n    let value\n    for (const hfChanges of HARDFORK_CHANGES) {\n      if ('consensus' in hfChanges[1]) {\n        // The config parameter is named after the respective consensus algorithm\n        value = hfChanges[1]['consensus'][hfChanges[1]['consensus']['algorithm']]\n      }\n      if (hfChanges[0] === hardfork) break\n    }\n    if (value) {\n      return value\n    }\n    const consensusAlgorithm = this.consensusAlgorithm()\n    return this._chainParams['consensus']![consensusAlgorithm as ConsensusAlgorithm]\n  }\n\n  /**\n   * Returns a deep copy of this {@link Common} instance.\n   */\n  copy(): Common {\n    const copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this)\n    copy.removeAllListeners()\n    return copy\n  }\n}\n","/*! crc32.js (C) 2014-present SheetJS -- http://sheetjs.com */\n/* vim: set ts=2: */\n/*exported CRC32 */\nvar CRC32;\n(function (factory) {\n\t/*jshint ignore:start */\n\t/*eslint-disable */\n\tif(typeof DO_NOT_EXPORT_CRC === 'undefined') {\n\t\tif('object' === typeof exports) {\n\t\t\tfactory(exports);\n\t\t} else if ('function' === typeof define && define.amd) {\n\t\t\tdefine(function () {\n\t\t\t\tvar module = {};\n\t\t\t\tfactory(module);\n\t\t\t\treturn module;\n\t\t\t});\n\t\t} else {\n\t\t\tfactory(CRC32 = {});\n\t\t}\n\t} else {\n\t\tfactory(CRC32 = {});\n\t}\n\t/*eslint-enable */\n\t/*jshint ignore:end */\n}(function(CRC32) {\nCRC32.version = '1.2.2';\n/*global Int32Array */\nfunction signed_crc_table() {\n\tvar c = 0, table = new Array(256);\n\n\tfor(var n =0; n != 256; ++n){\n\t\tc = n;\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\tc = ((c&1) ? (-306674912 ^ (c >>> 1)) : (c >>> 1));\n\t\ttable[n] = c;\n\t}\n\n\treturn typeof Int32Array !== 'undefined' ? new Int32Array(table) : table;\n}\n\nvar T0 = signed_crc_table();\nfunction slice_by_16_tables(T) {\n\tvar c = 0, v = 0, n = 0, table = typeof Int32Array !== 'undefined' ? new Int32Array(4096) : new Array(4096) ;\n\n\tfor(n = 0; n != 256; ++n) table[n] = T[n];\n\tfor(n = 0; n != 256; ++n) {\n\t\tv = T[n];\n\t\tfor(c = 256 + n; c < 4096; c += 256) v = table[c] = (v >>> 8) ^ T[v & 0xFF];\n\t}\n\tvar out = [];\n\tfor(n = 1; n != 16; ++n) out[n - 1] = typeof Int32Array !== 'undefined' ? table.subarray(n * 256, n * 256 + 256) : table.slice(n * 256, n * 256 + 256);\n\treturn out;\n}\nvar TT = slice_by_16_tables(T0);\nvar T1 = TT[0],  T2 = TT[1],  T3 = TT[2],  T4 = TT[3],  T5 = TT[4];\nvar T6 = TT[5],  T7 = TT[6],  T8 = TT[7],  T9 = TT[8],  Ta = TT[9];\nvar Tb = TT[10], Tc = TT[11], Td = TT[12], Te = TT[13], Tf = TT[14];\nfunction crc32_bstr(bstr, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = bstr.length; i < L;) C = (C>>>8) ^ T0[(C^bstr.charCodeAt(i++))&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_buf(B, seed) {\n\tvar C = seed ^ -1, L = B.length - 15, i = 0;\n\tfor(; i < L;) C =\n\t\tTf[B[i++] ^ (C & 255)] ^\n\t\tTe[B[i++] ^ ((C >> 8) & 255)] ^\n\t\tTd[B[i++] ^ ((C >> 16) & 255)] ^\n\t\tTc[B[i++] ^ (C >>> 24)] ^\n\t\tTb[B[i++]] ^ Ta[B[i++]] ^ T9[B[i++]] ^ T8[B[i++]] ^\n\t\tT7[B[i++]] ^ T6[B[i++]] ^ T5[B[i++]] ^ T4[B[i++]] ^\n\t\tT3[B[i++]] ^ T2[B[i++]] ^ T1[B[i++]] ^ T0[B[i++]];\n\tL += 15;\n\twhile(i < L) C = (C>>>8) ^ T0[(C^B[i++])&0xFF];\n\treturn ~C;\n}\n\nfunction crc32_str(str, seed) {\n\tvar C = seed ^ -1;\n\tfor(var i = 0, L = str.length, c = 0, d = 0; i < L;) {\n\t\tc = str.charCodeAt(i++);\n\t\tif(c < 0x80) {\n\t\t\tC = (C>>>8) ^ T0[(C^c)&0xFF];\n\t\t} else if(c < 0x800) {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (192|((c>>6)&31)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t} else if(c >= 0xD800 && c < 0xE000) {\n\t\t\tc = (c&1023)+64; d = str.charCodeAt(i++)&1023;\n\t\t\tC = (C>>>8) ^ T0[(C ^ (240|((c>>8)&7)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>2)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((d>>6)&15)|((c&3)<<4)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(d&63)))&0xFF];\n\t\t} else {\n\t\t\tC = (C>>>8) ^ T0[(C ^ (224|((c>>12)&15)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|((c>>6)&63)))&0xFF];\n\t\t\tC = (C>>>8) ^ T0[(C ^ (128|(c&63)))&0xFF];\n\t\t}\n\t}\n\treturn ~C;\n}\nCRC32.table = T0;\n// $FlowIgnore\nCRC32.bstr = crc32_bstr;\n// $FlowIgnore\nCRC32.buf = crc32_buf;\n// $FlowIgnore\nCRC32.str = crc32_str;\n}));\n"],"names":["txData","cache","hash","undefined","dataFee","activeCapabilities","DEFAULT_CHAIN","common_1","Mainnet","DEFAULT_HARDFORK","Istanbul","nonce","gasLimit","to","value","data","v","r","s","type","this","_type","ethereumjs_util_1","toBuffer","toNumber","toB","vB","rB","sB","length","_validateCannotExceedMaxInteger","Object","BaseTransaction","capability","includes","stringError","errors","getBaseFee","gt","push","concat","isSigned","verifySignature","fee","getDataFee","addn","common","param","gteHardfork","toCreationAddress","iaddn","txDataZero","txDataNonZero","cost","i","isActivatedEIP","dataLength","Math","ceil","initCodeCost","imuln","iadd","buf","publicKey","getSenderPublicKey","unpadBuffer","e","publicToAddress","privateKey","msg","_errorMsg","Error","hackApplied","supports","types_1","EIP155ReplayProtection","msgHash","getMessageToSign","ecsign","tx","_processSignature","index","indexOf","splice","chainId","chainIdBN","eq","copy","isSupportedChainId","chain","hardfork","forCustomChain","name","networkId","_a","values","bits","cannotEqual","entries","_c","key","gte","bufferToHex","toString","hf","postfix","exports","TRANSACTION_TYPE_BUFFER","Buffer","from","padStart","opts","_super","_this","accessList","maxFeePerGas","maxPriorityFeePerGas","_getCommon","accessListData","util_1","getAccessListData","AccessListJSON","verifyAccessList","mul","lt","eqn","checkMaxInitCodeSize","freeze","_b","__extends","FeeMarketEIP1559Transaction","serialized","slice","equals","decode","Array","isArray","fromValuesArray","fromSerializedTx","validateNoLeadingZeroes","call","getDataFeeEIP2930","isFrozen","baseFee","gasPrice","min","sub","add","bnToUnpaddedBuffer","base","raw","encode","hashMessage","message","keccak256","serialize","getMessageToVerifySignature","ecrecover","fromTxData","accessListJSON","getAccessListJSON","bnToHex","errorStr","_getSharedErrorPostfix","baseTransaction_1","AccessListEIP2930Transaction","yParity","enumerable","get","default","__exportStar","_validateTxV","chainIdDoubled","muln","Transaction","_getMessageToSign","rlphash","vBN","numSub","subn","isEven","divn","onEIP155BlockOrLater","TransactionFactory","txOptions","txType","_1","EIP","isBuffer","fromSerializedData","transactionID","_common","isAccessListBuffer","input","firstItem","Capability","AccessLists","bufferAccessList","isAccessList","newAccessList","item","addressBuffer","address","storageItems","storageKeys","json","jsonItem","accessListItem","storageSlots","storageSlot","JSONItem","setLengthLeft","slot","accessListStorageKeyCost","accessListAddressCost","slots","_getInitializedChains","customChains","names","chains","mainnet","ropsten","rinkeby","kovan","goerli","sepolia","customChains_1_1","name_1","require","CustomChain","Hardfork","Chain","ConsensusType","ConsensusAlgorithm","_customChains","_chainParams","setChain","defaultHardfork","hardforks","_e","forkHash","_calcForkHash","_hardfork","supportedHardforks","_supportedHardforks","setHardfork","eips","setEIPs","Common","chainParamsOrName","baseChain","standardChainParams","_getChainParams","__assign","PolygonMainnet","custom","PolygonMumbai","ArbitrumRinkebyTestnet","xDaiChain","OptimisticKovan","Berlin","OptimisticEthereum","customChainParams","initializedChains","Boolean","isBN","plainCustomChains","map","required_1_1","_isSupportedHardfork","existing","HARDFORK_CHANGES_1_1","emit","blockNumber","td","toType","BN","minTdHF","maxTdHF","previousHF","Chainstart","block","msgAdd","hardforkGteHardfork","getHardforkByBlockNumber","onlySupported","hfs","hfs_1_1","chainName","eip","eips_1","minHF","this_1","requiredEIPs","forEach","elem","eips_2_1","_eips","topic","paramByEIP","paramByHardfork","_chooseHardfork","HARDFORK_CHANGES_2_1","hfChanges","hfEIPs","hfEIPs_1_1","valueEIP","eipParams","activeHfs","activeHardforks","HARDFORK_CHANGES_3_1","hfBlock","hardforkBlockBN","hardforkIsActiveOnBlock","hardfork1","hardfork2","onlyActive","posHf1","posHf2","hardforks_2_1","_d","hfs_2_1","Number","_getHardfork","nextHardforkBlockBN","reduce","acc","nextHardforkBlock","genesis","substr","hfBuffer","alloc","prevBlock","hfBlockBuffer","inputBuffer","forkhash","intToBuffer","resArray","filter","chainArrayWithGenesis","networkIdBN","HARDFORK_CHANGES_4_1","HARDFORK_CHANGES_5_1","HARDFORK_CHANGES_6_1","consensusAlgorithm","assign","create","getPrototypeOf","removeAllListeners","events_1","factory","CRC32","version","T0","c","table","n","Int32Array","signed_crc_table","TT","T","out","subarray","slice_by_16_tables","T1","T2","T3","T4","T5","T6","T7","T8","T9","Ta","Tb","Tc","Td","Te","Tf","bstr","seed","C","L","charCodeAt","B","str","d","DO_NOT_EXPORT_CRC"],"sourceRoot":""}